
DTMF_Recover_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080059f8  080059f8  000159f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005c2c  08005c2c  00015c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  08005c30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  8 .bss          00005580  20000080  20000080  00020080  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20005600  20005600  00020080  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014564  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032dd  00000000  00000000  00034657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000077cc  00000000  00000000  00037934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  0003f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2f  00000000  00000000  0003fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dc9  00000000  00000000  00040af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018be7  00000000  00000000  000638c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d21ce  00000000  00000000  0007c4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003398  00000000  00000000  0014e678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00151a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059e0 	.word	0x080059e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080059e0 	.word	0x080059e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_InitTick+0x3c>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_InitTick+0x40>)
{
 8000f44:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f46:	6810      	ldr	r0, [r2, #0]
 8000f48:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f4c:	f000 fae0 	bl	8001510 <HAL_SYSTICK_Config>
 8000f50:	4604      	mov	r4, r0
 8000f52:	b958      	cbnz	r0, 8000f6c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f54:	2d0f      	cmp	r5, #15
 8000f56:	d809      	bhi.n	8000f6c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 fa96 	bl	8001490 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_InitTick+0x44>)
 8000f66:	4620      	mov	r0, r4
 8000f68:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	e7fc      	b.n	8000f6a <HAL_InitTick+0x36>
 8000f70:	20000000 	.word	0x20000000
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_Init>:
{
 8000f7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_Init+0x30>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 fa67 	bl	800146c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffc8 	bl	8000f34 <HAL_InitTick>
  HAL_MspInit();
 8000fa4:	f002 fac0 	bl	8003528 <HAL_MspInit>
}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	bd08      	pop	{r3, pc}
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x10>)
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <HAL_IncTick+0x14>)
 8000fb4:	6811      	ldr	r1, [r2, #0]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	440b      	add	r3, r1
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	20000000 	.word	0x20000000

08000fc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fc8:	4b01      	ldr	r3, [pc, #4]	; (8000fd0 <HAL_GetTick+0x8>)
 8000fca:	6818      	ldr	r0, [r3, #0]
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000009c 	.word	0x2000009c

08000fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f000 809b 	beq.w	8001114 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fde:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000fe0:	b925      	cbnz	r5, 8000fec <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe2:	f002 fabd 	bl	8003560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fee:	06db      	lsls	r3, r3, #27
 8000ff0:	f100 808e 	bmi.w	8001110 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ff6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ffa:	f023 0302 	bic.w	r3, r3, #2
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_ADC_Init+0x144>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800100c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	6861      	ldr	r1, [r4, #4]
 8001012:	430a      	orrs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001016:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001018:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800102a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800102c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800102e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001032:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	430a      	orrs	r2, r1
 8001038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800103a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800103c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800103e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800104a:	4934      	ldr	r1, [pc, #208]	; (800111c <HAL_ADC_Init+0x148>)
 800104c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800104e:	428a      	cmp	r2, r1
 8001050:	d052      	beq.n	80010f8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001052:	6899      	ldr	r1, [r3, #8]
 8001054:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001058:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800105a:	6899      	ldr	r1, [r3, #8]
 800105c:	430a      	orrs	r2, r1
 800105e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001060:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001062:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800106e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	f022 0202 	bic.w	r2, r2, #2
 8001076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	7e21      	ldrb	r1, [r4, #24]
 800107c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001080:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001082:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001086:	2a00      	cmp	r2, #0
 8001088:	d03e      	beq.n	8001108 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800108a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800108c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800108e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800109a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	3901      	subs	r1, #1
 80010a0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010a4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010a8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80010aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b2:	3901      	subs	r1, #1
 80010b4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80010c8:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010cc:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010ce:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d0:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010da:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010dc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010e0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010e2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010f0:	2300      	movs	r3, #0
 80010f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001106:	e7b2      	b.n	800106e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110e:	e7c9      	b.n	80010a4 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001110:	2001      	movs	r0, #1
 8001112:	e7ed      	b.n	80010f0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e7ee      	b.n	80010f6 <HAL_ADC_Init+0x122>
 8001118:	40012300 	.word	0x40012300
 800111c:	0f000001 	.word	0x0f000001

08001120 <HAL_ADC_Start_IT>:
{
 8001120:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001126:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800112a:	2b01      	cmp	r3, #1
 800112c:	d066      	beq.n	80011fc <HAL_ADC_Start_IT+0xdc>
 800112e:	2301      	movs	r3, #1
 8001130:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001134:	6803      	ldr	r3, [r0, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	07d2      	lsls	r2, r2, #31
 800113a:	d505      	bpl.n	8001148 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	07d1      	lsls	r1, r2, #31
 8001140:	d414      	bmi.n	800116c <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 8001142:	2000      	movs	r0, #0
}
 8001144:	b002      	add	sp, #8
 8001146:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001148:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114a:	492d      	ldr	r1, [pc, #180]	; (8001200 <HAL_ADC_Start_IT+0xe0>)
    __HAL_ADC_ENABLE(hadc);
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <HAL_ADC_Start_IT+0xe4>)
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	fbb2 f2f1 	udiv	r2, r2, r1
 800115a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800115e:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8001160:	9a01      	ldr	r2, [sp, #4]
 8001162:	2a00      	cmp	r2, #0
 8001164:	d0ea      	beq.n	800113c <HAL_ADC_Start_IT+0x1c>
      counter--;
 8001166:	9a01      	ldr	r2, [sp, #4]
 8001168:	3a01      	subs	r2, #1
 800116a:	e7f8      	b.n	800115e <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 800116c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800116e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800117a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001180:	bf41      	itttt	mi
 8001182:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8001184:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001188:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800118c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001194:	bf1c      	itt	ne
 8001196:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8001198:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800119c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800119e:	2200      	movs	r2, #0
 80011a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a8:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011b0:	f042 0220 	orr.w	r2, r2, #32
 80011b4:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_ADC_Start_IT+0xe8>)
 80011b8:	6851      	ldr	r1, [r2, #4]
 80011ba:	f011 0f1f 	tst.w	r1, #31
 80011be:	4913      	ldr	r1, [pc, #76]	; (800120c <HAL_ADC_Start_IT+0xec>)
 80011c0:	d119      	bne.n	80011f6 <HAL_ADC_Start_IT+0xd6>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d007      	beq.n	80011d6 <HAL_ADC_Start_IT+0xb6>
 80011c6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80011ca:	428b      	cmp	r3, r1
 80011cc:	d10c      	bne.n	80011e8 <HAL_ADC_Start_IT+0xc8>
 80011ce:	6852      	ldr	r2, [r2, #4]
 80011d0:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011d4:	d1b5      	bne.n	8001142 <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d6:	6898      	ldr	r0, [r3, #8]
 80011d8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80011dc:	d1b1      	bne.n	8001142 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	e7ad      	b.n	8001144 <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011e8:	4909      	ldr	r1, [pc, #36]	; (8001210 <HAL_ADC_Start_IT+0xf0>)
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d1a9      	bne.n	8001142 <HAL_ADC_Start_IT+0x22>
 80011ee:	6852      	ldr	r2, [r2, #4]
 80011f0:	f012 0f10 	tst.w	r2, #16
 80011f4:	e7ee      	b.n	80011d4 <HAL_ADC_Start_IT+0xb4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f6:	428b      	cmp	r3, r1
 80011f8:	d1a3      	bne.n	8001142 <HAL_ADC_Start_IT+0x22>
 80011fa:	e7ec      	b.n	80011d6 <HAL_ADC_Start_IT+0xb6>
  __HAL_LOCK(hadc);
 80011fc:	2002      	movs	r0, #2
 80011fe:	e7a1      	b.n	8001144 <HAL_ADC_Start_IT+0x24>
 8001200:	000f4240 	.word	0x000f4240
 8001204:	2000000c 	.word	0x2000000c
 8001208:	40012300 	.word	0x40012300
 800120c:	40012000 	.word	0x40012000
 8001210:	40012200 	.word	0x40012200

08001214 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001214:	6803      	ldr	r3, [r0, #0]
 8001216:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001218:	4770      	bx	lr

0800121a <HAL_ADC_LevelOutOfWindowCallback>:
 800121a:	4770      	bx	lr

0800121c <HAL_ADC_ErrorCallback>:
 800121c:	4770      	bx	lr

0800121e <HAL_ADC_IRQHandler>:
{
 800121e:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001224:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001226:	078d      	lsls	r5, r1, #30
{
 8001228:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800122a:	d52b      	bpl.n	8001284 <HAL_ADC_IRQHandler+0x66>
 800122c:	0690      	lsls	r0, r2, #26
 800122e:	d529      	bpl.n	8001284 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001230:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001232:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001234:	bf5e      	ittt	pl
 8001236:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001238:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800123c:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001244:	d117      	bne.n	8001276 <HAL_ADC_IRQHandler+0x58>
 8001246:	7e22      	ldrb	r2, [r4, #24]
 8001248:	b9aa      	cbnz	r2, 8001276 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800124c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001250:	d002      	beq.n	8001258 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001252:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001254:	0552      	lsls	r2, r2, #21
 8001256:	d40e      	bmi.n	8001276 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	f022 0220 	bic.w	r2, r2, #32
 800125e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001266:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001268:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126a:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800126c:	bf5e      	ittt	pl
 800126e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001270:	f043 0301 	orrpl.w	r3, r3, #1
 8001274:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001276:	4620      	mov	r0, r4
 8001278:	f001 fea4 	bl	8002fc4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	f06f 0212 	mvn.w	r2, #18
 8001282:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001288:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800128a:	074d      	lsls	r5, r1, #29
 800128c:	d532      	bpl.n	80012f4 <HAL_ADC_IRQHandler+0xd6>
 800128e:	0610      	lsls	r0, r2, #24
 8001290:	d530      	bpl.n	80012f4 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001292:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001294:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001296:	bf5e      	ittt	pl
 8001298:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800129a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800129e:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80012a6:	d11e      	bne.n	80012e6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012aa:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80012ae:	d002      	beq.n	80012b6 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012b0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012b2:	0552      	lsls	r2, r2, #21
 80012b4:	d417      	bmi.n	80012e6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012b6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012b8:	0555      	lsls	r5, r2, #21
 80012ba:	d414      	bmi.n	80012e6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012bc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012be:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80012c2:	d110      	bne.n	80012e6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012c4:	7e22      	ldrb	r2, [r4, #24]
 80012c6:	b972      	cbnz	r2, 80012e6 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ce:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012d6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012da:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012dc:	bf5e      	ittt	pl
 80012de:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80012e0:	f043 0301 	orrpl.w	r3, r3, #1
 80012e4:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012e6:	4620      	mov	r0, r4
 80012e8:	f000 f8be 	bl	8001468 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	f06f 020c 	mvn.w	r2, #12
 80012f2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012f8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80012fa:	07c9      	lsls	r1, r1, #31
 80012fc:	d50f      	bpl.n	800131e <HAL_ADC_IRQHandler+0x100>
 80012fe:	0655      	lsls	r5, r2, #25
 8001300:	d50d      	bpl.n	800131e <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	07d8      	lsls	r0, r3, #31
 8001306:	d50a      	bpl.n	800131e <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff ff82 	bl	800121a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	f06f 0201 	mvn.w	r2, #1
 800131c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001322:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001324:	0689      	lsls	r1, r1, #26
 8001326:	d50d      	bpl.n	8001344 <HAL_ADC_IRQHandler+0x126>
 8001328:	0152      	lsls	r2, r2, #5
 800132a:	d50b      	bpl.n	8001344 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800132c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800132e:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001332:	f042 0202 	orr.w	r2, r2, #2
 8001336:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001338:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800133a:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 800133c:	f7ff ff6e 	bl	800121c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	601d      	str	r5, [r3, #0]
}
 8001344:	bd38      	pop	{r3, r4, r5, pc}
	...

08001348 <HAL_ADC_ConfigChannel>:
{
 8001348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800134e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001352:	2b01      	cmp	r3, #1
 8001354:	d064      	beq.n	8001420 <HAL_ADC_ConfigChannel+0xd8>
 8001356:	2301      	movs	r3, #1
 8001358:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800135c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800135e:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001360:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001362:	2d09      	cmp	r5, #9
 8001364:	b2ac      	uxth	r4, r5
 8001366:	d931      	bls.n	80013cc <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001368:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800136c:	68df      	ldr	r7, [r3, #12]
 800136e:	3a1e      	subs	r2, #30
 8001370:	f04f 0c07 	mov.w	ip, #7
 8001374:	fa0c fc02 	lsl.w	ip, ip, r2
 8001378:	ea27 070c 	bic.w	r7, r7, ip
 800137c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800137e:	68df      	ldr	r7, [r3, #12]
 8001380:	fa06 f202 	lsl.w	r2, r6, r2
 8001384:	433a      	orrs	r2, r7
 8001386:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001388:	6849      	ldr	r1, [r1, #4]
 800138a:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800138c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8001390:	d82b      	bhi.n	80013ea <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001394:	3a05      	subs	r2, #5
 8001396:	261f      	movs	r6, #31
 8001398:	4096      	lsls	r6, r2
 800139a:	ea21 0106 	bic.w	r1, r1, r6
 800139e:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a2:	fa04 f202 	lsl.w	r2, r4, r2
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <HAL_ADC_ConfigChannel+0x110>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d107      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
 80013b0:	2d12      	cmp	r5, #18
 80013b2:	d137      	bne.n	8001424 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013b4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80013b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 80013c0:	2300      	movs	r3, #0
 80013c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013c6:	4618      	mov	r0, r3
}
 80013c8:	b003      	add	sp, #12
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80013d2:	2707      	movs	r7, #7
 80013d4:	fa07 f70c 	lsl.w	r7, r7, ip
 80013d8:	ea22 0207 	bic.w	r2, r2, r7
 80013dc:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	fa06 f60c 	lsl.w	r6, r6, ip
 80013e4:	4316      	orrs	r6, r2
 80013e6:	611e      	str	r6, [r3, #16]
 80013e8:	e7ce      	b.n	8001388 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80013ea:	290c      	cmp	r1, #12
 80013ec:	f04f 011f 	mov.w	r1, #31
 80013f0:	d80b      	bhi.n	800140a <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80013f4:	3a23      	subs	r2, #35	; 0x23
 80013f6:	4091      	lsls	r1, r2
 80013f8:	ea26 0101 	bic.w	r1, r6, r1
 80013fc:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001400:	fa04 f202 	lsl.w	r2, r4, r2
 8001404:	430a      	orrs	r2, r1
 8001406:	631a      	str	r2, [r3, #48]	; 0x30
 8001408:	e7cf      	b.n	80013aa <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800140a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800140c:	3a41      	subs	r2, #65	; 0x41
 800140e:	4091      	lsls	r1, r2
 8001410:	ea26 0101 	bic.w	r1, r6, r1
 8001414:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001416:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001418:	4094      	lsls	r4, r2
 800141a:	430c      	orrs	r4, r1
 800141c:	62dc      	str	r4, [r3, #44]	; 0x2c
 800141e:	e7c4      	b.n	80013aa <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001420:	2002      	movs	r0, #2
 8001422:	e7d1      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001424:	f1a5 0310 	sub.w	r3, r5, #16
 8001428:	2b01      	cmp	r3, #1
 800142a:	d8c9      	bhi.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800142c:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_ADC_ConfigChannel+0x114>)
 800142e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001430:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001436:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001438:	d1c2      	bne.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_ADC_ConfigChannel+0x118>)
 800143c:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_ADC_ConfigChannel+0x11c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fbb3 f3f2 	udiv	r3, r3, r2
 8001444:	220a      	movs	r2, #10
 8001446:	4353      	muls	r3, r2
        counter--;
 8001448:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0b7      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	e7f8      	b.n	8001448 <HAL_ADC_ConfigChannel+0x100>
 8001456:	bf00      	nop
 8001458:	40012000 	.word	0x40012000
 800145c:	40012300 	.word	0x40012300
 8001460:	2000000c 	.word	0x2000000c
 8001464:	000f4240 	.word	0x000f4240

08001468 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001468:	4770      	bx	lr
	...

0800146c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800146e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001470:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001474:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001488:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b530      	push	{r4, r5, lr}
 8001494:	68dc      	ldr	r4, [r3, #12]
 8001496:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	bf28      	it	cs
 80014a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ac:	bf8c      	ite	hi
 80014ae:	3c03      	subhi	r4, #3
 80014b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b2:	fa05 f303 	lsl.w	r3, r5, r3
 80014b6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ba:	40a5      	lsls	r5, r4
 80014bc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80014c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	bfac      	ite	ge
 80014ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	4a08      	ldrlt	r2, [pc, #32]	; (80014f0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	bfb8      	it	lt
 80014d6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	bfaa      	itet	ge
 80014de:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80014e8:	bd30      	pop	{r4, r5, pc}
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	e000ed14 	.word	0xe000ed14

080014f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014f4:	2800      	cmp	r0, #0
 80014f6:	db07      	blt.n	8001508 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f8:	0941      	lsrs	r1, r0, #5
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_NVIC_EnableIRQ+0x18>)
 80014fc:	f000 001f 	and.w	r0, r0, #31
 8001500:	2301      	movs	r3, #1
 8001502:	4083      	lsls	r3, r0
 8001504:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	3801      	subs	r0, #1
 8001512:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001516:	d20b      	bcs.n	8001530 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001518:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	21f0      	movs	r1, #240	; 0xf0
 8001522:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001526:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001528:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001530:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4a6d      	ldr	r2, [pc, #436]	; (80016f4 <HAL_GPIO_Init+0x1bc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80016fc <HAL_GPIO_Init+0x1c4>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001542:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001700 <HAL_GPIO_Init+0x1c8>
{
 8001546:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001548:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 800154c:	2701      	movs	r7, #1
 800154e:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001550:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8001554:	ea37 0404 	bics.w	r4, r7, r4
 8001558:	f040 80b7 	bne.w	80016ca <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155c:	684c      	ldr	r4, [r1, #4]
 800155e:	f024 0a10 	bic.w	sl, r4, #16
 8001562:	f1ba 0f02 	cmp.w	sl, #2
 8001566:	d116      	bne.n	8001596 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8001568:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800156c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001570:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001574:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001578:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800157c:	f04f 0c0f 	mov.w	ip, #15
 8001580:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001584:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001588:	690e      	ldr	r6, [r1, #16]
 800158a:	fa06 f60b 	lsl.w	r6, r6, fp
 800158e:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001592:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8001596:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800159e:	f04f 0c03 	mov.w	ip, #3
 80015a2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80015a6:	ea6f 060c 	mvn.w	r6, ip
 80015aa:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ae:	f004 0c03 	and.w	ip, r4, #3
 80015b2:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b6:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015be:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c2:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 80015c4:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c8:	d813      	bhi.n	80015f2 <HAL_GPIO_Init+0xba>
        temp = GPIOx->OSPEEDR; 
 80015ca:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ce:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d2:	68ce      	ldr	r6, [r1, #12]
 80015d4:	fa06 fa0e 	lsl.w	sl, r6, lr
 80015d8:	ea4a 0a0c 	orr.w	sl, sl, ip
        GPIOx->OSPEEDR = temp;
 80015dc:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 80015e0:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e4:	ea2c 0c07 	bic.w	ip, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015e8:	0927      	lsrs	r7, r4, #4
 80015ea:	409f      	lsls	r7, r3
 80015ec:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80015f0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80015f2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f4:	9e01      	ldr	r6, [sp, #4]
 80015f6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f8:	688e      	ldr	r6, [r1, #8]
 80015fa:	fa06 f60e 	lsl.w	r6, r6, lr
 80015fe:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001600:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001602:	00e6      	lsls	r6, r4, #3
 8001604:	d561      	bpl.n	80016ca <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	f04f 0b00 	mov.w	fp, #0
 800160a:	f8cd b00c 	str.w	fp, [sp, #12]
 800160e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001612:	4e39      	ldr	r6, [pc, #228]	; (80016f8 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001618:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800161c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001620:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001624:	9703      	str	r7, [sp, #12]
 8001626:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001628:	f023 0703 	bic.w	r7, r3, #3
 800162c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001630:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001634:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001638:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001640:	f04f 0c0f 	mov.w	ip, #15
 8001644:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001648:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800164a:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164e:	d043      	beq.n	80016d8 <HAL_GPIO_Init+0x1a0>
 8001650:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001654:	42b0      	cmp	r0, r6
 8001656:	d041      	beq.n	80016dc <HAL_GPIO_Init+0x1a4>
 8001658:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800165c:	42b0      	cmp	r0, r6
 800165e:	d03f      	beq.n	80016e0 <HAL_GPIO_Init+0x1a8>
 8001660:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001664:	42b0      	cmp	r0, r6
 8001666:	d03d      	beq.n	80016e4 <HAL_GPIO_Init+0x1ac>
 8001668:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800166c:	42b0      	cmp	r0, r6
 800166e:	d03b      	beq.n	80016e8 <HAL_GPIO_Init+0x1b0>
 8001670:	4548      	cmp	r0, r9
 8001672:	d03b      	beq.n	80016ec <HAL_GPIO_Init+0x1b4>
 8001674:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001678:	42b0      	cmp	r0, r6
 800167a:	d039      	beq.n	80016f0 <HAL_GPIO_Init+0x1b8>
 800167c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001680:	42b0      	cmp	r0, r6
 8001682:	bf0c      	ite	eq
 8001684:	2607      	moveq	r6, #7
 8001686:	2608      	movne	r6, #8
 8001688:	fa06 f60e 	lsl.w	r6, r6, lr
 800168c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001690:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001692:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001694:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001696:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800169a:	bf0c      	ite	eq
 800169c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800169e:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80016a0:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80016a2:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80016a8:	bf0c      	ite	eq
 80016aa:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80016ac:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80016ae:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b0:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80016b6:	bf0c      	ite	eq
 80016b8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80016ba:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80016bc:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80016be:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80016c2:	bf54      	ite	pl
 80016c4:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80016c6:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80016c8:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ca:	3301      	adds	r3, #1
 80016cc:	2b10      	cmp	r3, #16
 80016ce:	f47f af3c 	bne.w	800154a <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 80016d2:	b005      	add	sp, #20
 80016d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d8:	465e      	mov	r6, fp
 80016da:	e7d5      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016dc:	2601      	movs	r6, #1
 80016de:	e7d3      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016e0:	2602      	movs	r6, #2
 80016e2:	e7d1      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016e4:	2603      	movs	r6, #3
 80016e6:	e7cf      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016e8:	2604      	movs	r6, #4
 80016ea:	e7cd      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016ec:	2605      	movs	r6, #5
 80016ee:	e7cb      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016f0:	2606      	movs	r6, #6
 80016f2:	e7c9      	b.n	8001688 <HAL_GPIO_Init+0x150>
 80016f4:	40013c00 	.word	0x40013c00
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021400 	.word	0x40021400

08001704 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001704:	b10a      	cbz	r2, 800170a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001706:	6181      	str	r1, [r0, #24]
  }
}
 8001708:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170a:	0409      	lsls	r1, r1, #16
 800170c:	e7fb      	b.n	8001706 <HAL_GPIO_WritePin+0x2>

0800170e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800170e:	6801      	ldr	r1, [r0, #0]
 8001710:	694b      	ldr	r3, [r1, #20]
 8001712:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	d010      	beq.n	800173e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800171c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001720:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001722:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001724:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001726:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800172a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800172e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
 800173c:	4770      	bx	lr
  }
  return HAL_OK;
 800173e:	4618      	mov	r0, r3
}
 8001740:	4770      	bx	lr

08001742 <I2C_WaitOnFlagUntilTimeout>:
{
 8001742:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001746:	4606      	mov	r6, r0
 8001748:	460f      	mov	r7, r1
 800174a:	4691      	mov	r9, r2
 800174c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800174e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001752:	6833      	ldr	r3, [r6, #0]
 8001754:	f1ba 0f01 	cmp.w	sl, #1
 8001758:	bf0c      	ite	eq
 800175a:	695c      	ldreq	r4, [r3, #20]
 800175c:	699c      	ldrne	r4, [r3, #24]
 800175e:	ea27 0404 	bic.w	r4, r7, r4
 8001762:	b2a4      	uxth	r4, r4
 8001764:	fab4 f484 	clz	r4, r4
 8001768:	0964      	lsrs	r4, r4, #5
 800176a:	45a1      	cmp	r9, r4
 800176c:	d001      	beq.n	8001772 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800176e:	2000      	movs	r0, #0
 8001770:	e017      	b.n	80017a2 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001772:	1c6a      	adds	r2, r5, #1
 8001774:	d0ee      	beq.n	8001754 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001776:	f7ff fc27 	bl	8000fc8 <HAL_GetTick>
 800177a:	9b08      	ldr	r3, [sp, #32]
 800177c:	1ac0      	subs	r0, r0, r3
 800177e:	42a8      	cmp	r0, r5
 8001780:	d801      	bhi.n	8001786 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001782:	2d00      	cmp	r5, #0
 8001784:	d1e5      	bne.n	8001752 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001786:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001788:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800178a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800178c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001790:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001794:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001796:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800179a:	f042 0220 	orr.w	r2, r2, #32
 800179e:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
}
 80017a2:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80017a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017aa:	4604      	mov	r4, r0
 80017ac:	460f      	mov	r7, r1
 80017ae:	4616      	mov	r6, r2
 80017b0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b2:	6825      	ldr	r5, [r4, #0]
 80017b4:	6968      	ldr	r0, [r5, #20]
 80017b6:	ea27 0000 	bic.w	r0, r7, r0
 80017ba:	b280      	uxth	r0, r0
 80017bc:	b1b8      	cbz	r0, 80017ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017be:	696b      	ldr	r3, [r5, #20]
 80017c0:	055a      	lsls	r2, r3, #21
 80017c2:	d516      	bpl.n	80017f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017cc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80017d0:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80017d2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017e2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017e6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80017e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
}
 80017ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80017f2:	1c73      	adds	r3, r6, #1
 80017f4:	d0de      	beq.n	80017b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f6:	f7ff fbe7 	bl	8000fc8 <HAL_GetTick>
 80017fa:	eba0 0008 	sub.w	r0, r0, r8
 80017fe:	42b0      	cmp	r0, r6
 8001800:	d801      	bhi.n	8001806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8001802:	2e00      	cmp	r6, #0
 8001804:	d1d5      	bne.n	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001806:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001808:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800180a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800180c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001810:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	e7e4      	b.n	80017e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800181c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4604      	mov	r4, r0
 8001820:	460d      	mov	r5, r1
 8001822:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001824:	6821      	ldr	r1, [r4, #0]
 8001826:	694b      	ldr	r3, [r1, #20]
 8001828:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800182c:	d001      	beq.n	8001832 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800182e:	2000      	movs	r0, #0
 8001830:	e010      	b.n	8001854 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001832:	694a      	ldr	r2, [r1, #20]
 8001834:	06d2      	lsls	r2, r2, #27
 8001836:	d50e      	bpl.n	8001856 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001838:	f06f 0210 	mvn.w	r2, #16
 800183c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800183e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001840:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001842:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001846:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800184a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800184c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800184e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
}
 8001854:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001856:	f7ff fbb7 	bl	8000fc8 <HAL_GetTick>
 800185a:	1b80      	subs	r0, r0, r6
 800185c:	42a8      	cmp	r0, r5
 800185e:	d801      	bhi.n	8001864 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001860:	2d00      	cmp	r5, #0
 8001862:	d1df      	bne.n	8001824 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001864:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001866:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001868:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800186a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800186e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001872:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001874:	f042 0220 	orr.w	r2, r2, #32
 8001878:	e7e8      	b.n	800184c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800187a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800187a:	b570      	push	{r4, r5, r6, lr}
 800187c:	4604      	mov	r4, r0
 800187e:	460d      	mov	r5, r1
 8001880:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	075b      	lsls	r3, r3, #29
 8001888:	d501      	bpl.n	800188e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800188a:	2000      	movs	r0, #0
}
 800188c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff ff3d 	bl	800170e <I2C_IsAcknowledgeFailed>
 8001894:	b9a8      	cbnz	r0, 80018c2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001896:	1c6a      	adds	r2, r5, #1
 8001898:	d0f3      	beq.n	8001882 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189a:	f7ff fb95 	bl	8000fc8 <HAL_GetTick>
 800189e:	1b80      	subs	r0, r0, r6
 80018a0:	42a8      	cmp	r0, r5
 80018a2:	d801      	bhi.n	80018a8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80018a4:	2d00      	cmp	r5, #0
 80018a6:	d1ec      	bne.n	8001882 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018a8:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80018aa:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018ac:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80018b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018bc:	f042 0220 	orr.w	r2, r2, #32
 80018c0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7e2      	b.n	800188c <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080018c6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80018c6:	b570      	push	{r4, r5, r6, lr}
 80018c8:	4604      	mov	r4, r0
 80018ca:	460d      	mov	r5, r1
 80018cc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	d501      	bpl.n	80018da <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80018d6:	2000      	movs	r0, #0
}
 80018d8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff ff17 	bl	800170e <I2C_IsAcknowledgeFailed>
 80018e0:	b9a8      	cbnz	r0, 800190e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80018e2:	1c6a      	adds	r2, r5, #1
 80018e4:	d0f3      	beq.n	80018ce <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018e6:	f7ff fb6f 	bl	8000fc8 <HAL_GetTick>
 80018ea:	1b80      	subs	r0, r0, r6
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d801      	bhi.n	80018f4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80018f0:	2d00      	cmp	r5, #0
 80018f2:	d1ec      	bne.n	80018ce <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018f4:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80018f6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018f8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001902:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001904:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	f042 0220 	orr.w	r2, r2, #32
 800190c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
 8001910:	e7e2      	b.n	80018d8 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001914 <HAL_I2C_Init>:
{
 8001914:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001916:	4604      	mov	r4, r0
 8001918:	b908      	cbnz	r0, 800191e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
}
 800191c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800191e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001922:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001926:	b91b      	cbnz	r3, 8001930 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001928:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800192c:	f001 fe52 	bl	80035d4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001930:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001932:	2324      	movs	r3, #36	; 0x24
 8001934:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001940:	f000 ff90 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001944:	4b3f      	ldr	r3, [pc, #252]	; (8001a44 <HAL_I2C_Init+0x130>)
 8001946:	6865      	ldr	r5, [r4, #4]
 8001948:	429d      	cmp	r5, r3
 800194a:	bf94      	ite	ls
 800194c:	4b3e      	ldrls	r3, [pc, #248]	; (8001a48 <HAL_I2C_Init+0x134>)
 800194e:	4b3f      	ldrhi	r3, [pc, #252]	; (8001a4c <HAL_I2C_Init+0x138>)
 8001950:	4298      	cmp	r0, r3
 8001952:	bf8c      	ite	hi
 8001954:	2300      	movhi	r3, #0
 8001956:	2301      	movls	r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1de      	bne.n	800191a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800195c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800195e:	4e39      	ldr	r6, [pc, #228]	; (8001a44 <HAL_I2C_Init+0x130>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001960:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001962:	4b3b      	ldr	r3, [pc, #236]	; (8001a50 <HAL_I2C_Init+0x13c>)
 8001964:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001968:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800196c:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800196e:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001970:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001972:	bf88      	it	hi
 8001974:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8001978:	6a11      	ldr	r1, [r2, #32]
 800197a:	bf88      	it	hi
 800197c:	4373      	mulhi	r3, r6
 800197e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001982:	bf84      	itt	hi
 8001984:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8001988:	fbb3 f3f6 	udivhi	r3, r3, r6
 800198c:	3301      	adds	r3, #1
 800198e:	430b      	orrs	r3, r1
 8001990:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001992:	69d1      	ldr	r1, [r2, #28]
 8001994:	1e43      	subs	r3, r0, #1
 8001996:	482b      	ldr	r0, [pc, #172]	; (8001a44 <HAL_I2C_Init+0x130>)
 8001998:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800199c:	4285      	cmp	r5, r0
 800199e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019a2:	d832      	bhi.n	8001a0a <HAL_I2C_Init+0xf6>
 80019a4:	006d      	lsls	r5, r5, #1
 80019a6:	f640 70fc 	movw	r0, #4092	; 0xffc
 80019aa:	fbb3 f3f5 	udiv	r3, r3, r5
 80019ae:	3301      	adds	r3, #1
 80019b0:	4203      	tst	r3, r0
 80019b2:	d042      	beq.n	8001a3a <HAL_I2C_Init+0x126>
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	4319      	orrs	r1, r3
 80019ba:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019bc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80019c0:	6811      	ldr	r1, [r2, #0]
 80019c2:	4303      	orrs	r3, r0
 80019c4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019cc:	6891      	ldr	r1, [r2, #8]
 80019ce:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80019d2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80019d6:	4303      	orrs	r3, r0
 80019d8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019dc:	430b      	orrs	r3, r1
 80019de:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80019e4:	68d1      	ldr	r1, [r2, #12]
 80019e6:	4303      	orrs	r3, r0
 80019e8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80019ec:	430b      	orrs	r3, r1
 80019ee:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80019fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a02:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001a08:	e788      	b.n	800191c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a0a:	68a0      	ldr	r0, [r4, #8]
 8001a0c:	b950      	cbnz	r0, 8001a24 <HAL_I2C_Init+0x110>
 8001a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a12:	fbb3 f3f5 	udiv	r3, r3, r5
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	b17b      	cbz	r3, 8001a3e <HAL_I2C_Init+0x12a>
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a22:	e7c9      	b.n	80019b8 <HAL_I2C_Init+0xa4>
 8001a24:	2019      	movs	r0, #25
 8001a26:	4368      	muls	r0, r5
 8001a28:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a32:	b123      	cbz	r3, 8001a3e <HAL_I2C_Init+0x12a>
 8001a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a38:	e7be      	b.n	80019b8 <HAL_I2C_Init+0xa4>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e7bc      	b.n	80019b8 <HAL_I2C_Init+0xa4>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e7ba      	b.n	80019b8 <HAL_I2C_Init+0xa4>
 8001a42:	bf00      	nop
 8001a44:	000186a0 	.word	0x000186a0
 8001a48:	001e847f 	.word	0x001e847f
 8001a4c:	003d08ff 	.word	0x003d08ff
 8001a50:	000f4240 	.word	0x000f4240

08001a54 <HAL_I2C_Master_Transmit>:
{
 8001a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a58:	4604      	mov	r4, r0
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001a60:	460d      	mov	r5, r1
 8001a62:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fab0 	bl	8000fc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001a6c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001a6e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a70:	d004      	beq.n	8001a7c <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8001a72:	2502      	movs	r5, #2
}
 8001a74:	4628      	mov	r0, r5
 8001a76:	b005      	add	sp, #20
 8001a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a7c:	9000      	str	r0, [sp, #0]
 8001a7e:	495a      	ldr	r1, [pc, #360]	; (8001be8 <HAL_I2C_Master_Transmit+0x194>)
 8001a80:	2319      	movs	r3, #25
 8001a82:	2201      	movs	r2, #1
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fe5c 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	d1f1      	bne.n	8001a72 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001a8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d0ed      	beq.n	8001a72 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a96:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a9e:	680b      	ldr	r3, [r1, #0]
 8001aa0:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001aa2:	bf5e      	ittt	pl
 8001aa4:	680b      	ldrpl	r3, [r1, #0]
 8001aa6:	f043 0301 	orrpl.w	r3, r3, #1
 8001aaa:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aac:	680b      	ldr	r3, [r1, #0]
 8001aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ab2:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ab4:	2321      	movs	r3, #33	; 0x21
 8001ab6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aba:	2310      	movs	r3, #16
 8001abc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001ac4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ac8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aca:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001acc:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_I2C_Master_Transmit+0x198>)
 8001ace:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ad0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001ad2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d004      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x90>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d002      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x90>
 8001ade:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae2:	d104      	bne.n	8001aee <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae4:	680b      	ldr	r3, [r1, #0]
 8001ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aea:	600b      	str	r3, [r1, #0]
 8001aec:	e002      	b.n	8001af4 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001af0:	2b12      	cmp	r3, #18
 8001af2:	d0f7      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af4:	9600      	str	r6, [sp, #0]
 8001af6:	463b      	mov	r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001afe:	4620      	mov	r0, r4
 8001b00:	f7ff fe1f 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001b04:	b108      	cbz	r0, 8001b0a <HAL_I2C_Master_Transmit+0xb6>
        return HAL_ERROR;
 8001b06:	2501      	movs	r5, #1
 8001b08:	e7b4      	b.n	8001a74 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b0a:	6923      	ldr	r3, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0c:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b12:	d121      	bne.n	8001b58 <HAL_I2C_Master_Transmit+0x104>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b14:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001b18:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b1a:	4935      	ldr	r1, [pc, #212]	; (8001bf0 <HAL_I2C_Master_Transmit+0x19c>)
 8001b1c:	4633      	mov	r3, r6
 8001b1e:	463a      	mov	r2, r7
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff fe40 	bl	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b26:	4605      	mov	r5, r0
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d1ec      	bne.n	8001b06 <HAL_I2C_Master_Transmit+0xb2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	9003      	str	r0, [sp, #12]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	9203      	str	r2, [sp, #12]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001b3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b3c:	b9f3      	cbnz	r3, 8001b7c <HAL_I2C_Master_Transmit+0x128>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3e:	6821      	ldr	r1, [r4, #0]
 8001b40:	680a      	ldr	r2, [r1, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001b4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001b56:	e78d      	b.n	8001a74 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b58:	11eb      	asrs	r3, r5, #7
 8001b5a:	f003 0306 	and.w	r3, r3, #6
 8001b5e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001b62:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b64:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <HAL_I2C_Master_Transmit+0x1a0>)
 8001b66:	4633      	mov	r3, r6
 8001b68:	463a      	mov	r2, r7
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f7ff fe1b 	bl	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d1c8      	bne.n	8001b06 <HAL_I2C_Master_Transmit+0xb2>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	b2ed      	uxtb	r5, r5
 8001b78:	611d      	str	r5, [r3, #16]
 8001b7a:	e7ce      	b.n	8001b1a <HAL_I2C_Master_Transmit+0xc6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7c:	4632      	mov	r2, r6
 8001b7e:	4639      	mov	r1, r7
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff fea0 	bl	80018c6 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b86:	b140      	cbz	r0, 8001b9a <HAL_I2C_Master_Transmit+0x146>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b8a:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8c:	bf01      	itttt	eq
 8001b8e:	6822      	ldreq	r2, [r4, #0]
 8001b90:	6813      	ldreq	r3, [r2, #0]
 8001b92:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001b96:	6013      	streq	r3, [r2, #0]
 8001b98:	e7b5      	b.n	8001b06 <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b9c:	6820      	ldr	r0, [r4, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001ba4:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001ba6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ba8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001baa:	3a01      	subs	r2, #1
 8001bac:	b292      	uxth	r2, r2
 8001bae:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001bb0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bb2:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8001bb6:	1e51      	subs	r1, r2, #1
 8001bb8:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bba:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8001bbe:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0x184>
 8001bc2:	b149      	cbz	r1, 8001bd8 <HAL_I2C_Master_Transmit+0x184>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc4:	7859      	ldrb	r1, [r3, #1]
 8001bc6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001bc8:	3302      	adds	r3, #2
 8001bca:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001bcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001bd2:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001bd4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001bd6:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	4632      	mov	r2, r6
 8001bda:	4639      	mov	r1, r7
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff fe4c 	bl	800187a <I2C_WaitOnBTFFlagUntilTimeout>
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d0a9      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0xe6>
 8001be6:	e7cf      	b.n	8001b88 <HAL_I2C_Master_Transmit+0x134>
 8001be8:	00100002 	.word	0x00100002
 8001bec:	ffff0000 	.word	0xffff0000
 8001bf0:	00010002 	.word	0x00010002
 8001bf4:	00010008 	.word	0x00010008

08001bf8 <HAL_I2C_Master_Receive>:
{
 8001bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	4698      	mov	r8, r3
 8001c02:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001c04:	460e      	mov	r6, r1
 8001c06:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff f9de 	bl	8000fc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c10:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001c12:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c14:	d004      	beq.n	8001c20 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001c16:	2602      	movs	r6, #2
}
 8001c18:	4630      	mov	r0, r6
 8001c1a:	b009      	add	sp, #36	; 0x24
 8001c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c20:	9000      	str	r0, [sp, #0]
 8001c22:	4997      	ldr	r1, [pc, #604]	; (8001e80 <HAL_I2C_Master_Receive+0x288>)
 8001c24:	2319      	movs	r3, #25
 8001c26:	2201      	movs	r2, #1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff fd8a 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d1f1      	bne.n	8001c16 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001c32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d0ed      	beq.n	8001c16 <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c3a:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c42:	680b      	ldr	r3, [r1, #0]
 8001c44:	07d8      	lsls	r0, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c46:	bf5e      	ittt	pl
 8001c48:	680b      	ldrpl	r3, [r1, #0]
 8001c4a:	f043 0301 	orrpl.w	r3, r3, #1
 8001c4e:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c50:	680b      	ldr	r3, [r1, #0]
 8001c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c56:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c58:	2322      	movs	r3, #34	; 0x22
 8001c5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c5e:	2310      	movs	r3, #16
 8001c60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001c68:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c6e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c70:	4b84      	ldr	r3, [pc, #528]	; (8001e84 <HAL_I2C_Master_Receive+0x28c>)
 8001c72:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c76:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 8001c78:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c80:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c82:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c84:	d004      	beq.n	8001c90 <HAL_I2C_Master_Receive+0x98>
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d002      	beq.n	8001c90 <HAL_I2C_Master_Receive+0x98>
 8001c8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c8e:	d104      	bne.n	8001c9a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c90:	680b      	ldr	r3, [r1, #0]
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e002      	b.n	8001ca0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c9c:	2b11      	cmp	r3, #17
 8001c9e:	d0f7      	beq.n	8001c90 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca0:	9500      	str	r5, [sp, #0]
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fd49 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001cb0:	b108      	cbz	r0, 8001cb6 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001cb2:	2601      	movs	r6, #1
 8001cb4:	e7b0      	b.n	8001c18 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb6:	6922      	ldr	r2, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cb8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001cbe:	d127      	bne.n	8001d10 <HAL_I2C_Master_Receive+0x118>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cc0:	f046 0601 	orr.w	r6, r6, #1
 8001cc4:	b2f6      	uxtb	r6, r6
 8001cc6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cc8:	496f      	ldr	r1, [pc, #444]	; (8001e88 <HAL_I2C_Master_Receive+0x290>)
 8001cca:	462b      	mov	r3, r5
 8001ccc:	463a      	mov	r2, r7
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff fd69 	bl	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd4:	4606      	mov	r6, r0
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d1eb      	bne.n	8001cb2 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001cda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cdc:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d14a      	bne.n	8001d78 <HAL_I2C_Master_Receive+0x180>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce2:	9003      	str	r0, [sp, #12]
 8001ce4:	694b      	ldr	r3, [r1, #20]
 8001ce6:	9303      	str	r3, [sp, #12]
 8001ce8:	698b      	ldr	r3, [r1, #24]
 8001cea:	9303      	str	r3, [sp, #12]
 8001cec:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cee:	680b      	ldr	r3, [r1, #0]
 8001cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf4:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8001e90 <HAL_I2C_Master_Receive+0x298>
    while (hi2c->XferSize > 0U)
 8001cfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d163      	bne.n	8001dc8 <HAL_I2C_Master_Receive+0x1d0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	2220      	movs	r2, #32
 8001d02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001d06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d0e:	e783      	b.n	8001c18 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d10:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8001d14:	f008 0806 	and.w	r8, r8, #6
 8001d18:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001d1c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d1e:	495b      	ldr	r1, [pc, #364]	; (8001e8c <HAL_I2C_Master_Receive+0x294>)
 8001d20:	462b      	mov	r3, r5
 8001d22:	463a      	mov	r2, r7
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fd3e 	bl	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d1c1      	bne.n	8001cb2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d2e:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d30:	4955      	ldr	r1, [pc, #340]	; (8001e88 <HAL_I2C_Master_Receive+0x290>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d32:	b2f6      	uxtb	r6, r6
 8001d34:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d36:	463a      	mov	r2, r7
 8001d38:	462b      	mov	r3, r5
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff fd33 	bl	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d40:	4602      	mov	r2, r0
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d1b5      	bne.n	8001cb2 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	9007      	str	r0, [sp, #28]
 8001d4a:	6959      	ldr	r1, [r3, #20]
 8001d4c:	9107      	str	r1, [sp, #28]
 8001d4e:	6999      	ldr	r1, [r3, #24]
 8001d50:	9107      	str	r1, [sp, #28]
 8001d52:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d54:	6819      	ldr	r1, [r3, #0]
 8001d56:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001d5a:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	9500      	str	r5, [sp, #0]
 8001d60:	463b      	mov	r3, r7
 8001d62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d66:	f7ff fcec 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	d1a1      	bne.n	8001cb2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001d74:	6113      	str	r3, [r2, #16]
 8001d76:	e7a7      	b.n	8001cc8 <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d10a      	bne.n	8001d92 <HAL_I2C_Master_Receive+0x19a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d7c:	680b      	ldr	r3, [r1, #0]
 8001d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d82:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d84:	9004      	str	r0, [sp, #16]
 8001d86:	694b      	ldr	r3, [r1, #20]
 8001d88:	9304      	str	r3, [sp, #16]
 8001d8a:	698b      	ldr	r3, [r1, #24]
 8001d8c:	9304      	str	r3, [sp, #16]
 8001d8e:	9b04      	ldr	r3, [sp, #16]
 8001d90:	e7ad      	b.n	8001cee <HAL_I2C_Master_Receive+0xf6>
    else if (hi2c->XferSize == 2U)
 8001d92:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d94:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 8001d96:	d10d      	bne.n	8001db4 <HAL_I2C_Master_Receive+0x1bc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d9c:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9e:	680b      	ldr	r3, [r1, #0]
 8001da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da4:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da6:	9005      	str	r0, [sp, #20]
 8001da8:	694b      	ldr	r3, [r1, #20]
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	698b      	ldr	r3, [r1, #24]
 8001dae:	9305      	str	r3, [sp, #20]
 8001db0:	9b05      	ldr	r3, [sp, #20]
 8001db2:	e7a0      	b.n	8001cf6 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db8:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dba:	9006      	str	r0, [sp, #24]
 8001dbc:	694b      	ldr	r3, [r1, #20]
 8001dbe:	9306      	str	r3, [sp, #24]
 8001dc0:	698b      	ldr	r3, [r1, #24]
 8001dc2:	9306      	str	r3, [sp, #24]
 8001dc4:	9b06      	ldr	r3, [sp, #24]
 8001dc6:	e796      	b.n	8001cf6 <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d863      	bhi.n	8001e94 <HAL_I2C_Master_Receive+0x29c>
        if (hi2c->XferSize == 1U)
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d116      	bne.n	8001dfe <HAL_I2C_Master_Receive+0x206>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4639      	mov	r1, r7
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fd21 	bl	800181c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	f47f af69 	bne.w	8001cb2 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dea:	3301      	adds	r3, #1
 8001dec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001dee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001df4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001dfc:	e77d      	b.n	8001cfa <HAL_I2C_Master_Receive+0x102>
        else if (hi2c->XferSize == 2U)
 8001dfe:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e00:	9500      	str	r5, [sp, #0]
 8001e02:	463b      	mov	r3, r7
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4641      	mov	r1, r8
 8001e0a:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001e0c:	d11a      	bne.n	8001e44 <HAL_I2C_Master_Receive+0x24c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0e:	f7ff fc98 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	f47f af4d 	bne.w	8001cb2 <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e26:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001e28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e2a:	1c53      	adds	r3, r2, #1
 8001e2c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001e2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	7053      	strb	r3, [r2, #1]
 8001e42:	e7d1      	b.n	8001de8 <HAL_I2C_Master_Receive+0x1f0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e44:	f7ff fc7d 	bl	8001742 <I2C_WaitOnFlagUntilTimeout>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	f47f af31 	bne.w	8001cb2 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e58:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5a:	6919      	ldr	r1, [r3, #16]
 8001e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e5e:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8001e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e62:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001e64:	3301      	adds	r3, #1
 8001e66:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001e68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e76:	4641      	mov	r1, r8
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	e7c7      	b.n	8001e0e <HAL_I2C_Master_Receive+0x216>
 8001e7e:	bf00      	nop
 8001e80:	00100002 	.word	0x00100002
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	00010002 	.word	0x00010002
 8001e8c:	00010008 	.word	0x00010008
 8001e90:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e94:	462a      	mov	r2, r5
 8001e96:	4639      	mov	r1, r7
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fcbf 	bl	800181c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	f47f af07 	bne.w	8001cb2 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eaa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001eac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001eae:	1c53      	adds	r3, r2, #1
 8001eb0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001eb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001eb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	6959      	ldr	r1, [r3, #20]
 8001ec4:	0749      	lsls	r1, r1, #29
 8001ec6:	f57f af18 	bpl.w	8001cfa <HAL_I2C_Master_Receive+0x102>
 8001eca:	e7b8      	b.n	8001e3e <HAL_I2C_Master_Receive+0x246>

08001ecc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ece:	4604      	mov	r4, r0
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	f000 808c 	beq.w	8001fee <HAL_I2S_Init+0x122>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ed6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001eda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ede:	b92b      	cbnz	r3, 8001eec <HAL_I2S_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ee0:	4b45      	ldr	r3, [pc, #276]	; (8001ff8 <HAL_I2S_Init+0x12c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001ee2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ee6:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ee8:	f001 fbac 	bl	8003644 <HAL_I2S_MspInit>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eec:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001eee:	2102      	movs	r1, #2
 8001ef0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ef4:	69d3      	ldr	r3, [r2, #28]
 8001ef6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001efa:	f023 030f 	bic.w	r3, r3, #15
 8001efe:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f00:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001f02:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f04:	428b      	cmp	r3, r1
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f06:	68e2      	ldr	r2, [r4, #12]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f08:	d073      	beq.n	8001ff2 <HAL_I2S_Init+0x126>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f0a:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2510      	moveq	r5, #16
 8001f12:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f14:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f16:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001f18:	bf98      	it	ls
 8001f1a:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f1c:	f000 fd4a 	bl	80029b4 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f20:	6923      	ldr	r3, [r4, #16]
 8001f22:	6962      	ldr	r2, [r4, #20]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f28:	d159      	bne.n	8001fde <HAL_I2S_Init+0x112>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f2a:	68e3      	ldr	r3, [r4, #12]
 8001f2c:	210a      	movs	r1, #10
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d053      	beq.n	8001fda <HAL_I2S_Init+0x10e>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f32:	00ad      	lsls	r5, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f34:	fbb0 f3f5 	udiv	r3, r0, r5
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f38:	434b      	muls	r3, r1
 8001f3a:	fbb3 f3f2 	udiv	r3, r3, r2
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f3e:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f40:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001f42:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f46:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001f4a:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001f4c:	1e99      	subs	r1, r3, #2
 8001f4e:	29fd      	cmp	r1, #253	; 0xfd
 8001f50:	d849      	bhi.n	8001fe6 <HAL_I2S_Init+0x11a>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001f52:	0212      	lsls	r2, r2, #8
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f54:	4313      	orrs	r3, r2
 8001f56:	6922      	ldr	r2, [r4, #16]
 8001f58:	6820      	ldr	r0, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f5a:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8002008 <HAL_I2S_Init+0x13c>
 8001f5e:	68e6      	ldr	r6, [r4, #12]
 8001f60:	69a5      	ldr	r5, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f62:	4313      	orrs	r3, r2
 8001f64:	6203      	str	r3, [r0, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f66:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8001f6a:	69c3      	ldr	r3, [r0, #28]
 8001f6c:	ea42 0701 	orr.w	r7, r2, r1
 8001f70:	ea03 030c 	and.w	r3, r3, ip
 8001f74:	433b      	orrs	r3, r7
 8001f76:	4333      	orrs	r3, r6
 8001f78:	432b      	orrs	r3, r5
 8001f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f7e:	61c3      	str	r3, [r0, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f80:	6a23      	ldr	r3, [r4, #32]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d123      	bne.n	8001fce <HAL_I2S_Init+0x102>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_I2S_Init+0x130>)
 8001f88:	6363      	str	r3, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f8a:	4f1d      	ldr	r7, [pc, #116]	; (8002000 <HAL_I2S_Init+0x134>)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_I2S_Init+0x138>)
 8001f8e:	4298      	cmp	r0, r3
 8001f90:	bf18      	it	ne
 8001f92:	f04f 2740 	movne.w	r7, #1073758208	; 0x40004000

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	ea03 030c 	and.w	r3, r3, ip
 8001fa0:	61fb      	str	r3, [r7, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001fa2:	f04f 0302 	mov.w	r3, #2
 8001fa6:	623b      	str	r3, [r7, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fa8:	bf1c      	itt	ne
 8001faa:	fab2 f382 	clzne	r3, r2
 8001fae:	095b      	lsrne	r3, r3, #5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fb0:	69f8      	ldr	r0, [r7, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fb2:	bf14      	ite	ne
 8001fb4:	021b      	lslne	r3, r3, #8
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001fb6:	f44f 7380 	moveq.w	r3, #256	; 0x100
    {
      tmp = I2S_MODE_SLAVE_TX;
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fba:	4331      	orrs	r1, r6
 8001fbc:	4319      	orrs	r1, r3
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fbe:	b280      	uxth	r0, r0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fc0:	4329      	orrs	r1, r5
 8001fc2:	ea40 0301 	orr.w	r3, r0, r1
 8001fc6:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fcc:	61fb      	str	r3, [r7, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fce:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fd0:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001fd2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001fd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8001fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fda:	00ed      	lsls	r5, r5, #3
 8001fdc:	e7aa      	b.n	8001f34 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fde:	210a      	movs	r1, #10
 8001fe0:	fbb0 f3f5 	udiv	r3, r0, r5
 8001fe4:	e7a8      	b.n	8001f38 <HAL_I2S_Init+0x6c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001fe6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fe8:	f043 0310 	orr.w	r3, r3, #16
 8001fec:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
 8001ff0:	e7f2      	b.n	8001fd8 <HAL_I2S_Init+0x10c>
    i2sodd = 0U;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	e7ae      	b.n	8001f54 <HAL_I2S_Init+0x88>
 8001ff6:	bf00      	nop
 8001ff8:	08002087 	.word	0x08002087
 8001ffc:	08002185 	.word	0x08002185
 8002000:	40003400 	.word	0x40003400
 8002004:	40003800 	.word	0x40003800
 8002008:	fffff040 	.word	0xfffff040

0800200c <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800200c:	b510      	push	{r4, lr}
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800200e:	2900      	cmp	r1, #0
 8002010:	d033      	beq.n	800207a <HAL_I2S_Transmit_IT+0x6e>
 8002012:	2a00      	cmp	r2, #0
 8002014:	d031      	beq.n	800207a <HAL_I2S_Transmit_IT+0x6e>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002016:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00a      	beq.n	8002034 <HAL_I2S_Transmit_IT+0x28>
 800201e:	2301      	movs	r3, #1
 8002020:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002024:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002028:	2b01      	cmp	r3, #1
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_I2S_Transmit_IT+0x2c>
  {
    __HAL_UNLOCK(hi2s);
 8002030:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8002034:	2002      	movs	r0, #2
 8002036:	e01f      	b.n	8002078 <HAL_I2S_Transmit_IT+0x6c>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002038:	2403      	movs	r4, #3
 800203a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800203e:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002040:	6803      	ldr	r3, [r0, #0]
  hi2s->pTxBuffPtr = pData;
 8002042:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002044:	69dc      	ldr	r4, [r3, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002046:	2128      	movs	r1, #40	; 0x28
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002048:	f004 0407 	and.w	r4, r4, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800204c:	40e1      	lsrs	r1, r4
 800204e:	07c9      	lsls	r1, r1, #31
  {
    hi2s->TxXferSize = (Size << 1U);
 8002050:	bf44      	itt	mi
 8002052:	0052      	lslmi	r2, r2, #1
 8002054:	b292      	uxthmi	r2, r2
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002056:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002058:	8542      	strh	r2, [r0, #42]	; 0x2a
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8002060:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002062:	69da      	ldr	r2, [r3, #28]
 8002064:	0552      	lsls	r2, r2, #21
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002066:	bf5e      	ittt	pl
 8002068:	69da      	ldrpl	r2, [r3, #28]
 800206a:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800206e:	61da      	strpl	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 8002070:	2300      	movs	r3, #0
 8002072:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8002076:	4618      	mov	r0, r3
}
 8002078:	bd10      	pop	{r4, pc}
    return  HAL_ERROR;
 800207a:	2001      	movs	r0, #1
 800207c:	e7fc      	b.n	8002078 <HAL_I2S_Transmit_IT+0x6c>

0800207e <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800207e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002080:	4718      	bx	r3

08002082 <HAL_I2S_RxCpltCallback>:
 8002082:	4770      	bx	lr

08002084 <HAL_I2S_ErrorCallback>:
 8002084:	4770      	bx	lr

08002086 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002086:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002088:	6803      	ldr	r3, [r0, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800208e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002092:	2a04      	cmp	r2, #4
{
 8002094:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002096:	d136      	bne.n	8002106 <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002098:	9a01      	ldr	r2, [sp, #4]
 800209a:	07d1      	lsls	r1, r2, #31
 800209c:	d517      	bpl.n	80020ce <I2S_IRQHandler+0x48>
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	0652      	lsls	r2, r2, #25
 80020a2:	d514      	bpl.n	80020ce <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020a4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 80020ac:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020ae:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80020b0:	3a01      	subs	r2, #1
 80020b2:	b292      	uxth	r2, r2
 80020b4:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80020b6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80020b8:	b292      	uxth	r2, r2
 80020ba:	b942      	cbnz	r2, 80020ce <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020c2:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80020ca:	f7ff ffda 	bl	8002082 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	0659      	lsls	r1, r3, #25
 80020d2:	d518      	bpl.n	8002106 <I2S_IRQHandler+0x80>
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	0692      	lsls	r2, r2, #26
 80020da:	d514      	bpl.n	8002106 <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020e4:	2200      	movs	r2, #0
 80020e6:	9202      	str	r2, [sp, #8]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	9202      	str	r2, [sp, #8]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	9302      	str	r3, [sp, #8]
 80020f0:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff ffbf 	bl	8002084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002106:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800210a:	2b03      	cmp	r3, #3
 800210c:	d136      	bne.n	800217c <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800210e:	9b01      	ldr	r3, [sp, #4]
 8002110:	079b      	lsls	r3, r3, #30
 8002112:	d519      	bpl.n	8002148 <I2S_IRQHandler+0xc2>
 8002114:	6822      	ldr	r2, [r4, #0]
 8002116:	6853      	ldr	r3, [r2, #4]
 8002118:	0618      	lsls	r0, r3, #24
 800211a:	d515      	bpl.n	8002148 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800211c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800211e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002122:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8002124:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8002126:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002128:	3b01      	subs	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800212e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	b94b      	cbnz	r3, 8002148 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002134:	6853      	ldr	r3, [r2, #4]
 8002136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800213a:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800213c:	2301      	movs	r3, #1
 800213e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002142:	4620      	mov	r0, r4
 8002144:	f000 ff38 	bl	8002fb8 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002148:	9b01      	ldr	r3, [sp, #4]
 800214a:	0719      	lsls	r1, r3, #28
 800214c:	d516      	bpl.n	800217c <I2S_IRQHandler+0xf6>
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	0692      	lsls	r2, r2, #26
 8002154:	d512      	bpl.n	800217c <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800215c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800215e:	2200      	movs	r2, #0
 8002160:	9203      	str	r2, [sp, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002168:	2301      	movs	r3, #1
 800216a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800216e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff ff84 	bl	8002084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800217c:	b004      	add	sp, #16
 800217e:	bd10      	pop	{r4, pc}

08002180 <HAL_I2SEx_TxRxCpltCallback>:
 8002180:	4770      	bx	lr
	...

08002184 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002184:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002186:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002188:	498e      	ldr	r1, [pc, #568]	; (80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800218a:	6893      	ldr	r3, [r2, #8]
{
 800218c:	b086      	sub	sp, #24
 800218e:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002190:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002194:	428a      	cmp	r2, r1
 8002196:	bf18      	it	ne
 8002198:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80021a0:	6851      	ldr	r1, [r2, #4]
 80021a2:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80021a4:	6859      	ldr	r1, [r3, #4]
 80021a6:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021a8:	6841      	ldr	r1, [r0, #4]
 80021aa:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80021ae:	f040 8093 	bne.w	80022d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021b2:	9b00      	ldr	r3, [sp, #0]
 80021b4:	0799      	lsls	r1, r3, #30
 80021b6:	d51a      	bpl.n	80021ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80021b8:	9b02      	ldr	r3, [sp, #8]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	d517      	bpl.n	80021ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80021be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021c0:	1c99      	adds	r1, r3, #2
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	6241      	str	r1, [r0, #36]	; 0x24
 80021c6:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80021c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b95b      	cbnz	r3, 80021ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021d6:	6853      	ldr	r3, [r2, #4]
 80021d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021dc:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80021de:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b923      	cbnz	r3, 80021ee <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021ea:	f7ff ffc9 	bl	8002180 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	07d8      	lsls	r0, r3, #31
 80021f2:	d522      	bpl.n	800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80021f4:	9b03      	ldr	r3, [sp, #12]
 80021f6:	0659      	lsls	r1, r3, #25
 80021f8:	d51f      	bpl.n	800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021fa:	6821      	ldr	r1, [r4, #0]
 80021fc:	4a71      	ldr	r2, [pc, #452]	; (80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002200:	4291      	cmp	r1, r2
 8002202:	bf18      	it	ne
 8002204:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002208:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	1c90      	adds	r0, r2, #2
 800220e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002210:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8002212:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002214:	3a01      	subs	r2, #1
 8002216:	b292      	uxth	r2, r2
 8002218:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800221a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800221c:	b292      	uxth	r2, r2
 800221e:	b962      	cbnz	r2, 800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002226:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002228:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	b92b      	cbnz	r3, 800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800222e:	2301      	movs	r3, #1
 8002230:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ffa3 	bl	8002180 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800223a:	9b01      	ldr	r3, [sp, #4]
 800223c:	065a      	lsls	r2, r3, #25
 800223e:	d522      	bpl.n	8002286 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8002240:	9b03      	ldr	r3, [sp, #12]
 8002242:	069b      	lsls	r3, r3, #26
 8002244:	d51f      	bpl.n	8002286 <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	495e      	ldr	r1, [pc, #376]	; (80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800224c:	428b      	cmp	r3, r1
 800224e:	bf18      	it	ne
 8002250:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002254:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002256:	6851      	ldr	r1, [r2, #4]
 8002258:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800225c:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002264:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002266:	2200      	movs	r2, #0
 8002268:	9204      	str	r2, [sp, #16]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	9204      	str	r2, [sp, #16]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	9304      	str	r3, [sp, #16]
 8002272:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002274:	2301      	movs	r3, #1
 8002276:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800227a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002282:	f7ff feff 	bl	8002084 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002286:	9b00      	ldr	r3, [sp, #0]
 8002288:	0718      	lsls	r0, r3, #28
 800228a:	f140 8098 	bpl.w	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800228e:	9b02      	ldr	r3, [sp, #8]
 8002290:	0699      	lsls	r1, r3, #26
 8002292:	f140 8094 	bpl.w	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002296:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002298:	494a      	ldr	r1, [pc, #296]	; (80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a0:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022a2:	4a49      	ldr	r2, [pc, #292]	; (80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80022a4:	428b      	cmp	r3, r1
 80022a6:	bf18      	it	ne
 80022a8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80022ac:	6851      	ldr	r1, [r2, #4]
 80022ae:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80022b2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022b4:	2200      	movs	r2, #0
 80022b6:	9205      	str	r2, [sp, #20]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80022be:	2301      	movs	r3, #1
 80022c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80022c6:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6463      	str	r3, [r4, #68]	; 0x44
}
 80022ce:	b006      	add	sp, #24
 80022d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 80022d4:	f7ff bed6 	b.w	8002084 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80022d8:	9a01      	ldr	r2, [sp, #4]
 80022da:	0792      	lsls	r2, r2, #30
 80022dc:	d51a      	bpl.n	8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 80022de:	9a03      	ldr	r2, [sp, #12]
 80022e0:	0611      	lsls	r1, r2, #24
 80022e2:	d517      	bpl.n	8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80022e6:	1c91      	adds	r1, r2, #2
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	6241      	str	r1, [r0, #36]	; 0x24
 80022ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022f0:	3a01      	subs	r2, #1
 80022f2:	b292      	uxth	r2, r2
 80022f4:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80022f6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80022f8:	b292      	uxth	r2, r2
 80022fa:	b95a      	cbnz	r2, 8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002302:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002304:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002306:	b29b      	uxth	r3, r3
 8002308:	b923      	cbnz	r3, 8002314 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 800230a:	2301      	movs	r3, #1
 800230c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002310:	f7ff ff36 	bl	8002180 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002314:	9b00      	ldr	r3, [sp, #0]
 8002316:	07da      	lsls	r2, r3, #31
 8002318:	d51c      	bpl.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 800231a:	9b02      	ldr	r3, [sp, #8]
 800231c:	065b      	lsls	r3, r3, #25
 800231e:	d519      	bpl.n	8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	1c98      	adds	r0, r3, #2
 8002326:	68d1      	ldr	r1, [r2, #12]
 8002328:	62e0      	str	r0, [r4, #44]	; 0x2c
 800232a:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 800232c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800232e:	3b01      	subs	r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002334:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002336:	b29b      	uxth	r3, r3
 8002338:	b963      	cbnz	r3, 8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800233a:	6853      	ldr	r3, [r2, #4]
 800233c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002340:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002342:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	b92b      	cbnz	r3, 8002354 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 8002348:	2301      	movs	r3, #1
 800234a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800234e:	4620      	mov	r0, r4
 8002350:	f7ff ff16 	bl	8002180 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002354:	9b00      	ldr	r3, [sp, #0]
 8002356:	0658      	lsls	r0, r3, #25
 8002358:	d51b      	bpl.n	8002392 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 800235a:	9b02      	ldr	r3, [sp, #8]
 800235c:	0699      	lsls	r1, r3, #26
 800235e:	d518      	bpl.n	8002392 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002360:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002362:	4918      	ldr	r1, [pc, #96]	; (80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002364:	6853      	ldr	r3, [r2, #4]
 8002366:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800236a:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800236e:	428a      	cmp	r2, r1
 8002370:	bf18      	it	ne
 8002372:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002376:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800237e:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002380:	2301      	movs	r3, #1
 8002382:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002386:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002388:	f043 0302 	orr.w	r3, r3, #2
 800238c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800238e:	f7ff fe79 	bl	8002084 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002392:	9b01      	ldr	r3, [sp, #4]
 8002394:	071a      	lsls	r2, r3, #28
 8002396:	d512      	bpl.n	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8002398:	9b03      	ldr	r3, [sp, #12]
 800239a:	069b      	lsls	r3, r3, #26
 800239c:	d50f      	bpl.n	80023be <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	4908      	ldr	r1, [pc, #32]	; (80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80023a4:	428a      	cmp	r2, r1
 80023a6:	bf18      	it	ne
 80023a8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80023b2:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023b4:	6853      	ldr	r3, [r2, #4]
 80023b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80023ba:	6053      	str	r3, [r2, #4]
 80023bc:	e77f      	b.n	80022be <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 80023be:	b006      	add	sp, #24
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	bf00      	nop
 80023c4:	40003800 	.word	0x40003800
 80023c8:	40003400 	.word	0x40003400

080023cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d0:	4604      	mov	r4, r0
 80023d2:	b918      	cbnz	r0, 80023dc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80023d6:	b002      	add	sp, #8
 80023d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	07dd      	lsls	r5, r3, #31
 80023e0:	d410      	bmi.n	8002404 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	0798      	lsls	r0, r3, #30
 80023e6:	d458      	bmi.n	800249a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	071a      	lsls	r2, r3, #28
 80023ec:	f100 809a 	bmi.w	8002524 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	075b      	lsls	r3, r3, #29
 80023f4:	f100 80ba 	bmi.w	800256c <HAL_RCC_OscConfig+0x1a0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f8:	69a2      	ldr	r2, [r4, #24]
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	f040 8122 	bne.w	8002644 <HAL_RCC_OscConfig+0x278>
  return HAL_OK;
 8002400:	2000      	movs	r0, #0
 8002402:	e7e8      	b.n	80023d6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002404:	4b8c      	ldr	r3, [pc, #560]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f002 020c 	and.w	r2, r2, #12
 800240c:	2a04      	cmp	r2, #4
 800240e:	d007      	beq.n	8002420 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	2a08      	cmp	r2, #8
 8002418:	d10a      	bne.n	8002430 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0259      	lsls	r1, r3, #9
 800241e:	d507      	bpl.n	8002430 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	4b85      	ldr	r3, [pc, #532]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	039a      	lsls	r2, r3, #14
 8002426:	d5dc      	bpl.n	80023e2 <HAL_RCC_OscConfig+0x16>
 8002428:	6863      	ldr	r3, [r4, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1d9      	bne.n	80023e2 <HAL_RCC_OscConfig+0x16>
 800242e:	e7d1      	b.n	80023d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	4d81      	ldr	r5, [pc, #516]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d111      	bne.n	800245e <HAL_RCC_OscConfig+0x92>
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002442:	f7fe fdc1 	bl	8000fc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4e7c      	ldr	r6, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8002448:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	6833      	ldr	r3, [r6, #0]
 800244c:	039b      	lsls	r3, r3, #14
 800244e:	d4c8      	bmi.n	80023e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fdba 	bl	8000fc8 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2864      	cmp	r0, #100	; 0x64
 8002458:	d9f7      	bls.n	800244a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e7bb      	b.n	80023d6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002462:	d104      	bne.n	800246e <HAL_RCC_OscConfig+0xa2>
 8002464:	682b      	ldr	r3, [r5, #0]
 8002466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246a:	602b      	str	r3, [r5, #0]
 800246c:	e7e5      	b.n	800243a <HAL_RCC_OscConfig+0x6e>
 800246e:	682a      	ldr	r2, [r5, #0]
 8002470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002474:	602a      	str	r2, [r5, #0]
 8002476:	682a      	ldr	r2, [r5, #0]
 8002478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800247c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1df      	bne.n	8002442 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002482:	f7fe fda1 	bl	8000fc8 <HAL_GetTick>
 8002486:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	039f      	lsls	r7, r3, #14
 800248c:	d5a9      	bpl.n	80023e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248e:	f7fe fd9b 	bl	8000fc8 <HAL_GetTick>
 8002492:	1b80      	subs	r0, r0, r6
 8002494:	2864      	cmp	r0, #100	; 0x64
 8002496:	d9f7      	bls.n	8002488 <HAL_RCC_OscConfig+0xbc>
 8002498:	e7df      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	f012 0f0c 	tst.w	r2, #12
 80024a2:	d007      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024aa:	2a08      	cmp	r2, #8
 80024ac:	d111      	bne.n	80024d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	025e      	lsls	r6, r3, #9
 80024b2:	d40e      	bmi.n	80024d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b4:	4a60      	ldr	r2, [pc, #384]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	079d      	lsls	r5, r3, #30
 80024ba:	d502      	bpl.n	80024c2 <HAL_RCC_OscConfig+0xf6>
 80024bc:	68e3      	ldr	r3, [r4, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d188      	bne.n	80023d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	6813      	ldr	r3, [r2, #0]
 80024c4:	6921      	ldr	r1, [r4, #16]
 80024c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024ce:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d0:	e78a      	b.n	80023e8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d2:	68e2      	ldr	r2, [r4, #12]
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_OscConfig+0x270>)
 80024d6:	b1b2      	cbz	r2, 8002506 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024dc:	f7fe fd74 	bl	8000fc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	4d55      	ldr	r5, [pc, #340]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80024e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	682b      	ldr	r3, [r5, #0]
 80024e6:	0798      	lsls	r0, r3, #30
 80024e8:	d507      	bpl.n	80024fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ea:	682b      	ldr	r3, [r5, #0]
 80024ec:	6922      	ldr	r2, [r4, #16]
 80024ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80024f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	e776      	b.n	80023e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fa:	f7fe fd65 	bl	8000fc8 <HAL_GetTick>
 80024fe:	1b80      	subs	r0, r0, r6
 8002500:	2802      	cmp	r0, #2
 8002502:	d9ef      	bls.n	80024e4 <HAL_RCC_OscConfig+0x118>
 8002504:	e7a9      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002506:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002508:	f7fe fd5e 	bl	8000fc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	4e4a      	ldr	r6, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 800250e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002510:	6833      	ldr	r3, [r6, #0]
 8002512:	0799      	lsls	r1, r3, #30
 8002514:	f57f af68 	bpl.w	80023e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fd56 	bl	8000fc8 <HAL_GetTick>
 800251c:	1b40      	subs	r0, r0, r5
 800251e:	2802      	cmp	r0, #2
 8002520:	d9f6      	bls.n	8002510 <HAL_RCC_OscConfig+0x144>
 8002522:	e79a      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002524:	6962      	ldr	r2, [r4, #20]
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <HAL_RCC_OscConfig+0x270>)
 8002528:	b182      	cbz	r2, 800254c <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_LSI_ENABLE();
 800252a:	2201      	movs	r2, #1
 800252c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002530:	f7fe fd4a 	bl	8000fc8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002534:	4e40      	ldr	r6, [pc, #256]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8002536:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800253a:	079f      	lsls	r7, r3, #30
 800253c:	f53f af58 	bmi.w	80023f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7fe fd42 	bl	8000fc8 <HAL_GetTick>
 8002544:	1b40      	subs	r0, r0, r5
 8002546:	2802      	cmp	r0, #2
 8002548:	d9f6      	bls.n	8002538 <HAL_RCC_OscConfig+0x16c>
 800254a:	e786      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800254c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002550:	f7fe fd3a 	bl	8000fc8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4e38      	ldr	r6, [pc, #224]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8002556:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800255a:	0798      	lsls	r0, r3, #30
 800255c:	f57f af48 	bpl.w	80023f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fd32 	bl	8000fc8 <HAL_GetTick>
 8002564:	1b40      	subs	r0, r0, r5
 8002566:	2802      	cmp	r0, #2
 8002568:	d9f6      	bls.n	8002558 <HAL_RCC_OscConfig+0x18c>
 800256a:	e776      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256c:	4b32      	ldr	r3, [pc, #200]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 800256e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002570:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002574:	d128      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	9201      	str	r2, [sp, #4]
 8002578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800258a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	4d2c      	ldr	r5, [pc, #176]	; (8002640 <HAL_RCC_OscConfig+0x274>)
 800258e:	682b      	ldr	r3, [r5, #0]
 8002590:	05d9      	lsls	r1, r3, #23
 8002592:	d51b      	bpl.n	80025cc <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	68a3      	ldr	r3, [r4, #8]
 8002596:	4d28      	ldr	r5, [pc, #160]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 8002598:	2b01      	cmp	r3, #1
 800259a:	d127      	bne.n	80025ec <HAL_RCC_OscConfig+0x220>
 800259c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80025a4:	f7fe fd10 	bl	8000fc8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	4e23      	ldr	r6, [pc, #140]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80025aa:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80025b2:	079b      	lsls	r3, r3, #30
 80025b4:	d539      	bpl.n	800262a <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 80025b6:	2f00      	cmp	r7, #0
 80025b8:	f43f af1e 	beq.w	80023f8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4a1e      	ldr	r2, [pc, #120]	; (8002638 <HAL_RCC_OscConfig+0x26c>)
 80025be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	e717      	b.n	80023f8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80025c8:	2700      	movs	r7, #0
 80025ca:	e7df      	b.n	800258c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80025d4:	f7fe fcf8 	bl	8000fc8 <HAL_GetTick>
 80025d8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	682b      	ldr	r3, [r5, #0]
 80025dc:	05da      	lsls	r2, r3, #23
 80025de:	d4d9      	bmi.n	8002594 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe fcf2 	bl	8000fc8 <HAL_GetTick>
 80025e4:	1b80      	subs	r0, r0, r6
 80025e6:	2802      	cmp	r0, #2
 80025e8:	d9f7      	bls.n	80025da <HAL_RCC_OscConfig+0x20e>
 80025ea:	e736      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d104      	bne.n	80025fa <HAL_RCC_OscConfig+0x22e>
 80025f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	672b      	str	r3, [r5, #112]	; 0x70
 80025f8:	e7d0      	b.n	800259c <HAL_RCC_OscConfig+0x1d0>
 80025fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	672a      	str	r2, [r5, #112]	; 0x70
 8002602:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002604:	f022 0204 	bic.w	r2, r2, #4
 8002608:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ca      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 800260e:	f7fe fcdb 	bl	8000fc8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002616:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800261a:	0798      	lsls	r0, r3, #30
 800261c:	d5cb      	bpl.n	80025b6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fcd3 	bl	8000fc8 <HAL_GetTick>
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	4540      	cmp	r0, r8
 8002626:	d9f7      	bls.n	8002618 <HAL_RCC_OscConfig+0x24c>
 8002628:	e717      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fccd 	bl	8000fc8 <HAL_GetTick>
 800262e:	1b40      	subs	r0, r0, r5
 8002630:	4540      	cmp	r0, r8
 8002632:	d9bd      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1e4>
 8002634:	e711      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002644:	4d22      	ldr	r5, [pc, #136]	; (80026d0 <HAL_RCC_OscConfig+0x304>)
 8002646:	68ab      	ldr	r3, [r5, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	f43f aec1 	beq.w	80023d4 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_RCC_OscConfig+0x308>)
 8002654:	2a02      	cmp	r2, #2
 8002656:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800265a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265c:	d12b      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 800265e:	f7fe fcb3 	bl	8000fc8 <HAL_GetTick>
 8002662:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	0199      	lsls	r1, r3, #6
 8002668:	d41f      	bmi.n	80026aa <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800266a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800266e:	4313      	orrs	r3, r2
 8002670:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002672:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002676:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002678:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800267c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800267e:	0852      	lsrs	r2, r2, #1
 8002680:	3a01      	subs	r2, #1
 8002682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002686:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002688:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4d11      	ldr	r5, [pc, #68]	; (80026d0 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_ENABLE();
 800268c:	2201      	movs	r2, #1
 800268e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002690:	f7fe fc9a 	bl	8000fc8 <HAL_GetTick>
 8002694:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	019a      	lsls	r2, r3, #6
 800269a:	f53f aeb1 	bmi.w	8002400 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fc93 	bl	8000fc8 <HAL_GetTick>
 80026a2:	1b00      	subs	r0, r0, r4
 80026a4:	2802      	cmp	r0, #2
 80026a6:	d9f6      	bls.n	8002696 <HAL_RCC_OscConfig+0x2ca>
 80026a8:	e6d7      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fc8d 	bl	8000fc8 <HAL_GetTick>
 80026ae:	1b80      	subs	r0, r0, r6
 80026b0:	2802      	cmp	r0, #2
 80026b2:	d9d7      	bls.n	8002664 <HAL_RCC_OscConfig+0x298>
 80026b4:	e6d1      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc87 	bl	8000fc8 <HAL_GetTick>
 80026ba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026bc:	682b      	ldr	r3, [r5, #0]
 80026be:	019b      	lsls	r3, r3, #6
 80026c0:	f57f ae9e 	bpl.w	8002400 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c4:	f7fe fc80 	bl	8000fc8 <HAL_GetTick>
 80026c8:	1b00      	subs	r0, r0, r4
 80026ca:	2802      	cmp	r0, #2
 80026cc:	d9f6      	bls.n	80026bc <HAL_RCC_OscConfig+0x2f0>
 80026ce:	e6c4      	b.n	800245a <HAL_RCC_OscConfig+0x8e>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	42470000 	.word	0x42470000

080026d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d8:	4913      	ldr	r1, [pc, #76]	; (8002728 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80026da:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026dc:	688b      	ldr	r3, [r1, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d01c      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x48>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d11c      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ec:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f4:	bf14      	ite	ne
 80026f6:	480d      	ldrne	r0, [pc, #52]	; (800272c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f8:	480d      	ldreq	r0, [pc, #52]	; (8002730 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80026fe:	bf18      	it	ne
 8002700:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002702:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	fba1 0100 	umull	r0, r1, r1, r0
 800270a:	f7fe fa95 	bl	8000c38 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_GetSysClockFreq+0x50>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800271a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800271e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <HAL_RCC_GetSysClockFreq+0x54>)
 8002722:	e7fc      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002726:	e7fa      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x46>
 8002728:	40023800 	.word	0x40023800
 800272c:	007a1200 	.word	0x007a1200
 8002730:	00f42400 	.word	0x00f42400

08002734 <HAL_RCC_ClockConfig>:
{
 8002734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002738:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800273a:	4604      	mov	r4, r0
 800273c:	b910      	cbnz	r0, 8002744 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
}
 8002740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCC_ClockConfig+0x120>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	f002 020f 	and.w	r2, r2, #15
 800274c:	428a      	cmp	r2, r1
 800274e:	d327      	bcc.n	80027a0 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	6821      	ldr	r1, [r4, #0]
 8002752:	078f      	lsls	r7, r1, #30
 8002754:	d42c      	bmi.n	80027b0 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002756:	07c8      	lsls	r0, r1, #31
 8002758:	d43f      	bmi.n	80027da <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_ClockConfig+0x120>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f002 020f 	and.w	r2, r2, #15
 8002762:	42aa      	cmp	r2, r5
 8002764:	d864      	bhi.n	8002830 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	0751      	lsls	r1, r2, #29
 800276a:	d46a      	bmi.n	8002842 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	0713      	lsls	r3, r2, #28
 800276e:	d507      	bpl.n	8002780 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002770:	4a39      	ldr	r2, [pc, #228]	; (8002858 <HAL_RCC_ClockConfig+0x124>)
 8002772:	6921      	ldr	r1, [r4, #16]
 8002774:	6893      	ldr	r3, [r2, #8]
 8002776:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800277a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800277e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002780:	f7ff ffaa 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002784:	4b34      	ldr	r3, [pc, #208]	; (8002858 <HAL_RCC_ClockConfig+0x124>)
 8002786:	4a35      	ldr	r2, [pc, #212]	; (800285c <HAL_RCC_ClockConfig+0x128>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	40d8      	lsrs	r0, r3
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_RCC_ClockConfig+0x12c>)
 8002794:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe fbcc 	bl	8000f34 <HAL_InitTick>
  return HAL_OK;
 800279c:	2000      	movs	r0, #0
 800279e:	e7cf      	b.n	8002740 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a0:	b2ca      	uxtb	r2, r1
 80027a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	428b      	cmp	r3, r1
 80027ac:	d1c7      	bne.n	800273e <HAL_RCC_ClockConfig+0xa>
 80027ae:	e7cf      	b.n	8002750 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	4b29      	ldr	r3, [pc, #164]	; (8002858 <HAL_RCC_ClockConfig+0x124>)
 80027b2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027b6:	bf1e      	ittt	ne
 80027b8:	689a      	ldrne	r2, [r3, #8]
 80027ba:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80027be:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c2:	bf42      	ittt	mi
 80027c4:	689a      	ldrmi	r2, [r3, #8]
 80027c6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80027ca:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68a0      	ldr	r0, [r4, #8]
 80027d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027d4:	4302      	orrs	r2, r0
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e7bd      	b.n	8002756 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	6862      	ldr	r2, [r4, #4]
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCC_ClockConfig+0x124>)
 80027de:	2a01      	cmp	r2, #1
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	d0a9      	beq.n	800273e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4e1b      	ldr	r6, [pc, #108]	; (8002858 <HAL_RCC_ClockConfig+0x124>)
 80027ec:	68b3      	ldr	r3, [r6, #8]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80027f6:	f7fe fbe7 	bl	8000fc8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002800:	68b3      	ldr	r3, [r6, #8]
 8002802:	6862      	ldr	r2, [r4, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800280c:	d0a5      	beq.n	800275a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280e:	f7fe fbdb 	bl	8000fc8 <HAL_GetTick>
 8002812:	1bc0      	subs	r0, r0, r7
 8002814:	4540      	cmp	r0, r8
 8002816:	d9f3      	bls.n	8002800 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8002818:	2003      	movs	r0, #3
 800281a:	e791      	b.n	8002740 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281c:	1e91      	subs	r1, r2, #2
 800281e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002822:	d802      	bhi.n	800282a <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002828:	e7de      	b.n	80027e8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282a:	f013 0f02 	tst.w	r3, #2
 800282e:	e7db      	b.n	80027e8 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002830:	b2ea      	uxtb	r2, r5
 8002832:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	42ab      	cmp	r3, r5
 800283c:	f47f af7f 	bne.w	800273e <HAL_RCC_ClockConfig+0xa>
 8002840:	e791      	b.n	8002766 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002842:	4905      	ldr	r1, [pc, #20]	; (8002858 <HAL_RCC_ClockConfig+0x124>)
 8002844:	68e0      	ldr	r0, [r4, #12]
 8002846:	688b      	ldr	r3, [r1, #8]
 8002848:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800284c:	4303      	orrs	r3, r0
 800284e:	608b      	str	r3, [r1, #8]
 8002850:	e78c      	b.n	800276c <HAL_RCC_ClockConfig+0x38>
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00
 8002858:	40023800 	.word	0x40023800
 800285c:	080059fc 	.word	0x080059fc
 8002860:	2000000c 	.word	0x2000000c

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002872:	6810      	ldr	r0, [r2, #0]
}
 8002874:	40d8      	lsrs	r0, r3
 8002876:	4770      	bx	lr
 8002878:	40023800 	.word	0x40023800
 800287c:	08005a0c 	.word	0x08005a0c
 8002880:	2000000c 	.word	0x2000000c

08002884 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002884:	6803      	ldr	r3, [r0, #0]
 8002886:	f013 0f05 	tst.w	r3, #5
{
 800288a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800288c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800288e:	d105      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f013 0302 	ands.w	r3, r3, #2
 8002896:	d12a      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002898:	2000      	movs	r0, #0
 800289a:	e026      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 800289c:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800289e:	4e43      	ldr	r6, [pc, #268]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 80028a0:	2200      	movs	r2, #0
 80028a2:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80028a4:	f7fe fb90 	bl	8000fc8 <HAL_GetTick>
 80028a8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028aa:	6833      	ldr	r3, [r6, #0]
 80028ac:	011f      	lsls	r7, r3, #4
 80028ae:	d416      	bmi.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80028b0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80028ba:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80028be:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c0:	4e3a      	ldr	r6, [pc, #232]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 80028c2:	2201      	movs	r2, #1
 80028c4:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80028c6:	f7fe fb7f 	bl	8000fc8 <HAL_GetTick>
 80028ca:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028cc:	6833      	ldr	r3, [r6, #0]
 80028ce:	0118      	lsls	r0, r3, #4
 80028d0:	d4de      	bmi.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028d2:	f7fe fb79 	bl	8000fc8 <HAL_GetTick>
 80028d6:	1b40      	subs	r0, r0, r5
 80028d8:	2802      	cmp	r0, #2
 80028da:	d9f7      	bls.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x48>
 80028dc:	e004      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028de:	f7fe fb73 	bl	8000fc8 <HAL_GetTick>
 80028e2:	1b40      	subs	r0, r0, r5
 80028e4:	2802      	cmp	r0, #2
 80028e6:	d9e0      	bls.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80028e8:	2003      	movs	r0, #3
}
 80028ea:	b003      	add	sp, #12
 80028ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 80028f4:	4d2e      	ldr	r5, [pc, #184]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002908:	682b      	ldr	r3, [r5, #0]
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002910:	f7fe fb5a 	bl	8000fc8 <HAL_GetTick>
 8002914:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	05d9      	lsls	r1, r3, #23
 800291a:	d51b      	bpl.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800291c:	4d23      	ldr	r5, [pc, #140]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800291e:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002920:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002922:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002926:	d11b      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002928:	68e3      	ldr	r3, [r4, #12]
 800292a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800292e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002934:	d134      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002936:	6891      	ldr	r1, [r2, #8]
 8002938:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800293c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002940:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002944:	4301      	orrs	r1, r0
 8002946:	6091      	str	r1, [r2, #8]
 8002948:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	430b      	orrs	r3, r1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e7a1      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fb38 	bl	8000fc8 <HAL_GetTick>
 8002958:	1b80      	subs	r0, r0, r6
 800295a:	2802      	cmp	r0, #2
 800295c:	d9db      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x92>
 800295e:	e7c3      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002960:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002964:	4293      	cmp	r3, r2
 8002966:	d0df      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002968:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800296a:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800296c:	2101      	movs	r1, #1
 800296e:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002976:	2100      	movs	r1, #0
 8002978:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 800297c:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800297e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002980:	07da      	lsls	r2, r3, #31
 8002982:	d5d1      	bpl.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 8002984:	f7fe fb20 	bl	8000fc8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800298c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002990:	079b      	lsls	r3, r3, #30
 8002992:	d4c9      	bmi.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe fb18 	bl	8000fc8 <HAL_GetTick>
 8002998:	1b80      	subs	r0, r0, r6
 800299a:	42b8      	cmp	r0, r7
 800299c:	d9f7      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800299e:	e7a3      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a0:	6891      	ldr	r1, [r2, #8]
 80029a2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80029a6:	e7ce      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80029a8:	42470000 	.word	0x42470000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000

080029b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80029b4:	2801      	cmp	r0, #1
 80029b6:	d11b      	bne.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80029ba:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80029bc:	0212      	lsls	r2, r2, #8
 80029be:	d417      	bmi.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	bf14      	ite	ne
 80029ca:	4b0b      	ldrne	r3, [pc, #44]	; (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029cc:	4b0b      	ldreq	r3, [pc, #44]	; (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80029d2:	fbb3 f3f2 	udiv	r3, r3, r2
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80029d8:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80029dc:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80029e0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80029e4:	4358      	muls	r0, r3
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80029e6:	f3c2 7302 	ubfx	r3, r2, #28, #3
 80029ea:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80029ee:	4770      	bx	lr
 80029f0:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80029f2:	4770      	bx	lr
 80029f4:	40023800 	.word	0x40023800
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	00f42400 	.word	0x00f42400

08002a00 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a06:	6803      	ldr	r3, [r0, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0e:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002a10:	bf1e      	ittt	ne
 8002a12:	681a      	ldrne	r2, [r3, #0]
 8002a14:	f042 0201 	orrne.w	r2, r2, #1
 8002a18:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002a20:	2000      	movs	r0, #0
 8002a22:	4770      	bx	lr

08002a24 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a24:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002a26:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a28:	4290      	cmp	r0, r2
 8002a2a:	d012      	beq.n	8002a52 <TIM_Base_SetConfig+0x2e>
 8002a2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a30:	d00f      	beq.n	8002a52 <TIM_Base_SetConfig+0x2e>
 8002a32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a36:	4290      	cmp	r0, r2
 8002a38:	d00b      	beq.n	8002a52 <TIM_Base_SetConfig+0x2e>
 8002a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a3e:	4290      	cmp	r0, r2
 8002a40:	d007      	beq.n	8002a52 <TIM_Base_SetConfig+0x2e>
 8002a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a46:	4290      	cmp	r0, r2
 8002a48:	d003      	beq.n	8002a52 <TIM_Base_SetConfig+0x2e>
 8002a4a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a4e:	4290      	cmp	r0, r2
 8002a50:	d119      	bne.n	8002a86 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002a52:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a58:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5a:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <TIM_Base_SetConfig+0xc4>)
 8002a5c:	4290      	cmp	r0, r2
 8002a5e:	d029      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a64:	d026      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a66:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a6a:	4290      	cmp	r0, r2
 8002a6c:	d022      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a72:	4290      	cmp	r0, r2
 8002a74:	d01e      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a7a:	4290      	cmp	r0, r2
 8002a7c:	d01a      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a7e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a82:	4290      	cmp	r0, r2
 8002a84:	d016      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a86:	4a19      	ldr	r2, [pc, #100]	; (8002aec <TIM_Base_SetConfig+0xc8>)
 8002a88:	4290      	cmp	r0, r2
 8002a8a:	d013      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a90:	4290      	cmp	r0, r2
 8002a92:	d00f      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a98:	4290      	cmp	r0, r2
 8002a9a:	d00b      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002a9c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002aa0:	4290      	cmp	r0, r2
 8002aa2:	d007      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002aa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aa8:	4290      	cmp	r0, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0x90>
 8002aac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ab0:	4290      	cmp	r0, r2
 8002ab2:	d103      	bne.n	8002abc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aba:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002abc:	694a      	ldr	r2, [r1, #20]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ac4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac6:	688b      	ldr	r3, [r1, #8]
 8002ac8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aca:	680b      	ldr	r3, [r1, #0]
 8002acc:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <TIM_Base_SetConfig+0xc4>)
 8002ad0:	4298      	cmp	r0, r3
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0xb8>
 8002ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad8:	4298      	cmp	r0, r3
 8002ada:	d101      	bne.n	8002ae0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002adc:	690b      	ldr	r3, [r1, #16]
 8002ade:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6143      	str	r3, [r0, #20]
}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40014000 	.word	0x40014000

08002af0 <HAL_TIM_Base_Init>:
{
 8002af0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002af2:	4604      	mov	r4, r0
 8002af4:	b1a0      	cbz	r0, 8002b20 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002afa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002afe:	b91b      	cbnz	r3, 8002b08 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b04:	f000 fdf2 	bl	80036ec <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	1d21      	adds	r1, r4, #4
 8002b12:	f7ff ff87 	bl	8002a24 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002b1c:	2000      	movs	r0, #0
}
 8002b1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b20:	2001      	movs	r0, #1
 8002b22:	e7fc      	b.n	8002b1e <HAL_TIM_Base_Init+0x2e>

08002b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b24:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b26:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b28:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002b32:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b34:	6083      	str	r3, [r0, #8]
}
 8002b36:	bd10      	pop	{r4, pc}

08002b38 <HAL_TIM_ConfigClockSource>:
{
 8002b38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002b3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b3e:	2b01      	cmp	r3, #1
{
 8002b40:	4604      	mov	r4, r0
 8002b42:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002b46:	d027      	beq.n	8002b98 <HAL_TIM_ConfigClockSource+0x60>
 8002b48:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002b4e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b52:	6800      	ldr	r0, [r0, #0]
 8002b54:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002b5e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002b60:	680b      	ldr	r3, [r1, #0]
 8002b62:	2b60      	cmp	r3, #96	; 0x60
 8002b64:	d04b      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0xc6>
 8002b66:	d832      	bhi.n	8002bce <HAL_TIM_ConfigClockSource+0x96>
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d060      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xf6>
 8002b6c:	d816      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x64>
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x42>
 8002b72:	d809      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x50>
 8002b74:	f033 0210 	bics.w	r2, r3, #16
 8002b78:	d108      	bne.n	8002b8c <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8002b7a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f043 0307 	orr.w	r3, r3, #7
 8002b86:	e038      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d0f6      	beq.n	8002b7a <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b92:	2300      	movs	r3, #0
 8002b94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002b98:	4618      	mov	r0, r3
}
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d1f5      	bne.n	8002b8c <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba0:	684a      	ldr	r2, [r1, #4]
 8002ba2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ba4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba6:	6a03      	ldr	r3, [r0, #32]
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bae:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002bbc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002bbe:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002bc0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002bc2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002bcc:	e015      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8002bce:	2b70      	cmp	r3, #112	; 0x70
 8002bd0:	d00b      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0xb2>
 8002bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd6:	d1d9      	bne.n	8002b8c <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	68cb      	ldr	r3, [r1, #12]
 8002bda:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002bde:	f7ff ffa1 	bl	8002b24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be2:	6883      	ldr	r3, [r0, #8]
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8002bea:	68cb      	ldr	r3, [r1, #12]
 8002bec:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002bf0:	f7ff ff98 	bl	8002b24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bf4:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8002bfa:	6083      	str	r3, [r0, #8]
}
 8002bfc:	e7c6      	b.n	8002b8c <HAL_TIM_ConfigClockSource+0x54>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bfe:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c00:	684d      	ldr	r5, [r1, #4]
 8002c02:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c04:	f023 0310 	bic.w	r3, r3, #16
 8002c08:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c0c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c0e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c1a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c1e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c20:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c22:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c28:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002c2c:	e7e5      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	684a      	ldr	r2, [r1, #4]
 8002c30:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c32:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c34:	6a03      	ldr	r3, [r0, #32]
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002c4a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002c4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c4e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c56:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002c5a:	e7ce      	b.n	8002bfa <HAL_TIM_ConfigClockSource+0xc2>

08002c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c5c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	f04f 0302 	mov.w	r3, #2
 8002c68:	d014      	beq.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002c70:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c72:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c74:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c76:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c80:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c82:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c84:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c86:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002c94:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002c96:	bd30      	pop	{r4, r5, pc}

08002c98 <CS43L22_write>:
	// Write 0x00 to register 0x00.
	CS43L22_write( 0x00, 0x00, 2);
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
}

void CS43L22_write(uint8_t reg, uint8_t Cmd, uint8_t len){
 8002c98:	b507      	push	{r0, r1, r2, lr}

	uint8_t iData[2]; // Buffer to read, change and write back register values of the DAC
	iData[0] =  reg;
 8002c9a:	f88d 0004 	strb.w	r0, [sp, #4]
	iData[1] = Cmd;
 8002c9e:	f88d 1005 	strb.w	r1, [sp, #5]

	CS43L22_EXTERNAL_DAC_I2C_write(iData,len);
 8002ca2:	a801      	add	r0, sp, #4
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	f000 f9c7 	bl	8003038 <CS43L22_EXTERNAL_DAC_I2C_write>


}
 8002caa:	b003      	add	sp, #12
 8002cac:	f85d fb04 	ldr.w	pc, [sp], #4

08002cb0 <CS43L22_init>:
void CS43L22_init(){
 8002cb0:	b513      	push	{r0, r1, r4, lr}
	CS43L22_EXTERNAL_DAC_enable();
 8002cb2:	f000 f9dd 	bl	8003070 <CS43L22_EXTERNAL_DAC_enable>
	CS43L22_write( CS43L22_REG_POWER_CTL1, 0x01, 2);
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	4610      	mov	r0, r2
 8002cba:	2101      	movs	r1, #1
 8002cbc:	f7ff ffec 	bl	8002c98 <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL2, 0xAF, 2);
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	21af      	movs	r1, #175	; 0xaf
 8002cc4:	2004      	movs	r0, #4
 8002cc6:	f7ff ffe7 	bl	8002c98 <CS43L22_write>
	CS43L22_write( CS43L22_REG_CLOCKING_CTL,(1 << 7), 2); //Tal vez tenga que poner 0x81 para dividir clock
 8002cca:	2202      	movs	r2, #2
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	2005      	movs	r0, #5
 8002cd0:	f7ff ffe2 	bl	8002c98 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002cd4:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002cd8:	2006      	movs	r0, #6
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002cda:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002cdc:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002ce0:	f7ff ffda 	bl	8002c98 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]); // ... and read 1 byte (the register content).
 8002ce4:	f10d 0005 	add.w	r0, sp, #5
 8002ce8:	f000 f9b4 	bl	8003054 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8002cec:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002cf0:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8002cf4:	f001 0120 	and.w	r1, r1, #32
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8002cf8:	f041 0107 	orr.w	r1, r1, #7
	CS43L22_write(iData[0], iData[1], 2);
 8002cfc:	2202      	movs	r2, #2
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8002cfe:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002d02:	f7ff ffc9 	bl	8002c98 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002d06:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_MISC_CTL ;
 8002d0a:	200e      	movs	r0, #14
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002d0c:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_MISC_CTL ;
 8002d0e:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002d12:	f7ff ffc1 	bl	8002c98 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);  // ... and read 1 byte (the register content).
 8002d16:	f10d 0005 	add.w	r0, sp, #5
 8002d1a:	f000 f99b 	bl	8003054 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8002d1e:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002d22:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8002d26:	f001 0137 	and.w	r1, r1, #55	; 0x37
 8002d2a:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	CS43L22_write(iData[0], iData[1], 2);
 8002d2e:	2202      	movs	r2, #2
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8002d30:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002d34:	f7ff ffb0 	bl	8002c98 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PLAYBACK_CTL2, 0x00, 2);
 8002d38:	2202      	movs	r2, #2
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	200f      	movs	r0, #15
 8002d3e:	f7ff ffab 	bl	8002c98 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMA_VOL, 0x00, 2);
 8002d42:	2202      	movs	r2, #2
 8002d44:	2100      	movs	r1, #0
 8002d46:	201a      	movs	r0, #26
 8002d48:	f7ff ffa6 	bl	8002c98 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMB_VOL, 0x00, 2);
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	2100      	movs	r1, #0
 8002d50:	201b      	movs	r0, #27
 8002d52:	f7ff ffa1 	bl	8002c98 <CS43L22_write>
	CS43L22_write( 0x00, 0x99, 2);
 8002d56:	2202      	movs	r2, #2
 8002d58:	2199      	movs	r1, #153	; 0x99
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7ff ff9c 	bl	8002c98 <CS43L22_write>
	iData[0] = 0x32;
 8002d60:	2432      	movs	r4, #50	; 0x32
	CS43L22_write( 0x47, 0x80, 2);
 8002d62:	2202      	movs	r2, #2
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	2047      	movs	r0, #71	; 0x47
 8002d68:	f7ff ff96 	bl	8002c98 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 8002d6c:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002d70:	f88d 4004 	strb.w	r4, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 8002d74:	2201      	movs	r2, #1
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ff8e 	bl	8002c98 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002d7c:	f10d 0005 	add.w	r0, sp, #5
 8002d80:	f000 f968 	bl	8003054 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] |= 0x80;
 8002d84:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002d88:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] |= 0x80;
 8002d8c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	CS43L22_write(iData[0], iData[1], 2);
 8002d90:	2202      	movs	r2, #2
	iData[1] |= 0x80;
 8002d92:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002d96:	f7ff ff7f 	bl	8002c98 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 8002d9a:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002d9e:	f88d 4004 	strb.w	r4, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 8002da2:	2201      	movs	r2, #1
 8002da4:	4620      	mov	r0, r4
 8002da6:	f7ff ff77 	bl	8002c98 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002daa:	f10d 0005 	add.w	r0, sp, #5
 8002dae:	f000 f951 	bl	8003054 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(0x80);
 8002db2:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002db6:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(0x80);
 8002dba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	CS43L22_write(iData[0], iData[1], 2);
 8002dbe:	2202      	movs	r2, #2
	iData[1] &= ~(0x80);
 8002dc0:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002dc4:	f7ff ff68 	bl	8002c98 <CS43L22_write>
	CS43L22_write( 0x00, 0x00, 2);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4608      	mov	r0, r1
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f7ff ff63 	bl	8002c98 <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	219e      	movs	r1, #158	; 0x9e
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f7ff ff5e 	bl	8002c98 <CS43L22_write>
}
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <CS43L22_AudioSend>:

void CS43L22_AudioSend(uint16_t *buffer,uint16_t buffer_size){

	CS43L22_EXTERNAL_DAC_I2S_transmit(buffer,buffer_size);
 8002de0:	f000 b922 	b.w	8003028 <CS43L22_EXTERNAL_DAC_I2S_transmit>

08002de4 <FFT>:
#define PTS 1024		    //# of points for FFT
typedef struct {float real,imag;} COMPLEX;
extern COMPLEX w[PTS];       	    //twiddle constants stored in w

void FFT(COMPLEX *Y, int N)      //input sample array, # of points     
{
 8002de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 int i,j,k;                       //loop counter variables               
 int upper_leg, lower_leg;   	    //index of upper/lower butterfly leg   
 int leg_diff;                    //difference between upper/lower leg   
 int num_stages = 0;              //number of FFT stages (iterations)
 int index, step;                 //index/step through twiddle constant
 i = 1;                           //log(base2) of N points= # of stages  
 8002de8:	2301      	movs	r3, #1
 int num_stages = 0;              //number of FFT stages (iterations)
 8002dea:	2200      	movs	r2, #0
 do
  {
   num_stages +=1;
   i = i*2;
 8002dec:	005b      	lsls	r3, r3, #1
  }while (i!=N);
 8002dee:	428b      	cmp	r3, r1
 8002df0:	4693      	mov	fp, r2
   num_stages +=1;
 8002df2:	f102 0201 	add.w	r2, r2, #1
  }while (i!=N);
 8002df6:	d1f9      	bne.n	8002dec <FFT+0x8>
 leg_diff = N/2; 		     	    //difference between upper&lower legs
 8002df8:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
 8002dfc:	ea4f 0a63 	mov.w	sl, r3, asr #1
 step = PTS/N;   		     	    //step between values in twiddle.h              
 8002e00:	f44f 6780 	mov.w	r7, #1024	; 0x400
 for (i = 0;i < num_stages; i++)  //for N-point FFT                 
 8002e04:	f04f 0e00 	mov.w	lr, #0
 step = PTS/N;   		     	    //step between values in twiddle.h              
 8002e08:	fb97 f3f1 	sdiv	r3, r7, r1
 8002e0c:	9300      	str	r3, [sp, #0]
 leg_diff = N/2; 		     	    //difference between upper&lower legs
 8002e0e:	4653      	mov	r3, sl
  {
   index = 0;
   for (j = 0; j < leg_diff; j++)
    {
     for (upper_leg = j; upper_leg < N; upper_leg += (2*leg_diff))
 8002e10:	005a      	lsls	r2, r3, #1
 8002e12:	4617      	mov	r7, r2
 8002e14:	9a00      	ldr	r2, [sp, #0]
 8002e16:	4e39      	ldr	r6, [pc, #228]	; (8002efc <FFT+0x118>)
 8002e18:	00d2      	lsls	r2, r2, #3
 8002e1a:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
 8002e1e:	9201      	str	r2, [sp, #4]
 8002e20:	ea4f 1903 	mov.w	r9, r3, lsl #4
   for (j = 0; j < leg_diff; j++)
 8002e24:	2500      	movs	r5, #0
 8002e26:	e02f      	b.n	8002e88 <FFT+0xa4>
      {   
       lower_leg = upper_leg+leg_diff;
	 temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 8002e28:	ed92 6a00 	vldr	s12, [r2]
       temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 8002e2c:	edd2 6a01 	vldr	s13, [r2, #4]
	 temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 8002e30:	ed94 7a00 	vldr	s14, [r4]
       temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 8002e34:	edd4 7a01 	vldr	s15, [r4, #4]
       temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
       temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
       (Y[lower_leg]).real = temp2.real*(w[index]).real
				    -temp2.imag*(w[index]).imag;
 8002e38:	edd6 4a00 	vldr	s9, [r6]
	 temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
 8002e3c:	ee37 5a06 	vadd.f32	s10, s14, s12
       temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
 8002e40:	ee77 5aa6 	vadd.f32	s11, s15, s13
       temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
 8002e44:	ee37 7a46 	vsub.f32	s14, s14, s12
       temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
 8002e48:	ee77 7ae6 	vsub.f32	s15, s15, s13
				    -temp2.imag*(w[index]).imag;
 8002e4c:	ed96 6a01 	vldr	s12, [r6, #4]
 8002e50:	ee66 6a67 	vnmul.f32	s13, s12, s15
     for (upper_leg = j; upper_leg < N; upper_leg += (2*leg_diff))
 8002e54:	44b8      	add	r8, r7
				    -temp2.imag*(w[index]).imag;
 8002e56:	eee7 6a24 	vfma.f32	s13, s14, s9
       (Y[lower_leg]).real = temp2.real*(w[index]).real
 8002e5a:	edc2 6a00 	vstr	s13, [r2]
       (Y[lower_leg]).imag = temp2.real*(w[index]).imag
				    +temp2.imag*(w[index]).real;
 8002e5e:	edd6 6a00 	vldr	s13, [r6]
 8002e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e66:	eee7 7a06 	vfma.f32	s15, s14, s12
       (Y[lower_leg]).imag = temp2.real*(w[index]).imag
 8002e6a:	edc2 7a01 	vstr	s15, [r2, #4]
       (Y[upper_leg]).real = temp1.real;
 8002e6e:	ed84 5a00 	vstr	s10, [r4]
       (Y[upper_leg]).imag = temp1.imag;
 8002e72:	edc4 5a01 	vstr	s11, [r4, #4]
     for (upper_leg = j; upper_leg < N; upper_leg += (2*leg_diff))
 8002e76:	444a      	add	r2, r9
 8002e78:	444c      	add	r4, r9
 8002e7a:	4588      	cmp	r8, r1
 8002e7c:	dbd4      	blt.n	8002e28 <FFT+0x44>
   for (j = 0; j < leg_diff; j++)
 8002e7e:	9a01      	ldr	r2, [sp, #4]
 8002e80:	3501      	adds	r5, #1
 8002e82:	f10c 0c08 	add.w	ip, ip, #8
 8002e86:	4416      	add	r6, r2
 8002e88:	429d      	cmp	r5, r3
 8002e8a:	da04      	bge.n	8002e96 <FFT+0xb2>
 8002e8c:	eb00 04c5 	add.w	r4, r0, r5, lsl #3
 8002e90:	4662      	mov	r2, ip
 8002e92:	46a8      	mov	r8, r5
 8002e94:	e7f1      	b.n	8002e7a <FFT+0x96>
      }
   index += step;
    }
     leg_diff = leg_diff/2;
     step *= 2;
 8002e96:	9a00      	ldr	r2, [sp, #0]
     leg_diff = leg_diff/2;
 8002e98:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
     step *= 2;
 8002e9c:	0052      	lsls	r2, r2, #1
 for (i = 0;i < num_stages; i++)  //for N-point FFT                 
 8002e9e:	45f3      	cmp	fp, lr
     step *= 2;
 8002ea0:	9200      	str	r2, [sp, #0]
     leg_diff = leg_diff/2;
 8002ea2:	ea4f 0363 	mov.w	r3, r3, asr #1
 for (i = 0;i < num_stages; i++)  //for N-point FFT                 
 8002ea6:	f10e 0201 	add.w	r2, lr, #1
 8002eaa:	d108      	bne.n	8002ebe <FFT+0xda>
 8002eac:	4604      	mov	r4, r0
      }
       j = 0;
 8002eae:	2200      	movs	r2, #0
       for (i = 1; i < (N-1); i++)     //bit reversal for resequencing data
 8002eb0:	2501      	movs	r5, #1
 8002eb2:	3901      	subs	r1, #1
 8002eb4:	42a9      	cmp	r1, r5
 8002eb6:	dc1e      	bgt.n	8002ef6 <FFT+0x112>
       (Y[i]).real = temp1.real;
       (Y[i]).imag = temp1.imag;
      }
    }
   return;
}
 8002eb8:	b003      	add	sp, #12
 8002eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ebe:	4696      	mov	lr, r2
 8002ec0:	e7a6      	b.n	8002e10 <FFT+0x2c>
       j = j - k;
 8002ec2:	1ad2      	subs	r2, r2, r3
       k = k/2;
 8002ec4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002ec8:	105b      	asrs	r3, r3, #1
     while (k <= j)
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	daf9      	bge.n	8002ec2 <FFT+0xde>
     j = j + k;
 8002ece:	441a      	add	r2, r3
     if (i<j)
 8002ed0:	4295      	cmp	r5, r2
 8002ed2:	da0d      	bge.n	8002ef0 <FFT+0x10c>
       temp1.real = (Y[j]).real;
 8002ed4:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
       (Y[j]).real = (Y[i]).real;
 8002ed8:	f8d4 c008 	ldr.w	ip, [r4, #8]
       temp1.real = (Y[j]).real;
 8002edc:	681f      	ldr	r7, [r3, #0]
       (Y[j]).real = (Y[i]).real;
 8002ede:	f8c3 c000 	str.w	ip, [r3]
       temp1.imag = (Y[j]).imag;
 8002ee2:	685e      	ldr	r6, [r3, #4]
       (Y[j]).imag = (Y[i]).imag;
 8002ee4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8002ee8:	f8c3 c004 	str.w	ip, [r3, #4]
       (Y[i]).real = temp1.real;
 8002eec:	60a7      	str	r7, [r4, #8]
       (Y[i]).imag = temp1.imag;
 8002eee:	60e6      	str	r6, [r4, #12]
       for (i = 1; i < (N-1); i++)     //bit reversal for resequencing data
 8002ef0:	3501      	adds	r5, #1
 8002ef2:	3408      	adds	r4, #8
 8002ef4:	e7de      	b.n	8002eb4 <FFT+0xd0>
     k = N/2;
 8002ef6:	4653      	mov	r3, sl
 8002ef8:	e7e7      	b.n	8002eca <FFT+0xe6>
 8002efa:	bf00      	nop
 8002efc:	200034b0 	.word	0x200034b0

08002f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f00:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f02:	2410      	movs	r4, #16
{
 8002f04:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f06:	4622      	mov	r2, r4
 8002f08:	2100      	movs	r1, #0
 8002f0a:	a80e      	add	r0, sp, #56	; 0x38
 8002f0c:	f000 fdab 	bl	8003a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f10:	2214      	movs	r2, #20
 8002f12:	2100      	movs	r1, #0
 8002f14:	a807      	add	r0, sp, #28
 8002f16:	f000 fda6 	bl	8003a66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	a803      	add	r0, sp, #12
 8002f20:	f000 fda1 	bl	8003a66 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	2400      	movs	r4, #0
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <SystemClock_Config+0xb0>)
 8002f28:	9401      	str	r4, [sp, #4]
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <SystemClock_Config+0xb4>)
 8002f3e:	9402      	str	r4, [sp, #8]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	9302      	str	r3, [sp, #8]
 8002f50:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f52:	2601      	movs	r6, #1
 8002f54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f58:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f5a:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002f62:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f64:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002f68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002f6c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f70:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f72:	2307      	movs	r3, #7
 8002f74:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f76:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f78:	f7ff fa28 	bl	80023cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f7c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f7e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f82:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8a:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f8e:	a807      	add	r0, sp, #28
 8002f90:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f92:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f94:	f7ff fbce 	bl	8002734 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002f9e:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa2:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002fa4:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa6:	f7ff fc6d 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002faa:	b018      	add	sp, #96	; 0x60
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000

08002fb8 <HAL_I2S_TxCpltCallback>:
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2s);

	//HAL_GPIO_TogglePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin);

	transferComplete = TRUE;
 8002fb8:	4b01      	ldr	r3, [pc, #4]	; (8002fc0 <HAL_I2S_TxCpltCallback+0x8>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]

}
 8002fbe:	4770      	bx	lr
 8002fc0:	2000000a 	.word	0x2000000a

08002fc4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)

{
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	adc_done = 1;
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <HAL_ADC_ConvCpltCallback+0x8>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]

}
 8002fca:	4770      	bx	lr
 8002fcc:	200000a0 	.word	0x200000a0

08002fd0 <select_buffer_to_transmit>:

uint16_t* select_buffer_to_transmit(buffer_t bf){

	uint16_t *ptr = NULL;

	if(buffer_to_send == buffer_A){
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <select_buffer_to_transmit+0x14>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	b123      	cbz	r3, 8002fe0 <select_buffer_to_transmit+0x10>

		ptr = audioBufferA;

	}else if(buffer_to_send == buffer_B){

		ptr = audioBufferB;
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <select_buffer_to_transmit+0x18>)
 8002fda:	bf18      	it	ne
 8002fdc:	2000      	movne	r0, #0
 8002fde:	4770      	bx	lr
		ptr = audioBufferA;
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <select_buffer_to_transmit+0x1c>)

	}

	return ptr;

}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000008 	.word	0x20000008
 8002fe8:	2000020a 	.word	0x2000020a
 8002fec:	200000a2 	.word	0x200000a2

08002ff0 <audio_buffer_init>:

void audio_buffer_init(){
 8002ff0:	b508      	push	{r3, lr}

	size_t i;

	for(i = 0;i<AUDIO_BUFFER_SIZE;i++){

		audioBufferA[i] = 0;
 8002ff2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4805      	ldr	r0, [pc, #20]	; (8003010 <audio_buffer_init+0x20>)
 8002ffa:	f000 fd34 	bl	8003a66 <memset>
		audioBufferB[i] = 0;

	}

}
 8002ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		audioBufferB[i] = 0;
 8003002:	4804      	ldr	r0, [pc, #16]	; (8003014 <audio_buffer_init+0x24>)
 8003004:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003008:	2100      	movs	r1, #0
 800300a:	f000 bd2c 	b.w	8003a66 <memset>
 800300e:	bf00      	nop
 8003010:	200000a2 	.word	0x200000a2
 8003014:	2000020a 	.word	0x2000020a

08003018 <audio_read>:


uint16_t audio_read(void){
 8003018:	b508      	push	{r3, lr}

#if (RUN_OPT == USE_ADC)

	return HAL_ADC_GetValue(&hadc1);
 800301a:	4802      	ldr	r0, [pc, #8]	; (8003024 <audio_read+0xc>)
 800301c:	f7fe f8fa 	bl	8001214 <HAL_ADC_GetValue>

	return SINE_COMP[index++];

#endif */

}
 8003020:	b280      	uxth	r0, r0
 8003022:	bd08      	pop	{r3, pc}
 8003024:	20000380 	.word	0x20000380

08003028 <CS43L22_EXTERNAL_DAC_I2S_transmit>:

void CS43L22_EXTERNAL_DAC_I2S_transmit(uint16_t *buffer,uint16_t buffer_size){
 8003028:	460a      	mov	r2, r1

	HAL_I2S_Transmit_IT(&hi2s3,buffer,buffer_size);
 800302a:	4601      	mov	r1, r0
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <CS43L22_EXTERNAL_DAC_I2S_transmit+0xc>)
 800302e:	f7fe bfed 	b.w	800200c <HAL_I2S_Transmit_IT>
 8003032:	bf00      	nop
 8003034:	2000041c 	.word	0x2000041c

08003038 <CS43L22_EXTERNAL_DAC_I2C_write>:

}


void CS43L22_EXTERNAL_DAC_I2C_write(uint8_t *iData, uint8_t len)
{ //maneja el periferico i2c para comunicaicon con el dac
 8003038:	b507      	push	{r0, r1, r2, lr}
 800303a:	460b      	mov	r3, r1

	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 800303c:	2164      	movs	r1, #100	; 0x64
{ //maneja el periferico i2c para comunicaicon con el dac
 800303e:	4602      	mov	r2, r0
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 8003040:	9100      	str	r1, [sp, #0]
 8003042:	4803      	ldr	r0, [pc, #12]	; (8003050 <CS43L22_EXTERNAL_DAC_I2C_write+0x18>)
 8003044:	2194      	movs	r1, #148	; 0x94
 8003046:	f7fe fd05 	bl	8001a54 <HAL_I2C_Master_Transmit>

}
 800304a:	b003      	add	sp, #12
 800304c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003050:	200003c8 	.word	0x200003c8

08003054 <CS43L22_EXTERNAL_DAC_I2C_recieve>:

void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 8003054:	b507      	push	{r0, r1, r2, lr}

	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 8003056:	2364      	movs	r3, #100	; 0x64
void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 8003058:	4602      	mov	r2, r0
	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2194      	movs	r1, #148	; 0x94
 800305e:	2301      	movs	r3, #1
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <CS43L22_EXTERNAL_DAC_I2C_recieve+0x18>)
 8003062:	f7fe fdc9 	bl	8001bf8 <HAL_I2C_Master_Receive>

}
 8003066:	b003      	add	sp, #12
 8003068:	f85d fb04 	ldr.w	pc, [sp], #4
 800306c:	200003c8 	.word	0x200003c8

08003070 <CS43L22_EXTERNAL_DAC_enable>:
void CS43L22_EXTERNAL_DAC_enable()
{
	//esta funcion se encarga de poner en alto o bajo el pin de reset del dac
	//recibe un 1 para poner el pin en alto y un 0 para ponerlo en bajo

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <CS43L22_EXTERNAL_DAC_enable+0xc>)
 8003072:	2201      	movs	r2, #1
 8003074:	2110      	movs	r1, #16
 8003076:	f7fe bb45 	b.w	8001704 <HAL_GPIO_WritePin>
 800307a:	bf00      	nop
 800307c:	40020c00 	.word	0x40020c00

08003080 <find_peaks>:

}

void find_peaks(int* spectrum)
{
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8003086:	466c      	mov	r4, sp
 8003088:	1d02      	adds	r2, r0, #4
 800308a:	4625      	mov	r5, r4
 800308c:	f600 70fc 	addw	r0, r0, #4092	; 0xffc
	// create a peaks array
	int value;
	int edges[PTS];

	// sum variable for average
	int sum = 0;
 8003090:	2300      	movs	r3, #0

	for (int i = 2; i < PTS; i++)
	{
		// find edges
		value =
 8003092:	4616      	mov	r6, r2
 8003094:	e9d6 6100 	ldrd	r6, r1, [r6]
 8003098:	3204      	adds	r2, #4
 800309a:	1b89      	subs	r1, r1, r6
	for (int i = 2; i < PTS; i++)
 800309c:	4282      	cmp	r2, r0
			spectrum[i]*kernel[2] +
			spectrum[i-1]*kernel[1] +
			spectrum[i-2]*kernel[0];

		// add
		edges[i-2]=value;
 800309e:	f845 1b04 	str.w	r1, [r5], #4
		sum += value;
 80030a2:	440b      	add	r3, r1
	for (int i = 2; i < PTS; i++)
 80030a4:	d1f5      	bne.n	8003092 <find_peaks+0x12>
	}

	// find peaks larger than average that are separated by more than 2 spots
	int average = sum/(PTS);
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfb8      	it	lt
 80030aa:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80030ae:	129b      	asrs	r3, r3, #10
	int close_peaks=0;
	for (int i = 0; i < PTS; i++)
 80030b0:	2200      	movs	r2, #0
 80030b2:	480c      	ldr	r0, [pc, #48]	; (80030e4 <find_peaks+0x64>)
	int close_peaks=0;
 80030b4:	4611      	mov	r1, r2
	{
		if((edges[i] > (average + 30)) & (close_peaks == 0))
 80030b6:	331e      	adds	r3, #30
 80030b8:	f854 5b04 	ldr.w	r5, [r4], #4
 80030bc:	429d      	cmp	r5, r3
 80030be:	dd02      	ble.n	80030c6 <find_peaks+0x46>
 80030c0:	b169      	cbz	r1, 80030de <find_peaks+0x5e>
			peaks[i] = i;
			close_peaks = 2;
		}
		else
		{
			close_peaks <= 0 ? close_peaks = 0 : close_peaks--;
 80030c2:	3901      	subs	r1, #1
 80030c4:	e001      	b.n	80030ca <find_peaks+0x4a>
 80030c6:	2900      	cmp	r1, #0
 80030c8:	d1fb      	bne.n	80030c2 <find_peaks+0x42>
			close_peaks = 2;
 80030ca:	2500      	movs	r5, #0
	for (int i = 0; i < PTS; i++)
 80030cc:	3201      	adds	r2, #1
 80030ce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
			peaks[i] = i;
 80030d2:	f840 5b04 	str.w	r5, [r0], #4
	for (int i = 0; i < PTS; i++)
 80030d6:	d1ef      	bne.n	80030b8 <find_peaks+0x38>
			peaks[i] = 0;
		}
	}
	return;
}
 80030d8:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	4615      	mov	r5, r2
			close_peaks = 2;
 80030e0:	2102      	movs	r1, #2
 80030e2:	e7f3      	b.n	80030cc <find_peaks+0x4c>
 80030e4:	200004a8 	.word	0x200004a8

080030e8 <load_buffer>:
void load_buffer(uint16_t *buff){
 80030e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030ec:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80030f0:	b081      	sub	sp, #4
 80030f2:	4605      	mov	r5, r0
	sample = audio_read();
 80030f4:	f7ff ff90 	bl	8003018 <audio_read>
	samples[sample_index].real = (float)sample;
 80030f8:	4e30      	ldr	r6, [pc, #192]	; (80031bc <load_buffer+0xd4>)
 80030fa:	4c31      	ldr	r4, [pc, #196]	; (80031c0 <load_buffer+0xd8>)
 80030fc:	6831      	ldr	r1, [r6, #0]
	sample = audio_read();
 80030fe:	4f31      	ldr	r7, [pc, #196]	; (80031c4 <load_buffer+0xdc>)
	samples[sample_index].real = (float)sample;
 8003100:	ee07 0a90 	vmov	s15, r0
 8003104:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8003108:	eef8 7a67 	vcvt.f32.u32	s15, s15
	sample_index++;
 800310c:	3101      	adds	r1, #1
	samples[sample_index].imag = 0.0;
 800310e:	2200      	movs	r2, #0
	if(sample_index == PTS)
 8003110:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
	sample = audio_read();
 8003114:	8038      	strh	r0, [r7, #0]
	samples[sample_index].real = (float)sample;
 8003116:	edc3 7a00 	vstr	s15, [r3]
	samples[sample_index].imag = 0.0;
 800311a:	605a      	str	r2, [r3, #4]
	sample_index++;
 800311c:	6031      	str	r1, [r6, #0]
	if(sample_index == PTS)
 800311e:	d132      	bne.n	8003186 <load_buffer+0x9e>
		FFT(samples, PTS);
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff fe5f 	bl	8002de4 <FFT>
		sample_index = 0;
 8003126:	46e9      	mov	r9, sp
 8003128:	2300      	movs	r3, #0
 800312a:	6033      	str	r3, [r6, #0]
		for (int i = 0; i< PTS; i++)
 800312c:	46c8      	mov	r8, r9
 800312e:	461e      	mov	r6, r3
			output[i] = sqrt(((int)((samples[i].real))^2) + ((int)((samples[i].imag))^2));
 8003130:	edd4 7a00 	vldr	s15, [r4]
 8003134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		for (int i = 0; i< PTS; i++)
 8003138:	3601      	adds	r6, #1
			output[i] = sqrt(((int)((samples[i].real))^2) + ((int)((samples[i].imag))^2));
 800313a:	ee17 0a90 	vmov	r0, s15
 800313e:	edd4 7a01 	vldr	s15, [r4, #4]
 8003142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003146:	f080 0002 	eor.w	r0, r0, #2
 800314a:	ee17 3a90 	vmov	r3, s15
 800314e:	f083 0302 	eor.w	r3, r3, #2
 8003152:	4418      	add	r0, r3
 8003154:	f7fd f9de 	bl	8000514 <__aeabi_i2d>
 8003158:	ec41 0b10 	vmov	d0, r0, r1
 800315c:	f001 faa2 	bl	80046a4 <sqrt>
 8003160:	ec51 0b10 	vmov	r0, r1, d0
 8003164:	f7fd fcf0 	bl	8000b48 <__aeabi_d2iz>
		for (int i = 0; i< PTS; i++)
 8003168:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
			output[i] = sqrt(((int)((samples[i].real))^2) + ((int)((samples[i].imag))^2));
 800316c:	f849 0b04 	str.w	r0, [r9], #4
		for (int i = 0; i< PTS; i++)
 8003170:	f104 0408 	add.w	r4, r4, #8
 8003174:	d1dc      	bne.n	8003130 <load_buffer+0x48>
		find_peaks(output);
 8003176:	4640      	mov	r0, r8
 8003178:	f7ff ff82 	bl	8003080 <find_peaks>
		printf("%d\n", output[99]);
 800317c:	f8d8 118c 	ldr.w	r1, [r8, #396]	; 0x18c
 8003180:	4811      	ldr	r0, [pc, #68]	; (80031c8 <load_buffer+0xe0>)
 8003182:	f000 fc1b 	bl	80039bc <iprintf>
	buff[i] = sample;
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <load_buffer+0xe4>)
 8003188:	8839      	ldrh	r1, [r7, #0]
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	f825 1013 	strh.w	r1, [r5, r3, lsl #1]
	buff[i+1] =  buff[i];
 8003190:	eb05 0543 	add.w	r5, r5, r3, lsl #1
	i = i+2;
 8003194:	3302      	adds	r3, #2
	if( (i >= AUDIO_BUFFER_SIZE)){
 8003196:	2bb3      	cmp	r3, #179	; 0xb3
	buff[i+1] =  buff[i];
 8003198:	8069      	strh	r1, [r5, #2]
	i = i+2;
 800319a:	6013      	str	r3, [r2, #0]
	if( (i >= AUDIO_BUFFER_SIZE)){
 800319c:	d909      	bls.n	80031b2 <load_buffer+0xca>
		buffer_to_send = buffer_to_fill;
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <load_buffer+0xe8>)
		buffer_t aux = buffer_to_send;
 80031a0:	490c      	ldr	r1, [pc, #48]	; (80031d4 <load_buffer+0xec>)
		buffer_to_send = buffer_to_fill;
 80031a2:	781c      	ldrb	r4, [r3, #0]
		buffer_t aux = buffer_to_send;
 80031a4:	7808      	ldrb	r0, [r1, #0]
		buffer_to_send = buffer_to_fill;
 80031a6:	700c      	strb	r4, [r1, #0]
		flag = data_ready_to_send;
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <load_buffer+0xf0>)
		buffer_to_fill = aux;
 80031aa:	7018      	strb	r0, [r3, #0]
		flag = data_ready_to_send;
 80031ac:	2300      	movs	r3, #0
 80031ae:	700b      	strb	r3, [r1, #0]
		i=0;
 80031b0:	6013      	str	r3, [r2, #0]
}
 80031b2:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
 80031b6:	b001      	add	sp, #4
 80031b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031bc:	200014ac 	.word	0x200014ac
 80031c0:	200014b0 	.word	0x200014b0
 80031c4:	200014a8 	.word	0x200014a8
 80031c8:	080059f8 	.word	0x080059f8
 80031cc:	200004a4 	.word	0x200004a4
 80031d0:	2000037c 	.word	0x2000037c
 80031d4:	20000008 	.word	0x20000008
 80031d8:	20000009 	.word	0x20000009

080031dc <fill_buffers>:
void fill_buffers(){
 80031dc:	b510      	push	{r4, lr}
	if((buffer_to_fill == buffer_A)){
 80031de:	4c09      	ldr	r4, [pc, #36]	; (8003204 <fill_buffers+0x28>)
 80031e0:	7823      	ldrb	r3, [r4, #0]
 80031e2:	b923      	cbnz	r3, 80031ee <fill_buffers+0x12>
		audioToUpdate = audioBufferA;
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <fill_buffers+0x2c>)
 80031e6:	4809      	ldr	r0, [pc, #36]	; (800320c <fill_buffers+0x30>)
 80031e8:	6018      	str	r0, [r3, #0]
		load_buffer(audioToUpdate);
 80031ea:	f7ff ff7d 	bl	80030e8 <load_buffer>
	if((buffer_to_fill == buffer_B)){
 80031ee:	7823      	ldrb	r3, [r4, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <fill_buffers+0x26>
		audioToUpdate = audioBufferB;
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <fill_buffers+0x2c>)
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <fill_buffers+0x34>)
 80031f8:	6018      	str	r0, [r3, #0]
}
 80031fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		load_buffer(audioToUpdate);
 80031fe:	f7ff bf73 	b.w	80030e8 <load_buffer>
}
 8003202:	bd10      	pop	{r4, pc}
 8003204:	2000037c 	.word	0x2000037c
 8003208:	20000378 	.word	0x20000378
 800320c:	200000a2 	.word	0x200000a2
 8003210:	2000020a 	.word	0x2000020a
 8003214:	00000000 	.word	0x00000000

08003218 <main>:
{
 8003218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321c:	ed2d 8b04 	vpush	{d8-d9}
 8003220:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8003222:	f7fd feab 	bl	8000f7c <HAL_Init>
  SystemClock_Config();
 8003226:	f7ff fe6b 	bl	8002f00 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322a:	2214      	movs	r2, #20
 800322c:	2100      	movs	r1, #0
 800322e:	a807      	add	r0, sp, #28
 8003230:	f000 fc19 	bl	8003a66 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003234:	2400      	movs	r4, #0
 8003236:	4b9a      	ldr	r3, [pc, #616]	; (80034a0 <main+0x288>)
 8003238:	9400      	str	r4, [sp, #0]
 800323a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 800323c:	4899      	ldr	r0, [pc, #612]	; (80034a4 <main+0x28c>)
  hadc1.Instance = ADC1;
 800323e:	4d9a      	ldr	r5, [pc, #616]	; (80034a8 <main+0x290>)
		w[i].real = cos(2.0 * M_PI * (float)i / PTS);
 8003240:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80034f8 <main+0x2e0>
		samples[i].real = 0;
 8003244:	ed9f 9a99 	vldr	s18, [pc, #612]	; 80034ac <main+0x294>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003248:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
 800324e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003250:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	9401      	str	r4, [sp, #4]
 800325a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
 8003262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003264:	f002 0201 	and.w	r2, r2, #1
 8003268:	9201      	str	r2, [sp, #4]
 800326a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800326c:	9402      	str	r4, [sp, #8]
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	f042 0208 	orr.w	r2, r2, #8
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
 8003276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003278:	f002 0208 	and.w	r2, r2, #8
 800327c:	9202      	str	r2, [sp, #8]
 800327e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003280:	9403      	str	r4, [sp, #12]
 8003282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003284:	f042 0204 	orr.w	r2, r2, #4
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
 800328a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328c:	f002 0204 	and.w	r2, r2, #4
 8003290:	9203      	str	r2, [sp, #12]
 8003292:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003294:	9404      	str	r4, [sp, #16]
 8003296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003298:	f042 0202 	orr.w	r2, r2, #2
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 80032a6:	4622      	mov	r2, r4
 80032a8:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 80032ac:	f7fe fa2a 	bl	8001704 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80032b0:	4622      	mov	r2, r4
 80032b2:	487f      	ldr	r0, [pc, #508]	; (80034b0 <main+0x298>)
 80032b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80032b8:	f7fe fa24 	bl	8001704 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Button_Pin;
 80032bc:	2601      	movs	r6, #1
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80032be:	4879      	ldr	r0, [pc, #484]	; (80034a4 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80032c2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c4:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80032c8:	f7fe f936 	bl	8001538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sampling_Check_Pin;
 80032cc:	2304      	movs	r3, #4
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 80032ce:	4875      	ldr	r0, [pc, #468]	; (80034a4 <main+0x28c>)
 80032d0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 80032da:	f7fe f92d 	bl	8001538 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80032de:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e2:	a907      	add	r1, sp, #28
 80032e4:	4872      	ldr	r0, [pc, #456]	; (80034b0 <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e6:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ee:	f7fe f923 	bl	8001538 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80032f2:	4870      	ldr	r0, [pc, #448]	; (80034b4 <main+0x29c>)
  hi2c1.Init.ClockSpeed = 100000;
 80032f4:	4a70      	ldr	r2, [pc, #448]	; (80034b8 <main+0x2a0>)
 80032f6:	4b71      	ldr	r3, [pc, #452]	; (80034bc <main+0x2a4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032f8:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 80032fa:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003302:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8003306:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800330a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800330e:	f7fe fb01 	bl	8001914 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8003312:	486b      	ldr	r0, [pc, #428]	; (80034c0 <main+0x2a8>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003314:	496b      	ldr	r1, [pc, #428]	; (80034c4 <main+0x2ac>)
 8003316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800331a:	e9c0 1300 	strd	r1, r3, [r0]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800331e:	6103      	str	r3, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8003320:	f64b 3380 	movw	r3, #48000	; 0xbb80
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003324:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003328:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800332c:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003330:	f7fe fdcc 	bl	8001ecc <HAL_I2S_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003334:	2210      	movs	r2, #16
 8003336:	4621      	mov	r1, r4
 8003338:	a807      	add	r0, sp, #28
 800333a:	f000 fb94 	bl	8003a66 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800333e:	4862      	ldr	r0, [pc, #392]	; (80034c8 <main+0x2b0>)
  hadc1.Init.NbrOfConversion = 1;
 8003340:	61ee      	str	r6, [r5, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003346:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800334a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800334e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003352:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003354:	e9c5 370a 	strd	r3, r7, [r5, #40]	; 0x28
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003358:	616e      	str	r6, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800335a:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800335c:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800335e:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003360:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003364:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003366:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800336a:	f7fd fe33 	bl	8000fd4 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800336e:	a907      	add	r1, sp, #28
 8003370:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 8003372:	e9cd 6607 	strd	r6, r6, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003376:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Instance = TIM2;
 8003378:	4e54      	ldr	r6, [pc, #336]	; (80034cc <main+0x2b4>)
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 800337a:	4f55      	ldr	r7, [pc, #340]	; (80034d0 <main+0x2b8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800337c:	f7fd ffe4 	bl	8001348 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003380:	2210      	movs	r2, #16
 8003382:	4621      	mov	r1, r4
 8003384:	a807      	add	r0, sp, #28
 8003386:	f000 fb6e 	bl	8003a66 <memset>
  htim2.Init.Prescaler = 175;
 800338a:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800338e:	23af      	movs	r3, #175	; 0xaf
 8003390:	e9c6 c300 	strd	ip, r3, [r6]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003394:	4630      	mov	r0, r6
  htim2.Init.Period = 9;
 8003396:	2309      	movs	r3, #9
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003398:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339c:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339e:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033a4:	f7ff fba4 	bl	8002af0 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033ac:	a907      	add	r1, sp, #28
 80033ae:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b0:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033b2:	f7ff fbc1 	bl	8002b38 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033b6:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80033b8:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033ba:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033bc:	e9cd 3405 	strd	r3, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c0:	f7ff fc4c 	bl	8002c5c <HAL_TIMEx_MasterConfigSynchronization>
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <main+0x2bc>)
 80033c6:	603b      	str	r3, [r7, #0]
	audioToUpdate = audioBufferA;
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <main+0x2c0>)
 80033ca:	4a44      	ldr	r2, [pc, #272]	; (80034dc <main+0x2c4>)
 80033cc:	601a      	str	r2, [r3, #0]
	CS43L22_init();   				//configuro el DAC CS43L22
 80033ce:	f7ff fc6f 	bl	8002cb0 <CS43L22_init>
	audio_buffer_init();         	//inicializo los buffers con ceros
 80033d2:	f7ff fe0d 	bl	8002ff0 <audio_buffer_init>
	HAL_TIM_Base_Start(&htim2); 	//activo el timer
 80033d6:	4630      	mov	r0, r6
 80033d8:	f7ff fb12 	bl	8002a00 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1); 		// y el ADC
 80033dc:	4628      	mov	r0, r5
 80033de:	f7fd fe9f 	bl	8001120 <HAL_ADC_Start_IT>
		w[i].real = cos(2.0 * M_PI * (float)i / PTS);
 80033e2:	f20f 0bb4 	addw	fp, pc, #180	; 0xb4
 80033e6:	e9db ab00 	ldrd	sl, fp, [fp]
 80033ea:	4e3d      	ldr	r6, [pc, #244]	; (80034e0 <main+0x2c8>)
 80033ec:	4d3d      	ldr	r5, [pc, #244]	; (80034e4 <main+0x2cc>)
 80033ee:	f04f 0800 	mov.w	r8, #0
 80033f2:	ee07 4a90 	vmov	s15, r4
 80033f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (int i = 0; i < PTS; i++)
 80033fa:	3401      	adds	r4, #1
		w[i].real = cos(2.0 * M_PI * (float)i / PTS);
 80033fc:	ee17 0a90 	vmov	r0, s15
 8003400:	f7fd f89a 	bl	8000538 <__aeabi_f2d>
 8003404:	4652      	mov	r2, sl
 8003406:	465b      	mov	r3, fp
 8003408:	f7fd f8ee 	bl	80005e8 <__aeabi_dmul>
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	f7fd f8ea 	bl	80005e8 <__aeabi_dmul>
 8003414:	ec41 0b10 	vmov	d0, r0, r1
 8003418:	ec41 0b18 	vmov	d8, r0, r1
 800341c:	f001 f970 	bl	8004700 <cos>
 8003420:	ec51 0b10 	vmov	r0, r1, d0
 8003424:	f7fd fbb8 	bl	8000b98 <__aeabi_d2f>
		w[i].imag = sin(2.0 * M_PI * (float)i / PTS);
 8003428:	eeb0 0a48 	vmov.f32	s0, s16
 800342c:	eef0 0a68 	vmov.f32	s1, s17
		w[i].real = cos(2.0 * M_PI * (float)i / PTS);
 8003430:	6030      	str	r0, [r6, #0]
		w[i].imag = sin(2.0 * M_PI * (float)i / PTS);
 8003432:	f001 f9b9 	bl	80047a8 <sin>
 8003436:	ec51 0b10 	vmov	r0, r1, d0
 800343a:	f7fd fbad 	bl	8000b98 <__aeabi_d2f>
	for (int i = 0; i < PTS; i++)
 800343e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		w[i].imag = sin(2.0 * M_PI * (float)i / PTS);
 8003442:	6070      	str	r0, [r6, #4]
		samples[i].real = 0;
 8003444:	ed85 9a00 	vstr	s18, [r5]
		samples[i].imag = 0;
 8003448:	ed85 9a01 	vstr	s18, [r5, #4]
	for (int i = 0; i < PTS; i++)
 800344c:	f106 0608 	add.w	r6, r6, #8
 8003450:	f105 0508 	add.w	r5, r5, #8
 8003454:	d1cd      	bne.n	80033f2 <main+0x1da>
	sample_index = 0;
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <main+0x2d0>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 8003458:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80034fc <main+0x2e4>
		if(transferComplete && (flag == data_ready_to_send)){
 800345c:	4c23      	ldr	r4, [pc, #140]	; (80034ec <main+0x2d4>)
	sample_index = 0;
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
		if(transferComplete && (flag == data_ready_to_send)){
 8003462:	4d23      	ldr	r5, [pc, #140]	; (80034f0 <main+0x2d8>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 8003464:	f898 0000 	ldrb.w	r0, [r8]
 8003468:	f7ff fdb2 	bl	8002fd0 <select_buffer_to_transmit>
		if(transferComplete && (flag == data_ready_to_send)){
 800346c:	782b      	ldrb	r3, [r5, #0]
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 800346e:	6038      	str	r0, [r7, #0]
		if(transferComplete && (flag == data_ready_to_send)){
 8003470:	b13b      	cbz	r3, 8003482 <main+0x26a>
 8003472:	7826      	ldrb	r6, [r4, #0]
 8003474:	b92e      	cbnz	r6, 8003482 <main+0x26a>
			flag = idle;
 8003476:	2302      	movs	r3, #2
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 8003478:	21b4      	movs	r1, #180	; 0xb4
			flag = idle;
 800347a:	7023      	strb	r3, [r4, #0]
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 800347c:	f7ff fcb0 	bl	8002de0 <CS43L22_AudioSend>
			transferComplete = FALSE;
 8003480:	702e      	strb	r6, [r5, #0]
		if(adc_done){
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <main+0x2dc>)
 8003484:	781a      	ldrb	r2, [r3, #0]
 8003486:	2a00      	cmp	r2, #0
 8003488:	d0ec      	beq.n	8003464 <main+0x24c>
			adc_done = 0;
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
			fill_buffers();
 800348e:	f7ff fea5 	bl	80031dc <fill_buffers>
 8003492:	e7e6      	b.n	8003462 <main+0x24a>
 8003494:	f3af 8000 	nop.w
 8003498:	54442d18 	.word	0x54442d18
 800349c:	401921fb 	.word	0x401921fb
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	20000380 	.word	0x20000380
 80034ac:	00000000 	.word	0x00000000
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	200003c8 	.word	0x200003c8
 80034b8:	40005400 	.word	0x40005400
 80034bc:	000186a0 	.word	0x000186a0
 80034c0:	2000041c 	.word	0x2000041c
 80034c4:	40003c00 	.word	0x40003c00
 80034c8:	40012000 	.word	0x40012000
 80034cc:	20000464 	.word	0x20000464
 80034d0:	20000374 	.word	0x20000374
 80034d4:	2000020a 	.word	0x2000020a
 80034d8:	20000378 	.word	0x20000378
 80034dc:	200000a2 	.word	0x200000a2
 80034e0:	200034b0 	.word	0x200034b0
 80034e4:	200014b0 	.word	0x200014b0
 80034e8:	200014ac 	.word	0x200014ac
 80034ec:	20000009 	.word	0x20000009
 80034f0:	2000000a 	.word	0x2000000a
 80034f4:	200000a0 	.word	0x200000a0
 80034f8:	3f500000 	.word	0x3f500000
 80034fc:	20000008 	.word	0x20000008

08003500 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003504:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8003508:	07d1      	lsls	r1, r2, #31
 800350a:	d503      	bpl.n	8003514 <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800350c:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003510:	07d2      	lsls	r2, r2, #31
 8003512:	d402      	bmi.n	800351a <__io_putchar+0x1a>

int __io_putchar(int ch)
{
	ITM_SendChar(ch);
	return 0;
}
 8003514:	2000      	movs	r0, #0
 8003516:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8003518:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2a00      	cmp	r2, #0
 800351e:	d0fb      	beq.n	8003518 <__io_putchar+0x18>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003520:	b2c0      	uxtb	r0, r0
 8003522:	7018      	strb	r0, [r3, #0]
 8003524:	e7f6      	b.n	8003514 <__io_putchar+0x14>
	...

08003528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003528:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_MspInit+0x34>)
 800352c:	2100      	movs	r1, #0
 800352e:	9100      	str	r1, [sp, #0]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
 8003538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800353e:	9200      	str	r2, [sp, #0]
 8003540:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	9101      	str	r1, [sp, #4]
 8003544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003546:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003556:	b002      	add	sp, #8
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003560:	b510      	push	{r4, lr}
 8003562:	4604      	mov	r4, r0
 8003564:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003566:	2214      	movs	r2, #20
 8003568:	2100      	movs	r1, #0
 800356a:	a803      	add	r0, sp, #12
 800356c:	f000 fa7b 	bl	8003a66 <memset>
  if(hadc->Instance==ADC1)
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_ADC_MspInit+0x6c>)
 8003574:	429a      	cmp	r2, r3
 8003576:	d126      	bne.n	80035c6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003578:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800357c:	2400      	movs	r4, #0
 800357e:	9401      	str	r4, [sp, #4]
 8003580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = Audio_Input_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 8003582:	4813      	ldr	r0, [pc, #76]	; (80035d0 <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
 800358a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800358c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003590:	9201      	str	r2, [sp, #4]
 8003592:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003594:	9402      	str	r4, [sp, #8]
 8003596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	631a      	str	r2, [r3, #48]	; 0x30
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a6:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 80035aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 80035b2:	f7fd ffc1 	bl	8001538 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035b6:	2012      	movs	r0, #18
 80035b8:	4622      	mov	r2, r4
 80035ba:	4621      	mov	r1, r4
 80035bc:	f7fd ff68 	bl	8001490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035c0:	2012      	movs	r0, #18
 80035c2:	f7fd ff97 	bl	80014f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035c6:	b008      	add	sp, #32
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	40012000 	.word	0x40012000
 80035d0:	40020000 	.word	0x40020000

080035d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035d4:	b530      	push	{r4, r5, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035da:	2214      	movs	r2, #20
 80035dc:	2100      	movs	r1, #0
 80035de:	a803      	add	r0, sp, #12
 80035e0:	f000 fa41 	bl	8003a66 <memset>
  if(hi2c->Instance==I2C1)
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_I2C_MspInit+0x64>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d122      	bne.n	8003632 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ec:	4c13      	ldr	r4, [pc, #76]	; (800363c <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ee:	4814      	ldr	r0, [pc, #80]	; (8003640 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f0:	2500      	movs	r5, #0
 80035f2:	9501      	str	r5, [sp, #4]
 80035f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	6323      	str	r3, [r4, #48]	; 0x30
 80035fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003606:	f44f 7210 	mov.w	r2, #576	; 0x240
 800360a:	2312      	movs	r3, #18
 800360c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003610:	2301      	movs	r3, #1
 8003612:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003614:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003616:	2304      	movs	r3, #4
 8003618:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361a:	f7fd ff8d 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800361e:	9502      	str	r5, [sp, #8]
 8003620:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003622:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003626:	6423      	str	r3, [r4, #64]	; 0x40
 8003628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	9302      	str	r3, [sp, #8]
 8003630:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003632:	b009      	add	sp, #36	; 0x24
 8003634:	bd30      	pop	{r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	40005400 	.word	0x40005400
 800363c:	40023800 	.word	0x40023800
 8003640:	40020400 	.word	0x40020400

08003644 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003646:	4604      	mov	r4, r0
 8003648:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364a:	2214      	movs	r2, #20
 800364c:	2100      	movs	r1, #0
 800364e:	a803      	add	r0, sp, #12
 8003650:	f000 fa09 	bl	8003a66 <memset>
  if(hi2s->Instance==SPI3)
 8003654:	6822      	ldr	r2, [r4, #0]
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_I2S_MspInit+0x9c>)
 8003658:	429a      	cmp	r2, r3
 800365a:	d13f      	bne.n	80036dc <HAL_I2S_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800365c:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8003660:	2400      	movs	r4, #0
 8003662:	9400      	str	r4, [sp, #0]
 8003664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003666:	481f      	ldr	r0, [pc, #124]	; (80036e4 <HAL_I2S_MspInit+0xa0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
 800366e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003670:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003674:	9200      	str	r2, [sp, #0]
 8003676:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003678:	9401      	str	r4, [sp, #4]
 800367a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
 8003682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003684:	f002 0201 	and.w	r2, r2, #1
 8003688:	9201      	str	r2, [sp, #4]
 800368a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800368c:	9402      	str	r4, [sp, #8]
 800368e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003690:	f042 0204 	orr.w	r2, r2, #4
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2702      	movs	r7, #2
 80036a2:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036a4:	2601      	movs	r6, #1
 80036a6:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80036a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036ae:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f7fd ff41 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80036b6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ba:	480b      	ldr	r0, [pc, #44]	; (80036e8 <HAL_I2S_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036bc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036be:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80036c4:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c8:	f7fd ff36 	bl	8001538 <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80036cc:	2033      	movs	r0, #51	; 0x33
 80036ce:	4622      	mov	r2, r4
 80036d0:	4621      	mov	r1, r4
 80036d2:	f7fd fedd 	bl	8001490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80036d6:	2033      	movs	r0, #51	; 0x33
 80036d8:	f7fd ff0c 	bl	80014f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80036dc:	b009      	add	sp, #36	; 0x24
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e0:	40003c00 	.word	0x40003c00
 80036e4:	40020000 	.word	0x40020000
 80036e8:	40020800 	.word	0x40020800

080036ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80036ec:	6803      	ldr	r3, [r0, #0]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80036f2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80036f4:	d10b      	bne.n	800370e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_TIM_Base_MspInit+0x28>)
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800370e:	b002      	add	sp, #8
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800

08003718 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003718:	4770      	bx	lr

0800371a <PendSV_Handler>:
 800371a:	4770      	bx	lr

0800371c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800371c:	f7fd bc48 	b.w	8000fb0 <HAL_IncTick>

08003720 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003720:	4801      	ldr	r0, [pc, #4]	; (8003728 <ADC_IRQHandler+0x8>)
 8003722:	f7fd bd7c 	b.w	800121e <HAL_ADC_IRQHandler>
 8003726:	bf00      	nop
 8003728:	20000380 	.word	0x20000380

0800372c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800372c:	4801      	ldr	r0, [pc, #4]	; (8003734 <SPI3_IRQHandler+0x8>)
 800372e:	f7fe bca6 	b.w	800207e <HAL_I2S_IRQHandler>
 8003732:	bf00      	nop
 8003734:	2000041c 	.word	0x2000041c

08003738 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	460d      	mov	r5, r1
 800373c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373e:	460e      	mov	r6, r1
 8003740:	1b73      	subs	r3, r6, r5
 8003742:	429c      	cmp	r4, r3
 8003744:	dc01      	bgt.n	800374a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8003746:	4620      	mov	r0, r4
 8003748:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800374a:	f3af 8000 	nop.w
 800374e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	e7f5      	b.n	8003740 <_read+0x8>

08003754 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	460d      	mov	r5, r1
 8003758:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375a:	460e      	mov	r6, r1
 800375c:	1b73      	subs	r3, r6, r5
 800375e:	429c      	cmp	r4, r3
 8003760:	dc01      	bgt.n	8003766 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003762:	4620      	mov	r0, r4
 8003764:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003766:	f816 0b01 	ldrb.w	r0, [r6], #1
 800376a:	f7ff fec9 	bl	8003500 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376e:	e7f5      	b.n	800375c <_write+0x8>

08003770 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003770:	4a0a      	ldr	r2, [pc, #40]	; (800379c <_sbrk+0x2c>)
 8003772:	6811      	ldr	r1, [r2, #0]
{
 8003774:	b508      	push	{r3, lr}
 8003776:	4603      	mov	r3, r0
	if (heap_end == 0)
 8003778:	b909      	cbnz	r1, 800377e <_sbrk+0xe>
		heap_end = &end;
 800377a:	4909      	ldr	r1, [pc, #36]	; (80037a0 <_sbrk+0x30>)
 800377c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800377e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003780:	4669      	mov	r1, sp
 8003782:	4403      	add	r3, r0
 8003784:	428b      	cmp	r3, r1
 8003786:	d906      	bls.n	8003796 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003788:	f000 f9bc 	bl	8003b04 <__errno>
 800378c:	230c      	movs	r3, #12
 800378e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003794:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003796:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8003798:	e7fc      	b.n	8003794 <_sbrk+0x24>
 800379a:	bf00      	nop
 800379c:	200054b0 	.word	0x200054b0
 80037a0:	20005600 	.word	0x20005600

080037a4 <_close>:

int _close(int file)
{
	return -1;
}
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	4770      	bx	lr

080037aa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80037aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ae:	604b      	str	r3, [r1, #4]
	return 0;
}
 80037b0:	2000      	movs	r0, #0
 80037b2:	4770      	bx	lr

080037b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80037b4:	2001      	movs	r0, #1
 80037b6:	4770      	bx	lr

080037b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80037b8:	2000      	movs	r0, #0
 80037ba:	4770      	bx	lr

080037bc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037bc:	490f      	ldr	r1, [pc, #60]	; (80037fc <SystemInit+0x40>)
 80037be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80037c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <SystemInit+0x44>)
 80037cc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037ce:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80037d6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80037de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <SystemInit+0x48>)
 80037e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80037f0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037f6:	608b      	str	r3, [r1, #8]
#endif
}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00
 8003800:	40023800 	.word	0x40023800
 8003804:	24003010 	.word	0x24003010

08003808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800380c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800380e:	e003      	b.n	8003818 <LoopCopyDataInit>

08003810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003816:	3104      	adds	r1, #4

08003818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003818:	480b      	ldr	r0, [pc, #44]	; (8003848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800381c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800381e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003820:	d3f6      	bcc.n	8003810 <CopyDataInit>
  ldr  r2, =_sbss
 8003822:	4a0b      	ldr	r2, [pc, #44]	; (8003850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003824:	e002      	b.n	800382c <LoopFillZerobss>

08003826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003828:	f842 3b04 	str.w	r3, [r2], #4

0800382c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800382e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003830:	d3f9      	bcc.n	8003826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003832:	f7ff ffc3 	bl	80037bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003836:	f000 f96b 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800383a:	f7ff fced 	bl	8003218 <main>
  bx  lr    
 800383e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003840:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003844:	08005c30 	.word	0x08005c30
  ldr  r0, =_sdata
 8003848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800384c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003850:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003854:	20005600 	.word	0x20005600

08003858 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003858:	e7fe      	b.n	8003858 <BusFault_Handler>
	...

0800385c <std>:
 800385c:	2300      	movs	r3, #0
 800385e:	b510      	push	{r4, lr}
 8003860:	4604      	mov	r4, r0
 8003862:	e9c0 3300 	strd	r3, r3, [r0]
 8003866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800386a:	6083      	str	r3, [r0, #8]
 800386c:	8181      	strh	r1, [r0, #12]
 800386e:	6643      	str	r3, [r0, #100]	; 0x64
 8003870:	81c2      	strh	r2, [r0, #14]
 8003872:	6183      	str	r3, [r0, #24]
 8003874:	4619      	mov	r1, r3
 8003876:	2208      	movs	r2, #8
 8003878:	305c      	adds	r0, #92	; 0x5c
 800387a:	f000 f8f4 	bl	8003a66 <memset>
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <std+0x38>)
 8003880:	6263      	str	r3, [r4, #36]	; 0x24
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <std+0x3c>)
 8003884:	62a3      	str	r3, [r4, #40]	; 0x28
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <std+0x40>)
 8003888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <std+0x44>)
 800388c:	6224      	str	r4, [r4, #32]
 800388e:	6323      	str	r3, [r4, #48]	; 0x30
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	080039e1 	.word	0x080039e1
 8003898:	08003a03 	.word	0x08003a03
 800389c:	08003a3b 	.word	0x08003a3b
 80038a0:	08003a5f 	.word	0x08003a5f

080038a4 <stdio_exit_handler>:
 80038a4:	4a02      	ldr	r2, [pc, #8]	; (80038b0 <stdio_exit_handler+0xc>)
 80038a6:	4903      	ldr	r1, [pc, #12]	; (80038b4 <stdio_exit_handler+0x10>)
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <stdio_exit_handler+0x14>)
 80038aa:	f000 b869 	b.w	8003980 <_fwalk_sglue>
 80038ae:	bf00      	nop
 80038b0:	20000010 	.word	0x20000010
 80038b4:	08004401 	.word	0x08004401
 80038b8:	2000001c 	.word	0x2000001c

080038bc <cleanup_stdio>:
 80038bc:	6841      	ldr	r1, [r0, #4]
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <cleanup_stdio+0x34>)
 80038c0:	4299      	cmp	r1, r3
 80038c2:	b510      	push	{r4, lr}
 80038c4:	4604      	mov	r4, r0
 80038c6:	d001      	beq.n	80038cc <cleanup_stdio+0x10>
 80038c8:	f000 fd9a 	bl	8004400 <_fflush_r>
 80038cc:	68a1      	ldr	r1, [r4, #8]
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <cleanup_stdio+0x38>)
 80038d0:	4299      	cmp	r1, r3
 80038d2:	d002      	beq.n	80038da <cleanup_stdio+0x1e>
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 fd93 	bl	8004400 <_fflush_r>
 80038da:	68e1      	ldr	r1, [r4, #12]
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <cleanup_stdio+0x3c>)
 80038de:	4299      	cmp	r1, r3
 80038e0:	d004      	beq.n	80038ec <cleanup_stdio+0x30>
 80038e2:	4620      	mov	r0, r4
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e8:	f000 bd8a 	b.w	8004400 <_fflush_r>
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	bf00      	nop
 80038f0:	200054b4 	.word	0x200054b4
 80038f4:	2000551c 	.word	0x2000551c
 80038f8:	20005584 	.word	0x20005584

080038fc <global_stdio_init.part.0>:
 80038fc:	b510      	push	{r4, lr}
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <global_stdio_init.part.0+0x30>)
 8003900:	4c0b      	ldr	r4, [pc, #44]	; (8003930 <global_stdio_init.part.0+0x34>)
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <global_stdio_init.part.0+0x38>)
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	4620      	mov	r0, r4
 8003908:	2200      	movs	r2, #0
 800390a:	2104      	movs	r1, #4
 800390c:	f7ff ffa6 	bl	800385c <std>
 8003910:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003914:	2201      	movs	r2, #1
 8003916:	2109      	movs	r1, #9
 8003918:	f7ff ffa0 	bl	800385c <std>
 800391c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003920:	2202      	movs	r2, #2
 8003922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003926:	2112      	movs	r1, #18
 8003928:	f7ff bf98 	b.w	800385c <std>
 800392c:	200055ec 	.word	0x200055ec
 8003930:	200054b4 	.word	0x200054b4
 8003934:	080038a5 	.word	0x080038a5

08003938 <__sfp_lock_acquire>:
 8003938:	4801      	ldr	r0, [pc, #4]	; (8003940 <__sfp_lock_acquire+0x8>)
 800393a:	f000 b90d 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 800393e:	bf00      	nop
 8003940:	200055f5 	.word	0x200055f5

08003944 <__sfp_lock_release>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__sfp_lock_release+0x8>)
 8003946:	f000 b908 	b.w	8003b5a <__retarget_lock_release_recursive>
 800394a:	bf00      	nop
 800394c:	200055f5 	.word	0x200055f5

08003950 <__sinit>:
 8003950:	b510      	push	{r4, lr}
 8003952:	4604      	mov	r4, r0
 8003954:	f7ff fff0 	bl	8003938 <__sfp_lock_acquire>
 8003958:	6a23      	ldr	r3, [r4, #32]
 800395a:	b11b      	cbz	r3, 8003964 <__sinit+0x14>
 800395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003960:	f7ff bff0 	b.w	8003944 <__sfp_lock_release>
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <__sinit+0x28>)
 8003966:	6223      	str	r3, [r4, #32]
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <__sinit+0x2c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f5      	bne.n	800395c <__sinit+0xc>
 8003970:	f7ff ffc4 	bl	80038fc <global_stdio_init.part.0>
 8003974:	e7f2      	b.n	800395c <__sinit+0xc>
 8003976:	bf00      	nop
 8003978:	080038bd 	.word	0x080038bd
 800397c:	200055ec 	.word	0x200055ec

08003980 <_fwalk_sglue>:
 8003980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003984:	4607      	mov	r7, r0
 8003986:	4688      	mov	r8, r1
 8003988:	4614      	mov	r4, r2
 800398a:	2600      	movs	r6, #0
 800398c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003990:	f1b9 0901 	subs.w	r9, r9, #1
 8003994:	d505      	bpl.n	80039a2 <_fwalk_sglue+0x22>
 8003996:	6824      	ldr	r4, [r4, #0]
 8003998:	2c00      	cmp	r4, #0
 800399a:	d1f7      	bne.n	800398c <_fwalk_sglue+0xc>
 800399c:	4630      	mov	r0, r6
 800399e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d907      	bls.n	80039b8 <_fwalk_sglue+0x38>
 80039a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039ac:	3301      	adds	r3, #1
 80039ae:	d003      	beq.n	80039b8 <_fwalk_sglue+0x38>
 80039b0:	4629      	mov	r1, r5
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	4306      	orrs	r6, r0
 80039b8:	3568      	adds	r5, #104	; 0x68
 80039ba:	e7e9      	b.n	8003990 <_fwalk_sglue+0x10>

080039bc <iprintf>:
 80039bc:	b40f      	push	{r0, r1, r2, r3}
 80039be:	b507      	push	{r0, r1, r2, lr}
 80039c0:	4906      	ldr	r1, [pc, #24]	; (80039dc <iprintf+0x20>)
 80039c2:	ab04      	add	r3, sp, #16
 80039c4:	6808      	ldr	r0, [r1, #0]
 80039c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ca:	6881      	ldr	r1, [r0, #8]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	f000 f9e7 	bl	8003da0 <_vfiprintf_r>
 80039d2:	b003      	add	sp, #12
 80039d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80039d8:	b004      	add	sp, #16
 80039da:	4770      	bx	lr
 80039dc:	20000068 	.word	0x20000068

080039e0 <__sread>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	460c      	mov	r4, r1
 80039e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e8:	f000 f868 	bl	8003abc <_read_r>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	bfab      	itete	ge
 80039f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039f2:	89a3      	ldrhlt	r3, [r4, #12]
 80039f4:	181b      	addge	r3, r3, r0
 80039f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039fa:	bfac      	ite	ge
 80039fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039fe:	81a3      	strhlt	r3, [r4, #12]
 8003a00:	bd10      	pop	{r4, pc}

08003a02 <__swrite>:
 8003a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	461f      	mov	r7, r3
 8003a08:	898b      	ldrh	r3, [r1, #12]
 8003a0a:	05db      	lsls	r3, r3, #23
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	4616      	mov	r6, r2
 8003a12:	d505      	bpl.n	8003a20 <__swrite+0x1e>
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	2302      	movs	r3, #2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f000 f83c 	bl	8003a98 <_lseek_r>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	4632      	mov	r2, r6
 8003a2e:	463b      	mov	r3, r7
 8003a30:	4628      	mov	r0, r5
 8003a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a36:	f000 b853 	b.w	8003ae0 <_write_r>

08003a3a <__sseek>:
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a42:	f000 f829 	bl	8003a98 <_lseek_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	bf15      	itete	ne
 8003a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a56:	81a3      	strheq	r3, [r4, #12]
 8003a58:	bf18      	it	ne
 8003a5a:	81a3      	strhne	r3, [r4, #12]
 8003a5c:	bd10      	pop	{r4, pc}

08003a5e <__sclose>:
 8003a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a62:	f000 b809 	b.w	8003a78 <_close_r>

08003a66 <memset>:
 8003a66:	4402      	add	r2, r0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d100      	bne.n	8003a70 <memset+0xa>
 8003a6e:	4770      	bx	lr
 8003a70:	f803 1b01 	strb.w	r1, [r3], #1
 8003a74:	e7f9      	b.n	8003a6a <memset+0x4>
	...

08003a78 <_close_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d06      	ldr	r5, [pc, #24]	; (8003a94 <_close_r+0x1c>)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7ff fe8e 	bl	80037a4 <_close>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_close_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_close_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	200055f0 	.word	0x200055f0

08003a98 <_lseek_r>:
 8003a98:	b538      	push	{r3, r4, r5, lr}
 8003a9a:	4d07      	ldr	r5, [pc, #28]	; (8003ab8 <_lseek_r+0x20>)
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	602a      	str	r2, [r5, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f7ff fe86 	bl	80037b8 <_lseek>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d102      	bne.n	8003ab6 <_lseek_r+0x1e>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	b103      	cbz	r3, 8003ab6 <_lseek_r+0x1e>
 8003ab4:	6023      	str	r3, [r4, #0]
 8003ab6:	bd38      	pop	{r3, r4, r5, pc}
 8003ab8:	200055f0 	.word	0x200055f0

08003abc <_read_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d07      	ldr	r5, [pc, #28]	; (8003adc <_read_r+0x20>)
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	4608      	mov	r0, r1
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	602a      	str	r2, [r5, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f7ff fe34 	bl	8003738 <_read>
 8003ad0:	1c43      	adds	r3, r0, #1
 8003ad2:	d102      	bne.n	8003ada <_read_r+0x1e>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	b103      	cbz	r3, 8003ada <_read_r+0x1e>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	bd38      	pop	{r3, r4, r5, pc}
 8003adc:	200055f0 	.word	0x200055f0

08003ae0 <_write_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4d07      	ldr	r5, [pc, #28]	; (8003b00 <_write_r+0x20>)
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	4611      	mov	r1, r2
 8003aea:	2200      	movs	r2, #0
 8003aec:	602a      	str	r2, [r5, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7ff fe30 	bl	8003754 <_write>
 8003af4:	1c43      	adds	r3, r0, #1
 8003af6:	d102      	bne.n	8003afe <_write_r+0x1e>
 8003af8:	682b      	ldr	r3, [r5, #0]
 8003afa:	b103      	cbz	r3, 8003afe <_write_r+0x1e>
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	bd38      	pop	{r3, r4, r5, pc}
 8003b00:	200055f0 	.word	0x200055f0

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	20000068 	.word	0x20000068

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4d0d      	ldr	r5, [pc, #52]	; (8003b48 <__libc_init_array+0x38>)
 8003b14:	4c0d      	ldr	r4, [pc, #52]	; (8003b4c <__libc_init_array+0x3c>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	4d0b      	ldr	r5, [pc, #44]	; (8003b50 <__libc_init_array+0x40>)
 8003b22:	4c0c      	ldr	r4, [pc, #48]	; (8003b54 <__libc_init_array+0x44>)
 8003b24:	f001 ff5c 	bl	80059e0 <_init>
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08005c28 	.word	0x08005c28
 8003b4c:	08005c28 	.word	0x08005c28
 8003b50:	08005c28 	.word	0x08005c28
 8003b54:	08005c2c 	.word	0x08005c2c

08003b58 <__retarget_lock_acquire_recursive>:
 8003b58:	4770      	bx	lr

08003b5a <__retarget_lock_release_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <_free_r>:
 8003b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b5e:	2900      	cmp	r1, #0
 8003b60:	d044      	beq.n	8003bec <_free_r+0x90>
 8003b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b66:	9001      	str	r0, [sp, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b6e:	bfb8      	it	lt
 8003b70:	18e4      	addlt	r4, r4, r3
 8003b72:	f000 f8df 	bl	8003d34 <__malloc_lock>
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <_free_r+0x94>)
 8003b78:	9801      	ldr	r0, [sp, #4]
 8003b7a:	6813      	ldr	r3, [r2, #0]
 8003b7c:	b933      	cbnz	r3, 8003b8c <_free_r+0x30>
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	6014      	str	r4, [r2, #0]
 8003b82:	b003      	add	sp, #12
 8003b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b88:	f000 b8da 	b.w	8003d40 <__malloc_unlock>
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d908      	bls.n	8003ba2 <_free_r+0x46>
 8003b90:	6825      	ldr	r5, [r4, #0]
 8003b92:	1961      	adds	r1, r4, r5
 8003b94:	428b      	cmp	r3, r1
 8003b96:	bf01      	itttt	eq
 8003b98:	6819      	ldreq	r1, [r3, #0]
 8003b9a:	685b      	ldreq	r3, [r3, #4]
 8003b9c:	1949      	addeq	r1, r1, r5
 8003b9e:	6021      	streq	r1, [r4, #0]
 8003ba0:	e7ed      	b.n	8003b7e <_free_r+0x22>
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	b10b      	cbz	r3, 8003bac <_free_r+0x50>
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d9fa      	bls.n	8003ba2 <_free_r+0x46>
 8003bac:	6811      	ldr	r1, [r2, #0]
 8003bae:	1855      	adds	r5, r2, r1
 8003bb0:	42a5      	cmp	r5, r4
 8003bb2:	d10b      	bne.n	8003bcc <_free_r+0x70>
 8003bb4:	6824      	ldr	r4, [r4, #0]
 8003bb6:	4421      	add	r1, r4
 8003bb8:	1854      	adds	r4, r2, r1
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	6011      	str	r1, [r2, #0]
 8003bbe:	d1e0      	bne.n	8003b82 <_free_r+0x26>
 8003bc0:	681c      	ldr	r4, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	6053      	str	r3, [r2, #4]
 8003bc6:	440c      	add	r4, r1
 8003bc8:	6014      	str	r4, [r2, #0]
 8003bca:	e7da      	b.n	8003b82 <_free_r+0x26>
 8003bcc:	d902      	bls.n	8003bd4 <_free_r+0x78>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	6003      	str	r3, [r0, #0]
 8003bd2:	e7d6      	b.n	8003b82 <_free_r+0x26>
 8003bd4:	6825      	ldr	r5, [r4, #0]
 8003bd6:	1961      	adds	r1, r4, r5
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	bf04      	itt	eq
 8003bdc:	6819      	ldreq	r1, [r3, #0]
 8003bde:	685b      	ldreq	r3, [r3, #4]
 8003be0:	6063      	str	r3, [r4, #4]
 8003be2:	bf04      	itt	eq
 8003be4:	1949      	addeq	r1, r1, r5
 8003be6:	6021      	streq	r1, [r4, #0]
 8003be8:	6054      	str	r4, [r2, #4]
 8003bea:	e7ca      	b.n	8003b82 <_free_r+0x26>
 8003bec:	b003      	add	sp, #12
 8003bee:	bd30      	pop	{r4, r5, pc}
 8003bf0:	200055f8 	.word	0x200055f8

08003bf4 <sbrk_aligned>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0e      	ldr	r6, [pc, #56]	; (8003c30 <sbrk_aligned+0x3c>)
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	6831      	ldr	r1, [r6, #0]
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	b911      	cbnz	r1, 8003c06 <sbrk_aligned+0x12>
 8003c00:	f000 fcbc 	bl	800457c <_sbrk_r>
 8003c04:	6030      	str	r0, [r6, #0]
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 fcb7 	bl	800457c <_sbrk_r>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d00a      	beq.n	8003c28 <sbrk_aligned+0x34>
 8003c12:	1cc4      	adds	r4, r0, #3
 8003c14:	f024 0403 	bic.w	r4, r4, #3
 8003c18:	42a0      	cmp	r0, r4
 8003c1a:	d007      	beq.n	8003c2c <sbrk_aligned+0x38>
 8003c1c:	1a21      	subs	r1, r4, r0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 fcac 	bl	800457c <_sbrk_r>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d101      	bne.n	8003c2c <sbrk_aligned+0x38>
 8003c28:	f04f 34ff 	mov.w	r4, #4294967295
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	200055fc 	.word	0x200055fc

08003c34 <_malloc_r>:
 8003c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c38:	1ccd      	adds	r5, r1, #3
 8003c3a:	f025 0503 	bic.w	r5, r5, #3
 8003c3e:	3508      	adds	r5, #8
 8003c40:	2d0c      	cmp	r5, #12
 8003c42:	bf38      	it	cc
 8003c44:	250c      	movcc	r5, #12
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	4607      	mov	r7, r0
 8003c4a:	db01      	blt.n	8003c50 <_malloc_r+0x1c>
 8003c4c:	42a9      	cmp	r1, r5
 8003c4e:	d905      	bls.n	8003c5c <_malloc_r+0x28>
 8003c50:	230c      	movs	r3, #12
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	2600      	movs	r6, #0
 8003c56:	4630      	mov	r0, r6
 8003c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d30 <_malloc_r+0xfc>
 8003c60:	f000 f868 	bl	8003d34 <__malloc_lock>
 8003c64:	f8d8 3000 	ldr.w	r3, [r8]
 8003c68:	461c      	mov	r4, r3
 8003c6a:	bb5c      	cbnz	r4, 8003cc4 <_malloc_r+0x90>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f7ff ffc0 	bl	8003bf4 <sbrk_aligned>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	4604      	mov	r4, r0
 8003c78:	d155      	bne.n	8003d26 <_malloc_r+0xf2>
 8003c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8003c7e:	4626      	mov	r6, r4
 8003c80:	2e00      	cmp	r6, #0
 8003c82:	d145      	bne.n	8003d10 <_malloc_r+0xdc>
 8003c84:	2c00      	cmp	r4, #0
 8003c86:	d048      	beq.n	8003d1a <_malloc_r+0xe6>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	eb04 0903 	add.w	r9, r4, r3
 8003c92:	f000 fc73 	bl	800457c <_sbrk_r>
 8003c96:	4581      	cmp	r9, r0
 8003c98:	d13f      	bne.n	8003d1a <_malloc_r+0xe6>
 8003c9a:	6821      	ldr	r1, [r4, #0]
 8003c9c:	1a6d      	subs	r5, r5, r1
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	f7ff ffa7 	bl	8003bf4 <sbrk_aligned>
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d037      	beq.n	8003d1a <_malloc_r+0xe6>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	442b      	add	r3, r5
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d038      	beq.n	8003d2a <_malloc_r+0xf6>
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	42a2      	cmp	r2, r4
 8003cbc:	d12b      	bne.n	8003d16 <_malloc_r+0xe2>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e00f      	b.n	8003ce4 <_malloc_r+0xb0>
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	1b52      	subs	r2, r2, r5
 8003cc8:	d41f      	bmi.n	8003d0a <_malloc_r+0xd6>
 8003cca:	2a0b      	cmp	r2, #11
 8003ccc:	d917      	bls.n	8003cfe <_malloc_r+0xca>
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	6025      	str	r5, [r4, #0]
 8003cd4:	bf18      	it	ne
 8003cd6:	6059      	strne	r1, [r3, #4]
 8003cd8:	6863      	ldr	r3, [r4, #4]
 8003cda:	bf08      	it	eq
 8003cdc:	f8c8 1000 	streq.w	r1, [r8]
 8003ce0:	5162      	str	r2, [r4, r5]
 8003ce2:	604b      	str	r3, [r1, #4]
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f104 060b 	add.w	r6, r4, #11
 8003cea:	f000 f829 	bl	8003d40 <__malloc_unlock>
 8003cee:	f026 0607 	bic.w	r6, r6, #7
 8003cf2:	1d23      	adds	r3, r4, #4
 8003cf4:	1af2      	subs	r2, r6, r3
 8003cf6:	d0ae      	beq.n	8003c56 <_malloc_r+0x22>
 8003cf8:	1b9b      	subs	r3, r3, r6
 8003cfa:	50a3      	str	r3, [r4, r2]
 8003cfc:	e7ab      	b.n	8003c56 <_malloc_r+0x22>
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	6862      	ldr	r2, [r4, #4]
 8003d02:	d1dd      	bne.n	8003cc0 <_malloc_r+0x8c>
 8003d04:	f8c8 2000 	str.w	r2, [r8]
 8003d08:	e7ec      	b.n	8003ce4 <_malloc_r+0xb0>
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	6864      	ldr	r4, [r4, #4]
 8003d0e:	e7ac      	b.n	8003c6a <_malloc_r+0x36>
 8003d10:	4634      	mov	r4, r6
 8003d12:	6876      	ldr	r6, [r6, #4]
 8003d14:	e7b4      	b.n	8003c80 <_malloc_r+0x4c>
 8003d16:	4613      	mov	r3, r2
 8003d18:	e7cc      	b.n	8003cb4 <_malloc_r+0x80>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f000 f80e 	bl	8003d40 <__malloc_unlock>
 8003d24:	e797      	b.n	8003c56 <_malloc_r+0x22>
 8003d26:	6025      	str	r5, [r4, #0]
 8003d28:	e7dc      	b.n	8003ce4 <_malloc_r+0xb0>
 8003d2a:	605b      	str	r3, [r3, #4]
 8003d2c:	deff      	udf	#255	; 0xff
 8003d2e:	bf00      	nop
 8003d30:	200055f8 	.word	0x200055f8

08003d34 <__malloc_lock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_lock+0x8>)
 8003d36:	f7ff bf0f 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	200055f4 	.word	0x200055f4

08003d40 <__malloc_unlock>:
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <__malloc_unlock+0x8>)
 8003d42:	f7ff bf0a 	b.w	8003b5a <__retarget_lock_release_recursive>
 8003d46:	bf00      	nop
 8003d48:	200055f4 	.word	0x200055f4

08003d4c <__sfputc_r>:
 8003d4c:	6893      	ldr	r3, [r2, #8]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	b410      	push	{r4}
 8003d54:	6093      	str	r3, [r2, #8]
 8003d56:	da08      	bge.n	8003d6a <__sfputc_r+0x1e>
 8003d58:	6994      	ldr	r4, [r2, #24]
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	db01      	blt.n	8003d62 <__sfputc_r+0x16>
 8003d5e:	290a      	cmp	r1, #10
 8003d60:	d103      	bne.n	8003d6a <__sfputc_r+0x1e>
 8003d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d66:	f000 bb73 	b.w	8004450 <__swbuf_r>
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	1c58      	adds	r0, r3, #1
 8003d6e:	6010      	str	r0, [r2, #0]
 8003d70:	7019      	strb	r1, [r3, #0]
 8003d72:	4608      	mov	r0, r1
 8003d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <__sfputs_r>:
 8003d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7c:	4606      	mov	r6, r0
 8003d7e:	460f      	mov	r7, r1
 8003d80:	4614      	mov	r4, r2
 8003d82:	18d5      	adds	r5, r2, r3
 8003d84:	42ac      	cmp	r4, r5
 8003d86:	d101      	bne.n	8003d8c <__sfputs_r+0x12>
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e007      	b.n	8003d9c <__sfputs_r+0x22>
 8003d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d90:	463a      	mov	r2, r7
 8003d92:	4630      	mov	r0, r6
 8003d94:	f7ff ffda 	bl	8003d4c <__sfputc_r>
 8003d98:	1c43      	adds	r3, r0, #1
 8003d9a:	d1f3      	bne.n	8003d84 <__sfputs_r+0xa>
 8003d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003da0 <_vfiprintf_r>:
 8003da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da4:	460d      	mov	r5, r1
 8003da6:	b09d      	sub	sp, #116	; 0x74
 8003da8:	4614      	mov	r4, r2
 8003daa:	4698      	mov	r8, r3
 8003dac:	4606      	mov	r6, r0
 8003dae:	b118      	cbz	r0, 8003db8 <_vfiprintf_r+0x18>
 8003db0:	6a03      	ldr	r3, [r0, #32]
 8003db2:	b90b      	cbnz	r3, 8003db8 <_vfiprintf_r+0x18>
 8003db4:	f7ff fdcc 	bl	8003950 <__sinit>
 8003db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003dba:	07d9      	lsls	r1, r3, #31
 8003dbc:	d405      	bmi.n	8003dca <_vfiprintf_r+0x2a>
 8003dbe:	89ab      	ldrh	r3, [r5, #12]
 8003dc0:	059a      	lsls	r2, r3, #22
 8003dc2:	d402      	bmi.n	8003dca <_vfiprintf_r+0x2a>
 8003dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dc6:	f7ff fec7 	bl	8003b58 <__retarget_lock_acquire_recursive>
 8003dca:	89ab      	ldrh	r3, [r5, #12]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	d501      	bpl.n	8003dd4 <_vfiprintf_r+0x34>
 8003dd0:	692b      	ldr	r3, [r5, #16]
 8003dd2:	b99b      	cbnz	r3, 8003dfc <_vfiprintf_r+0x5c>
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	f000 fb78 	bl	80044cc <__swsetup_r>
 8003ddc:	b170      	cbz	r0, 8003dfc <_vfiprintf_r+0x5c>
 8003dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003de0:	07dc      	lsls	r4, r3, #31
 8003de2:	d504      	bpl.n	8003dee <_vfiprintf_r+0x4e>
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	b01d      	add	sp, #116	; 0x74
 8003dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dee:	89ab      	ldrh	r3, [r5, #12]
 8003df0:	0598      	lsls	r0, r3, #22
 8003df2:	d4f7      	bmi.n	8003de4 <_vfiprintf_r+0x44>
 8003df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003df6:	f7ff feb0 	bl	8003b5a <__retarget_lock_release_recursive>
 8003dfa:	e7f3      	b.n	8003de4 <_vfiprintf_r+0x44>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8003e00:	2320      	movs	r3, #32
 8003e02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e0a:	2330      	movs	r3, #48	; 0x30
 8003e0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003fc0 <_vfiprintf_r+0x220>
 8003e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e14:	f04f 0901 	mov.w	r9, #1
 8003e18:	4623      	mov	r3, r4
 8003e1a:	469a      	mov	sl, r3
 8003e1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e20:	b10a      	cbz	r2, 8003e26 <_vfiprintf_r+0x86>
 8003e22:	2a25      	cmp	r2, #37	; 0x25
 8003e24:	d1f9      	bne.n	8003e1a <_vfiprintf_r+0x7a>
 8003e26:	ebba 0b04 	subs.w	fp, sl, r4
 8003e2a:	d00b      	beq.n	8003e44 <_vfiprintf_r+0xa4>
 8003e2c:	465b      	mov	r3, fp
 8003e2e:	4622      	mov	r2, r4
 8003e30:	4629      	mov	r1, r5
 8003e32:	4630      	mov	r0, r6
 8003e34:	f7ff ffa1 	bl	8003d7a <__sfputs_r>
 8003e38:	3001      	adds	r0, #1
 8003e3a:	f000 80a9 	beq.w	8003f90 <_vfiprintf_r+0x1f0>
 8003e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e40:	445a      	add	r2, fp
 8003e42:	9209      	str	r2, [sp, #36]	; 0x24
 8003e44:	f89a 3000 	ldrb.w	r3, [sl]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a1 	beq.w	8003f90 <_vfiprintf_r+0x1f0>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f04f 32ff 	mov.w	r2, #4294967295
 8003e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e58:	f10a 0a01 	add.w	sl, sl, #1
 8003e5c:	9304      	str	r3, [sp, #16]
 8003e5e:	9307      	str	r3, [sp, #28]
 8003e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e64:	931a      	str	r3, [sp, #104]	; 0x68
 8003e66:	4654      	mov	r4, sl
 8003e68:	2205      	movs	r2, #5
 8003e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e6e:	4854      	ldr	r0, [pc, #336]	; (8003fc0 <_vfiprintf_r+0x220>)
 8003e70:	f7fc f9ae 	bl	80001d0 <memchr>
 8003e74:	9a04      	ldr	r2, [sp, #16]
 8003e76:	b9d8      	cbnz	r0, 8003eb0 <_vfiprintf_r+0x110>
 8003e78:	06d1      	lsls	r1, r2, #27
 8003e7a:	bf44      	itt	mi
 8003e7c:	2320      	movmi	r3, #32
 8003e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e82:	0713      	lsls	r3, r2, #28
 8003e84:	bf44      	itt	mi
 8003e86:	232b      	movmi	r3, #43	; 0x2b
 8003e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e8c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e90:	2b2a      	cmp	r3, #42	; 0x2a
 8003e92:	d015      	beq.n	8003ec0 <_vfiprintf_r+0x120>
 8003e94:	9a07      	ldr	r2, [sp, #28]
 8003e96:	4654      	mov	r4, sl
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f04f 0c0a 	mov.w	ip, #10
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ea4:	3b30      	subs	r3, #48	; 0x30
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	d94d      	bls.n	8003f46 <_vfiprintf_r+0x1a6>
 8003eaa:	b1b0      	cbz	r0, 8003eda <_vfiprintf_r+0x13a>
 8003eac:	9207      	str	r2, [sp, #28]
 8003eae:	e014      	b.n	8003eda <_vfiprintf_r+0x13a>
 8003eb0:	eba0 0308 	sub.w	r3, r0, r8
 8003eb4:	fa09 f303 	lsl.w	r3, r9, r3
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	46a2      	mov	sl, r4
 8003ebe:	e7d2      	b.n	8003e66 <_vfiprintf_r+0xc6>
 8003ec0:	9b03      	ldr	r3, [sp, #12]
 8003ec2:	1d19      	adds	r1, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	9103      	str	r1, [sp, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bfbb      	ittet	lt
 8003ecc:	425b      	neglt	r3, r3
 8003ece:	f042 0202 	orrlt.w	r2, r2, #2
 8003ed2:	9307      	strge	r3, [sp, #28]
 8003ed4:	9307      	strlt	r3, [sp, #28]
 8003ed6:	bfb8      	it	lt
 8003ed8:	9204      	strlt	r2, [sp, #16]
 8003eda:	7823      	ldrb	r3, [r4, #0]
 8003edc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ede:	d10c      	bne.n	8003efa <_vfiprintf_r+0x15a>
 8003ee0:	7863      	ldrb	r3, [r4, #1]
 8003ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee4:	d134      	bne.n	8003f50 <_vfiprintf_r+0x1b0>
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	1d1a      	adds	r2, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9203      	str	r2, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfb8      	it	lt
 8003ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ef6:	3402      	adds	r4, #2
 8003ef8:	9305      	str	r3, [sp, #20]
 8003efa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003fd0 <_vfiprintf_r+0x230>
 8003efe:	7821      	ldrb	r1, [r4, #0]
 8003f00:	2203      	movs	r2, #3
 8003f02:	4650      	mov	r0, sl
 8003f04:	f7fc f964 	bl	80001d0 <memchr>
 8003f08:	b138      	cbz	r0, 8003f1a <_vfiprintf_r+0x17a>
 8003f0a:	9b04      	ldr	r3, [sp, #16]
 8003f0c:	eba0 000a 	sub.w	r0, r0, sl
 8003f10:	2240      	movs	r2, #64	; 0x40
 8003f12:	4082      	lsls	r2, r0
 8003f14:	4313      	orrs	r3, r2
 8003f16:	3401      	adds	r4, #1
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1e:	4829      	ldr	r0, [pc, #164]	; (8003fc4 <_vfiprintf_r+0x224>)
 8003f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f24:	2206      	movs	r2, #6
 8003f26:	f7fc f953 	bl	80001d0 <memchr>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d03f      	beq.n	8003fae <_vfiprintf_r+0x20e>
 8003f2e:	4b26      	ldr	r3, [pc, #152]	; (8003fc8 <_vfiprintf_r+0x228>)
 8003f30:	bb1b      	cbnz	r3, 8003f7a <_vfiprintf_r+0x1da>
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	3307      	adds	r3, #7
 8003f36:	f023 0307 	bic.w	r3, r3, #7
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	9303      	str	r3, [sp, #12]
 8003f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f40:	443b      	add	r3, r7
 8003f42:	9309      	str	r3, [sp, #36]	; 0x24
 8003f44:	e768      	b.n	8003e18 <_vfiprintf_r+0x78>
 8003f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	e7a6      	b.n	8003e9e <_vfiprintf_r+0xfe>
 8003f50:	2300      	movs	r3, #0
 8003f52:	3401      	adds	r4, #1
 8003f54:	9305      	str	r3, [sp, #20]
 8003f56:	4619      	mov	r1, r3
 8003f58:	f04f 0c0a 	mov.w	ip, #10
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f62:	3a30      	subs	r2, #48	; 0x30
 8003f64:	2a09      	cmp	r2, #9
 8003f66:	d903      	bls.n	8003f70 <_vfiprintf_r+0x1d0>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0c6      	beq.n	8003efa <_vfiprintf_r+0x15a>
 8003f6c:	9105      	str	r1, [sp, #20]
 8003f6e:	e7c4      	b.n	8003efa <_vfiprintf_r+0x15a>
 8003f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f74:	4604      	mov	r4, r0
 8003f76:	2301      	movs	r3, #1
 8003f78:	e7f0      	b.n	8003f5c <_vfiprintf_r+0x1bc>
 8003f7a:	ab03      	add	r3, sp, #12
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	462a      	mov	r2, r5
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <_vfiprintf_r+0x22c>)
 8003f82:	a904      	add	r1, sp, #16
 8003f84:	4630      	mov	r0, r6
 8003f86:	f3af 8000 	nop.w
 8003f8a:	4607      	mov	r7, r0
 8003f8c:	1c78      	adds	r0, r7, #1
 8003f8e:	d1d6      	bne.n	8003f3e <_vfiprintf_r+0x19e>
 8003f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f92:	07d9      	lsls	r1, r3, #31
 8003f94:	d405      	bmi.n	8003fa2 <_vfiprintf_r+0x202>
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	059a      	lsls	r2, r3, #22
 8003f9a:	d402      	bmi.n	8003fa2 <_vfiprintf_r+0x202>
 8003f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f9e:	f7ff fddc 	bl	8003b5a <__retarget_lock_release_recursive>
 8003fa2:	89ab      	ldrh	r3, [r5, #12]
 8003fa4:	065b      	lsls	r3, r3, #25
 8003fa6:	f53f af1d 	bmi.w	8003de4 <_vfiprintf_r+0x44>
 8003faa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fac:	e71c      	b.n	8003de8 <_vfiprintf_r+0x48>
 8003fae:	ab03      	add	r3, sp, #12
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	462a      	mov	r2, r5
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <_vfiprintf_r+0x22c>)
 8003fb6:	a904      	add	r1, sp, #16
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f879 	bl	80040b0 <_printf_i>
 8003fbe:	e7e4      	b.n	8003f8a <_vfiprintf_r+0x1ea>
 8003fc0:	08005a14 	.word	0x08005a14
 8003fc4:	08005a1e 	.word	0x08005a1e
 8003fc8:	00000000 	.word	0x00000000
 8003fcc:	08003d7b 	.word	0x08003d7b
 8003fd0:	08005a1a 	.word	0x08005a1a

08003fd4 <_printf_common>:
 8003fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	4616      	mov	r6, r2
 8003fda:	4699      	mov	r9, r3
 8003fdc:	688a      	ldr	r2, [r1, #8]
 8003fde:	690b      	ldr	r3, [r1, #16]
 8003fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bfb8      	it	lt
 8003fe8:	4613      	movlt	r3, r2
 8003fea:	6033      	str	r3, [r6, #0]
 8003fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	b10a      	cbz	r2, 8003ffa <_printf_common+0x26>
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	6033      	str	r3, [r6, #0]
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	0699      	lsls	r1, r3, #26
 8003ffe:	bf42      	ittt	mi
 8004000:	6833      	ldrmi	r3, [r6, #0]
 8004002:	3302      	addmi	r3, #2
 8004004:	6033      	strmi	r3, [r6, #0]
 8004006:	6825      	ldr	r5, [r4, #0]
 8004008:	f015 0506 	ands.w	r5, r5, #6
 800400c:	d106      	bne.n	800401c <_printf_common+0x48>
 800400e:	f104 0a19 	add.w	sl, r4, #25
 8004012:	68e3      	ldr	r3, [r4, #12]
 8004014:	6832      	ldr	r2, [r6, #0]
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	42ab      	cmp	r3, r5
 800401a:	dc26      	bgt.n	800406a <_printf_common+0x96>
 800401c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004020:	1e13      	subs	r3, r2, #0
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	bf18      	it	ne
 8004026:	2301      	movne	r3, #1
 8004028:	0692      	lsls	r2, r2, #26
 800402a:	d42b      	bmi.n	8004084 <_printf_common+0xb0>
 800402c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004030:	4649      	mov	r1, r9
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d01e      	beq.n	8004078 <_printf_common+0xa4>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	6922      	ldr	r2, [r4, #16]
 800403e:	f003 0306 	and.w	r3, r3, #6
 8004042:	2b04      	cmp	r3, #4
 8004044:	bf02      	ittt	eq
 8004046:	68e5      	ldreq	r5, [r4, #12]
 8004048:	6833      	ldreq	r3, [r6, #0]
 800404a:	1aed      	subeq	r5, r5, r3
 800404c:	68a3      	ldr	r3, [r4, #8]
 800404e:	bf0c      	ite	eq
 8004050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004054:	2500      	movne	r5, #0
 8004056:	4293      	cmp	r3, r2
 8004058:	bfc4      	itt	gt
 800405a:	1a9b      	subgt	r3, r3, r2
 800405c:	18ed      	addgt	r5, r5, r3
 800405e:	2600      	movs	r6, #0
 8004060:	341a      	adds	r4, #26
 8004062:	42b5      	cmp	r5, r6
 8004064:	d11a      	bne.n	800409c <_printf_common+0xc8>
 8004066:	2000      	movs	r0, #0
 8004068:	e008      	b.n	800407c <_printf_common+0xa8>
 800406a:	2301      	movs	r3, #1
 800406c:	4652      	mov	r2, sl
 800406e:	4649      	mov	r1, r9
 8004070:	4638      	mov	r0, r7
 8004072:	47c0      	blx	r8
 8004074:	3001      	adds	r0, #1
 8004076:	d103      	bne.n	8004080 <_printf_common+0xac>
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004080:	3501      	adds	r5, #1
 8004082:	e7c6      	b.n	8004012 <_printf_common+0x3e>
 8004084:	18e1      	adds	r1, r4, r3
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	2030      	movs	r0, #48	; 0x30
 800408a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800408e:	4422      	add	r2, r4
 8004090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004098:	3302      	adds	r3, #2
 800409a:	e7c7      	b.n	800402c <_printf_common+0x58>
 800409c:	2301      	movs	r3, #1
 800409e:	4622      	mov	r2, r4
 80040a0:	4649      	mov	r1, r9
 80040a2:	4638      	mov	r0, r7
 80040a4:	47c0      	blx	r8
 80040a6:	3001      	adds	r0, #1
 80040a8:	d0e6      	beq.n	8004078 <_printf_common+0xa4>
 80040aa:	3601      	adds	r6, #1
 80040ac:	e7d9      	b.n	8004062 <_printf_common+0x8e>
	...

080040b0 <_printf_i>:
 80040b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b4:	7e0f      	ldrb	r7, [r1, #24]
 80040b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040b8:	2f78      	cmp	r7, #120	; 0x78
 80040ba:	4691      	mov	r9, r2
 80040bc:	4680      	mov	r8, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	469a      	mov	sl, r3
 80040c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040c6:	d807      	bhi.n	80040d8 <_printf_i+0x28>
 80040c8:	2f62      	cmp	r7, #98	; 0x62
 80040ca:	d80a      	bhi.n	80040e2 <_printf_i+0x32>
 80040cc:	2f00      	cmp	r7, #0
 80040ce:	f000 80d4 	beq.w	800427a <_printf_i+0x1ca>
 80040d2:	2f58      	cmp	r7, #88	; 0x58
 80040d4:	f000 80c0 	beq.w	8004258 <_printf_i+0x1a8>
 80040d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040e0:	e03a      	b.n	8004158 <_printf_i+0xa8>
 80040e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040e6:	2b15      	cmp	r3, #21
 80040e8:	d8f6      	bhi.n	80040d8 <_printf_i+0x28>
 80040ea:	a101      	add	r1, pc, #4	; (adr r1, 80040f0 <_printf_i+0x40>)
 80040ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040f0:	08004149 	.word	0x08004149
 80040f4:	0800415d 	.word	0x0800415d
 80040f8:	080040d9 	.word	0x080040d9
 80040fc:	080040d9 	.word	0x080040d9
 8004100:	080040d9 	.word	0x080040d9
 8004104:	080040d9 	.word	0x080040d9
 8004108:	0800415d 	.word	0x0800415d
 800410c:	080040d9 	.word	0x080040d9
 8004110:	080040d9 	.word	0x080040d9
 8004114:	080040d9 	.word	0x080040d9
 8004118:	080040d9 	.word	0x080040d9
 800411c:	08004261 	.word	0x08004261
 8004120:	08004189 	.word	0x08004189
 8004124:	0800421b 	.word	0x0800421b
 8004128:	080040d9 	.word	0x080040d9
 800412c:	080040d9 	.word	0x080040d9
 8004130:	08004283 	.word	0x08004283
 8004134:	080040d9 	.word	0x080040d9
 8004138:	08004189 	.word	0x08004189
 800413c:	080040d9 	.word	0x080040d9
 8004140:	080040d9 	.word	0x080040d9
 8004144:	08004223 	.word	0x08004223
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	602a      	str	r2, [r5, #0]
 8004150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004158:	2301      	movs	r3, #1
 800415a:	e09f      	b.n	800429c <_printf_i+0x1ec>
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	0607      	lsls	r7, r0, #24
 8004162:	f103 0104 	add.w	r1, r3, #4
 8004166:	6029      	str	r1, [r5, #0]
 8004168:	d501      	bpl.n	800416e <_printf_i+0xbe>
 800416a:	681e      	ldr	r6, [r3, #0]
 800416c:	e003      	b.n	8004176 <_printf_i+0xc6>
 800416e:	0646      	lsls	r6, r0, #25
 8004170:	d5fb      	bpl.n	800416a <_printf_i+0xba>
 8004172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004176:	2e00      	cmp	r6, #0
 8004178:	da03      	bge.n	8004182 <_printf_i+0xd2>
 800417a:	232d      	movs	r3, #45	; 0x2d
 800417c:	4276      	negs	r6, r6
 800417e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004182:	485a      	ldr	r0, [pc, #360]	; (80042ec <_printf_i+0x23c>)
 8004184:	230a      	movs	r3, #10
 8004186:	e012      	b.n	80041ae <_printf_i+0xfe>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	1d19      	adds	r1, r3, #4
 800418e:	6029      	str	r1, [r5, #0]
 8004190:	0605      	lsls	r5, r0, #24
 8004192:	d501      	bpl.n	8004198 <_printf_i+0xe8>
 8004194:	681e      	ldr	r6, [r3, #0]
 8004196:	e002      	b.n	800419e <_printf_i+0xee>
 8004198:	0641      	lsls	r1, r0, #25
 800419a:	d5fb      	bpl.n	8004194 <_printf_i+0xe4>
 800419c:	881e      	ldrh	r6, [r3, #0]
 800419e:	4853      	ldr	r0, [pc, #332]	; (80042ec <_printf_i+0x23c>)
 80041a0:	2f6f      	cmp	r7, #111	; 0x6f
 80041a2:	bf0c      	ite	eq
 80041a4:	2308      	moveq	r3, #8
 80041a6:	230a      	movne	r3, #10
 80041a8:	2100      	movs	r1, #0
 80041aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ae:	6865      	ldr	r5, [r4, #4]
 80041b0:	60a5      	str	r5, [r4, #8]
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	bfa2      	ittt	ge
 80041b6:	6821      	ldrge	r1, [r4, #0]
 80041b8:	f021 0104 	bicge.w	r1, r1, #4
 80041bc:	6021      	strge	r1, [r4, #0]
 80041be:	b90e      	cbnz	r6, 80041c4 <_printf_i+0x114>
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	d04b      	beq.n	800425c <_printf_i+0x1ac>
 80041c4:	4615      	mov	r5, r2
 80041c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80041ca:	fb03 6711 	mls	r7, r3, r1, r6
 80041ce:	5dc7      	ldrb	r7, [r0, r7]
 80041d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041d4:	4637      	mov	r7, r6
 80041d6:	42bb      	cmp	r3, r7
 80041d8:	460e      	mov	r6, r1
 80041da:	d9f4      	bls.n	80041c6 <_printf_i+0x116>
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d10b      	bne.n	80041f8 <_printf_i+0x148>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	07de      	lsls	r6, r3, #31
 80041e4:	d508      	bpl.n	80041f8 <_printf_i+0x148>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	6861      	ldr	r1, [r4, #4]
 80041ea:	4299      	cmp	r1, r3
 80041ec:	bfde      	ittt	le
 80041ee:	2330      	movle	r3, #48	; 0x30
 80041f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041f8:	1b52      	subs	r2, r2, r5
 80041fa:	6122      	str	r2, [r4, #16]
 80041fc:	f8cd a000 	str.w	sl, [sp]
 8004200:	464b      	mov	r3, r9
 8004202:	aa03      	add	r2, sp, #12
 8004204:	4621      	mov	r1, r4
 8004206:	4640      	mov	r0, r8
 8004208:	f7ff fee4 	bl	8003fd4 <_printf_common>
 800420c:	3001      	adds	r0, #1
 800420e:	d14a      	bne.n	80042a6 <_printf_i+0x1f6>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	b004      	add	sp, #16
 8004216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	f043 0320 	orr.w	r3, r3, #32
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	4833      	ldr	r0, [pc, #204]	; (80042f0 <_printf_i+0x240>)
 8004224:	2778      	movs	r7, #120	; 0x78
 8004226:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	6829      	ldr	r1, [r5, #0]
 800422e:	061f      	lsls	r7, r3, #24
 8004230:	f851 6b04 	ldr.w	r6, [r1], #4
 8004234:	d402      	bmi.n	800423c <_printf_i+0x18c>
 8004236:	065f      	lsls	r7, r3, #25
 8004238:	bf48      	it	mi
 800423a:	b2b6      	uxthmi	r6, r6
 800423c:	07df      	lsls	r7, r3, #31
 800423e:	bf48      	it	mi
 8004240:	f043 0320 	orrmi.w	r3, r3, #32
 8004244:	6029      	str	r1, [r5, #0]
 8004246:	bf48      	it	mi
 8004248:	6023      	strmi	r3, [r4, #0]
 800424a:	b91e      	cbnz	r6, 8004254 <_printf_i+0x1a4>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f023 0320 	bic.w	r3, r3, #32
 8004252:	6023      	str	r3, [r4, #0]
 8004254:	2310      	movs	r3, #16
 8004256:	e7a7      	b.n	80041a8 <_printf_i+0xf8>
 8004258:	4824      	ldr	r0, [pc, #144]	; (80042ec <_printf_i+0x23c>)
 800425a:	e7e4      	b.n	8004226 <_printf_i+0x176>
 800425c:	4615      	mov	r5, r2
 800425e:	e7bd      	b.n	80041dc <_printf_i+0x12c>
 8004260:	682b      	ldr	r3, [r5, #0]
 8004262:	6826      	ldr	r6, [r4, #0]
 8004264:	6961      	ldr	r1, [r4, #20]
 8004266:	1d18      	adds	r0, r3, #4
 8004268:	6028      	str	r0, [r5, #0]
 800426a:	0635      	lsls	r5, r6, #24
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	d501      	bpl.n	8004274 <_printf_i+0x1c4>
 8004270:	6019      	str	r1, [r3, #0]
 8004272:	e002      	b.n	800427a <_printf_i+0x1ca>
 8004274:	0670      	lsls	r0, r6, #25
 8004276:	d5fb      	bpl.n	8004270 <_printf_i+0x1c0>
 8004278:	8019      	strh	r1, [r3, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	4615      	mov	r5, r2
 8004280:	e7bc      	b.n	80041fc <_printf_i+0x14c>
 8004282:	682b      	ldr	r3, [r5, #0]
 8004284:	1d1a      	adds	r2, r3, #4
 8004286:	602a      	str	r2, [r5, #0]
 8004288:	681d      	ldr	r5, [r3, #0]
 800428a:	6862      	ldr	r2, [r4, #4]
 800428c:	2100      	movs	r1, #0
 800428e:	4628      	mov	r0, r5
 8004290:	f7fb ff9e 	bl	80001d0 <memchr>
 8004294:	b108      	cbz	r0, 800429a <_printf_i+0x1ea>
 8004296:	1b40      	subs	r0, r0, r5
 8004298:	6060      	str	r0, [r4, #4]
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	2300      	movs	r3, #0
 80042a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a4:	e7aa      	b.n	80041fc <_printf_i+0x14c>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	462a      	mov	r2, r5
 80042aa:	4649      	mov	r1, r9
 80042ac:	4640      	mov	r0, r8
 80042ae:	47d0      	blx	sl
 80042b0:	3001      	adds	r0, #1
 80042b2:	d0ad      	beq.n	8004210 <_printf_i+0x160>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d413      	bmi.n	80042e2 <_printf_i+0x232>
 80042ba:	68e0      	ldr	r0, [r4, #12]
 80042bc:	9b03      	ldr	r3, [sp, #12]
 80042be:	4298      	cmp	r0, r3
 80042c0:	bfb8      	it	lt
 80042c2:	4618      	movlt	r0, r3
 80042c4:	e7a6      	b.n	8004214 <_printf_i+0x164>
 80042c6:	2301      	movs	r3, #1
 80042c8:	4632      	mov	r2, r6
 80042ca:	4649      	mov	r1, r9
 80042cc:	4640      	mov	r0, r8
 80042ce:	47d0      	blx	sl
 80042d0:	3001      	adds	r0, #1
 80042d2:	d09d      	beq.n	8004210 <_printf_i+0x160>
 80042d4:	3501      	adds	r5, #1
 80042d6:	68e3      	ldr	r3, [r4, #12]
 80042d8:	9903      	ldr	r1, [sp, #12]
 80042da:	1a5b      	subs	r3, r3, r1
 80042dc:	42ab      	cmp	r3, r5
 80042de:	dcf2      	bgt.n	80042c6 <_printf_i+0x216>
 80042e0:	e7eb      	b.n	80042ba <_printf_i+0x20a>
 80042e2:	2500      	movs	r5, #0
 80042e4:	f104 0619 	add.w	r6, r4, #25
 80042e8:	e7f5      	b.n	80042d6 <_printf_i+0x226>
 80042ea:	bf00      	nop
 80042ec:	08005a25 	.word	0x08005a25
 80042f0:	08005a36 	.word	0x08005a36

080042f4 <__sflush_r>:
 80042f4:	898a      	ldrh	r2, [r1, #12]
 80042f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fa:	4605      	mov	r5, r0
 80042fc:	0710      	lsls	r0, r2, #28
 80042fe:	460c      	mov	r4, r1
 8004300:	d458      	bmi.n	80043b4 <__sflush_r+0xc0>
 8004302:	684b      	ldr	r3, [r1, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	dc05      	bgt.n	8004314 <__sflush_r+0x20>
 8004308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	dc02      	bgt.n	8004314 <__sflush_r+0x20>
 800430e:	2000      	movs	r0, #0
 8004310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004316:	2e00      	cmp	r6, #0
 8004318:	d0f9      	beq.n	800430e <__sflush_r+0x1a>
 800431a:	2300      	movs	r3, #0
 800431c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004320:	682f      	ldr	r7, [r5, #0]
 8004322:	6a21      	ldr	r1, [r4, #32]
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	d032      	beq.n	800438e <__sflush_r+0x9a>
 8004328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	075a      	lsls	r2, r3, #29
 800432e:	d505      	bpl.n	800433c <__sflush_r+0x48>
 8004330:	6863      	ldr	r3, [r4, #4]
 8004332:	1ac0      	subs	r0, r0, r3
 8004334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004336:	b10b      	cbz	r3, 800433c <__sflush_r+0x48>
 8004338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800433a:	1ac0      	subs	r0, r0, r3
 800433c:	2300      	movs	r3, #0
 800433e:	4602      	mov	r2, r0
 8004340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004342:	6a21      	ldr	r1, [r4, #32]
 8004344:	4628      	mov	r0, r5
 8004346:	47b0      	blx	r6
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	d106      	bne.n	800435c <__sflush_r+0x68>
 800434e:	6829      	ldr	r1, [r5, #0]
 8004350:	291d      	cmp	r1, #29
 8004352:	d82b      	bhi.n	80043ac <__sflush_r+0xb8>
 8004354:	4a29      	ldr	r2, [pc, #164]	; (80043fc <__sflush_r+0x108>)
 8004356:	410a      	asrs	r2, r1
 8004358:	07d6      	lsls	r6, r2, #31
 800435a:	d427      	bmi.n	80043ac <__sflush_r+0xb8>
 800435c:	2200      	movs	r2, #0
 800435e:	6062      	str	r2, [r4, #4]
 8004360:	04d9      	lsls	r1, r3, #19
 8004362:	6922      	ldr	r2, [r4, #16]
 8004364:	6022      	str	r2, [r4, #0]
 8004366:	d504      	bpl.n	8004372 <__sflush_r+0x7e>
 8004368:	1c42      	adds	r2, r0, #1
 800436a:	d101      	bne.n	8004370 <__sflush_r+0x7c>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b903      	cbnz	r3, 8004372 <__sflush_r+0x7e>
 8004370:	6560      	str	r0, [r4, #84]	; 0x54
 8004372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004374:	602f      	str	r7, [r5, #0]
 8004376:	2900      	cmp	r1, #0
 8004378:	d0c9      	beq.n	800430e <__sflush_r+0x1a>
 800437a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800437e:	4299      	cmp	r1, r3
 8004380:	d002      	beq.n	8004388 <__sflush_r+0x94>
 8004382:	4628      	mov	r0, r5
 8004384:	f7ff fbea 	bl	8003b5c <_free_r>
 8004388:	2000      	movs	r0, #0
 800438a:	6360      	str	r0, [r4, #52]	; 0x34
 800438c:	e7c0      	b.n	8004310 <__sflush_r+0x1c>
 800438e:	2301      	movs	r3, #1
 8004390:	4628      	mov	r0, r5
 8004392:	47b0      	blx	r6
 8004394:	1c41      	adds	r1, r0, #1
 8004396:	d1c8      	bne.n	800432a <__sflush_r+0x36>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0c5      	beq.n	800432a <__sflush_r+0x36>
 800439e:	2b1d      	cmp	r3, #29
 80043a0:	d001      	beq.n	80043a6 <__sflush_r+0xb2>
 80043a2:	2b16      	cmp	r3, #22
 80043a4:	d101      	bne.n	80043aa <__sflush_r+0xb6>
 80043a6:	602f      	str	r7, [r5, #0]
 80043a8:	e7b1      	b.n	800430e <__sflush_r+0x1a>
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	e7ad      	b.n	8004310 <__sflush_r+0x1c>
 80043b4:	690f      	ldr	r7, [r1, #16]
 80043b6:	2f00      	cmp	r7, #0
 80043b8:	d0a9      	beq.n	800430e <__sflush_r+0x1a>
 80043ba:	0793      	lsls	r3, r2, #30
 80043bc:	680e      	ldr	r6, [r1, #0]
 80043be:	bf08      	it	eq
 80043c0:	694b      	ldreq	r3, [r1, #20]
 80043c2:	600f      	str	r7, [r1, #0]
 80043c4:	bf18      	it	ne
 80043c6:	2300      	movne	r3, #0
 80043c8:	eba6 0807 	sub.w	r8, r6, r7
 80043cc:	608b      	str	r3, [r1, #8]
 80043ce:	f1b8 0f00 	cmp.w	r8, #0
 80043d2:	dd9c      	ble.n	800430e <__sflush_r+0x1a>
 80043d4:	6a21      	ldr	r1, [r4, #32]
 80043d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043d8:	4643      	mov	r3, r8
 80043da:	463a      	mov	r2, r7
 80043dc:	4628      	mov	r0, r5
 80043de:	47b0      	blx	r6
 80043e0:	2800      	cmp	r0, #0
 80043e2:	dc06      	bgt.n	80043f2 <__sflush_r+0xfe>
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ea:	81a3      	strh	r3, [r4, #12]
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	e78e      	b.n	8004310 <__sflush_r+0x1c>
 80043f2:	4407      	add	r7, r0
 80043f4:	eba8 0800 	sub.w	r8, r8, r0
 80043f8:	e7e9      	b.n	80043ce <__sflush_r+0xda>
 80043fa:	bf00      	nop
 80043fc:	dfbffffe 	.word	0xdfbffffe

08004400 <_fflush_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	690b      	ldr	r3, [r1, #16]
 8004404:	4605      	mov	r5, r0
 8004406:	460c      	mov	r4, r1
 8004408:	b913      	cbnz	r3, 8004410 <_fflush_r+0x10>
 800440a:	2500      	movs	r5, #0
 800440c:	4628      	mov	r0, r5
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	b118      	cbz	r0, 800441a <_fflush_r+0x1a>
 8004412:	6a03      	ldr	r3, [r0, #32]
 8004414:	b90b      	cbnz	r3, 800441a <_fflush_r+0x1a>
 8004416:	f7ff fa9b 	bl	8003950 <__sinit>
 800441a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f3      	beq.n	800440a <_fflush_r+0xa>
 8004422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004424:	07d0      	lsls	r0, r2, #31
 8004426:	d404      	bmi.n	8004432 <_fflush_r+0x32>
 8004428:	0599      	lsls	r1, r3, #22
 800442a:	d402      	bmi.n	8004432 <_fflush_r+0x32>
 800442c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800442e:	f7ff fb93 	bl	8003b58 <__retarget_lock_acquire_recursive>
 8004432:	4628      	mov	r0, r5
 8004434:	4621      	mov	r1, r4
 8004436:	f7ff ff5d 	bl	80042f4 <__sflush_r>
 800443a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800443c:	07da      	lsls	r2, r3, #31
 800443e:	4605      	mov	r5, r0
 8004440:	d4e4      	bmi.n	800440c <_fflush_r+0xc>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	059b      	lsls	r3, r3, #22
 8004446:	d4e1      	bmi.n	800440c <_fflush_r+0xc>
 8004448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800444a:	f7ff fb86 	bl	8003b5a <__retarget_lock_release_recursive>
 800444e:	e7dd      	b.n	800440c <_fflush_r+0xc>

08004450 <__swbuf_r>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	460e      	mov	r6, r1
 8004454:	4614      	mov	r4, r2
 8004456:	4605      	mov	r5, r0
 8004458:	b118      	cbz	r0, 8004462 <__swbuf_r+0x12>
 800445a:	6a03      	ldr	r3, [r0, #32]
 800445c:	b90b      	cbnz	r3, 8004462 <__swbuf_r+0x12>
 800445e:	f7ff fa77 	bl	8003950 <__sinit>
 8004462:	69a3      	ldr	r3, [r4, #24]
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	071a      	lsls	r2, r3, #28
 800446a:	d525      	bpl.n	80044b8 <__swbuf_r+0x68>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	b31b      	cbz	r3, 80044b8 <__swbuf_r+0x68>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	6922      	ldr	r2, [r4, #16]
 8004474:	1a98      	subs	r0, r3, r2
 8004476:	6963      	ldr	r3, [r4, #20]
 8004478:	b2f6      	uxtb	r6, r6
 800447a:	4283      	cmp	r3, r0
 800447c:	4637      	mov	r7, r6
 800447e:	dc04      	bgt.n	800448a <__swbuf_r+0x3a>
 8004480:	4621      	mov	r1, r4
 8004482:	4628      	mov	r0, r5
 8004484:	f7ff ffbc 	bl	8004400 <_fflush_r>
 8004488:	b9e0      	cbnz	r0, 80044c4 <__swbuf_r+0x74>
 800448a:	68a3      	ldr	r3, [r4, #8]
 800448c:	3b01      	subs	r3, #1
 800448e:	60a3      	str	r3, [r4, #8]
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	701e      	strb	r6, [r3, #0]
 8004498:	6962      	ldr	r2, [r4, #20]
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	429a      	cmp	r2, r3
 800449e:	d004      	beq.n	80044aa <__swbuf_r+0x5a>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	07db      	lsls	r3, r3, #31
 80044a4:	d506      	bpl.n	80044b4 <__swbuf_r+0x64>
 80044a6:	2e0a      	cmp	r6, #10
 80044a8:	d104      	bne.n	80044b4 <__swbuf_r+0x64>
 80044aa:	4621      	mov	r1, r4
 80044ac:	4628      	mov	r0, r5
 80044ae:	f7ff ffa7 	bl	8004400 <_fflush_r>
 80044b2:	b938      	cbnz	r0, 80044c4 <__swbuf_r+0x74>
 80044b4:	4638      	mov	r0, r7
 80044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f806 	bl	80044cc <__swsetup_r>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d0d5      	beq.n	8004470 <__swbuf_r+0x20>
 80044c4:	f04f 37ff 	mov.w	r7, #4294967295
 80044c8:	e7f4      	b.n	80044b4 <__swbuf_r+0x64>
	...

080044cc <__swsetup_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <__swsetup_r+0xac>)
 80044d0:	4605      	mov	r5, r0
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	460c      	mov	r4, r1
 80044d6:	b118      	cbz	r0, 80044e0 <__swsetup_r+0x14>
 80044d8:	6a03      	ldr	r3, [r0, #32]
 80044da:	b90b      	cbnz	r3, 80044e0 <__swsetup_r+0x14>
 80044dc:	f7ff fa38 	bl	8003950 <__sinit>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044e6:	0718      	lsls	r0, r3, #28
 80044e8:	d422      	bmi.n	8004530 <__swsetup_r+0x64>
 80044ea:	06d9      	lsls	r1, r3, #27
 80044ec:	d407      	bmi.n	80044fe <__swsetup_r+0x32>
 80044ee:	2309      	movs	r3, #9
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	e034      	b.n	8004568 <__swsetup_r+0x9c>
 80044fe:	0758      	lsls	r0, r3, #29
 8004500:	d512      	bpl.n	8004528 <__swsetup_r+0x5c>
 8004502:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004504:	b141      	cbz	r1, 8004518 <__swsetup_r+0x4c>
 8004506:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800450a:	4299      	cmp	r1, r3
 800450c:	d002      	beq.n	8004514 <__swsetup_r+0x48>
 800450e:	4628      	mov	r0, r5
 8004510:	f7ff fb24 	bl	8003b5c <_free_r>
 8004514:	2300      	movs	r3, #0
 8004516:	6363      	str	r3, [r4, #52]	; 0x34
 8004518:	89a3      	ldrh	r3, [r4, #12]
 800451a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	2300      	movs	r3, #0
 8004522:	6063      	str	r3, [r4, #4]
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	f043 0308 	orr.w	r3, r3, #8
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	b94b      	cbnz	r3, 8004548 <__swsetup_r+0x7c>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800453a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453e:	d003      	beq.n	8004548 <__swsetup_r+0x7c>
 8004540:	4621      	mov	r1, r4
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f850 	bl	80045e8 <__smakebuf_r>
 8004548:	89a0      	ldrh	r0, [r4, #12]
 800454a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800454e:	f010 0301 	ands.w	r3, r0, #1
 8004552:	d00a      	beq.n	800456a <__swsetup_r+0x9e>
 8004554:	2300      	movs	r3, #0
 8004556:	60a3      	str	r3, [r4, #8]
 8004558:	6963      	ldr	r3, [r4, #20]
 800455a:	425b      	negs	r3, r3
 800455c:	61a3      	str	r3, [r4, #24]
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	b943      	cbnz	r3, 8004574 <__swsetup_r+0xa8>
 8004562:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004566:	d1c4      	bne.n	80044f2 <__swsetup_r+0x26>
 8004568:	bd38      	pop	{r3, r4, r5, pc}
 800456a:	0781      	lsls	r1, r0, #30
 800456c:	bf58      	it	pl
 800456e:	6963      	ldrpl	r3, [r4, #20]
 8004570:	60a3      	str	r3, [r4, #8]
 8004572:	e7f4      	b.n	800455e <__swsetup_r+0x92>
 8004574:	2000      	movs	r0, #0
 8004576:	e7f7      	b.n	8004568 <__swsetup_r+0x9c>
 8004578:	20000068 	.word	0x20000068

0800457c <_sbrk_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	; (8004598 <_sbrk_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7ff f8f2 	bl	8003770 <_sbrk>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_sbrk_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_sbrk_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	200055f0 	.word	0x200055f0

0800459c <__swhatbuf_r>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	460c      	mov	r4, r1
 80045a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a4:	2900      	cmp	r1, #0
 80045a6:	b096      	sub	sp, #88	; 0x58
 80045a8:	4615      	mov	r5, r2
 80045aa:	461e      	mov	r6, r3
 80045ac:	da0d      	bge.n	80045ca <__swhatbuf_r+0x2e>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045b4:	f04f 0100 	mov.w	r1, #0
 80045b8:	bf0c      	ite	eq
 80045ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80045be:	2340      	movne	r3, #64	; 0x40
 80045c0:	2000      	movs	r0, #0
 80045c2:	6031      	str	r1, [r6, #0]
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	b016      	add	sp, #88	; 0x58
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	466a      	mov	r2, sp
 80045cc:	f000 f848 	bl	8004660 <_fstat_r>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	dbec      	blt.n	80045ae <__swhatbuf_r+0x12>
 80045d4:	9901      	ldr	r1, [sp, #4]
 80045d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80045da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80045de:	4259      	negs	r1, r3
 80045e0:	4159      	adcs	r1, r3
 80045e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e6:	e7eb      	b.n	80045c0 <__swhatbuf_r+0x24>

080045e8 <__smakebuf_r>:
 80045e8:	898b      	ldrh	r3, [r1, #12]
 80045ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045ec:	079d      	lsls	r5, r3, #30
 80045ee:	4606      	mov	r6, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	d507      	bpl.n	8004604 <__smakebuf_r+0x1c>
 80045f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	2301      	movs	r3, #1
 80045fe:	6163      	str	r3, [r4, #20]
 8004600:	b002      	add	sp, #8
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	ab01      	add	r3, sp, #4
 8004606:	466a      	mov	r2, sp
 8004608:	f7ff ffc8 	bl	800459c <__swhatbuf_r>
 800460c:	9900      	ldr	r1, [sp, #0]
 800460e:	4605      	mov	r5, r0
 8004610:	4630      	mov	r0, r6
 8004612:	f7ff fb0f 	bl	8003c34 <_malloc_r>
 8004616:	b948      	cbnz	r0, 800462c <__smakebuf_r+0x44>
 8004618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461c:	059a      	lsls	r2, r3, #22
 800461e:	d4ef      	bmi.n	8004600 <__smakebuf_r+0x18>
 8004620:	f023 0303 	bic.w	r3, r3, #3
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	81a3      	strh	r3, [r4, #12]
 800462a:	e7e3      	b.n	80045f4 <__smakebuf_r+0xc>
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	6020      	str	r0, [r4, #0]
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	81a3      	strh	r3, [r4, #12]
 8004636:	9b00      	ldr	r3, [sp, #0]
 8004638:	6163      	str	r3, [r4, #20]
 800463a:	9b01      	ldr	r3, [sp, #4]
 800463c:	6120      	str	r0, [r4, #16]
 800463e:	b15b      	cbz	r3, 8004658 <__smakebuf_r+0x70>
 8004640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004644:	4630      	mov	r0, r6
 8004646:	f000 f81d 	bl	8004684 <_isatty_r>
 800464a:	b128      	cbz	r0, 8004658 <__smakebuf_r+0x70>
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f023 0303 	bic.w	r3, r3, #3
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	431d      	orrs	r5, r3
 800465c:	81a5      	strh	r5, [r4, #12]
 800465e:	e7cf      	b.n	8004600 <__smakebuf_r+0x18>

08004660 <_fstat_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d07      	ldr	r5, [pc, #28]	; (8004680 <_fstat_r+0x20>)
 8004664:	2300      	movs	r3, #0
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	4611      	mov	r1, r2
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	f7ff f89c 	bl	80037aa <_fstat>
 8004672:	1c43      	adds	r3, r0, #1
 8004674:	d102      	bne.n	800467c <_fstat_r+0x1c>
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	b103      	cbz	r3, 800467c <_fstat_r+0x1c>
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	bd38      	pop	{r3, r4, r5, pc}
 800467e:	bf00      	nop
 8004680:	200055f0 	.word	0x200055f0

08004684 <_isatty_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d06      	ldr	r5, [pc, #24]	; (80046a0 <_isatty_r+0x1c>)
 8004688:	2300      	movs	r3, #0
 800468a:	4604      	mov	r4, r0
 800468c:	4608      	mov	r0, r1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	f7ff f890 	bl	80037b4 <_isatty>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_isatty_r+0x1a>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_isatty_r+0x1a>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	200055f0 	.word	0x200055f0

080046a4 <sqrt>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	ed2d 8b02 	vpush	{d8}
 80046aa:	ec55 4b10 	vmov	r4, r5, d0
 80046ae:	f000 f8d3 	bl	8004858 <__ieee754_sqrt>
 80046b2:	4622      	mov	r2, r4
 80046b4:	462b      	mov	r3, r5
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	eeb0 8a40 	vmov.f32	s16, s0
 80046be:	eef0 8a60 	vmov.f32	s17, s1
 80046c2:	f7fc fa2b 	bl	8000b1c <__aeabi_dcmpun>
 80046c6:	b990      	cbnz	r0, 80046ee <sqrt+0x4a>
 80046c8:	2200      	movs	r2, #0
 80046ca:	2300      	movs	r3, #0
 80046cc:	4620      	mov	r0, r4
 80046ce:	4629      	mov	r1, r5
 80046d0:	f7fc f9fc 	bl	8000acc <__aeabi_dcmplt>
 80046d4:	b158      	cbz	r0, 80046ee <sqrt+0x4a>
 80046d6:	f7ff fa15 	bl	8003b04 <__errno>
 80046da:	2321      	movs	r3, #33	; 0x21
 80046dc:	6003      	str	r3, [r0, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	2300      	movs	r3, #0
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	f7fc f8a9 	bl	800083c <__aeabi_ddiv>
 80046ea:	ec41 0b18 	vmov	d8, r0, r1
 80046ee:	eeb0 0a48 	vmov.f32	s0, s16
 80046f2:	eef0 0a68 	vmov.f32	s1, s17
 80046f6:	ecbd 8b02 	vpop	{d8}
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	0000      	movs	r0, r0
	...

08004700 <cos>:
 8004700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004702:	ec53 2b10 	vmov	r2, r3, d0
 8004706:	4826      	ldr	r0, [pc, #152]	; (80047a0 <cos+0xa0>)
 8004708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800470c:	4281      	cmp	r1, r0
 800470e:	dc06      	bgt.n	800471e <cos+0x1e>
 8004710:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004798 <cos+0x98>
 8004714:	b005      	add	sp, #20
 8004716:	f85d eb04 	ldr.w	lr, [sp], #4
 800471a:	f000 b979 	b.w	8004a10 <__kernel_cos>
 800471e:	4821      	ldr	r0, [pc, #132]	; (80047a4 <cos+0xa4>)
 8004720:	4281      	cmp	r1, r0
 8004722:	dd09      	ble.n	8004738 <cos+0x38>
 8004724:	ee10 0a10 	vmov	r0, s0
 8004728:	4619      	mov	r1, r3
 800472a:	f7fb fda5 	bl	8000278 <__aeabi_dsub>
 800472e:	ec41 0b10 	vmov	d0, r0, r1
 8004732:	b005      	add	sp, #20
 8004734:	f85d fb04 	ldr.w	pc, [sp], #4
 8004738:	4668      	mov	r0, sp
 800473a:	f000 faf1 	bl	8004d20 <__ieee754_rem_pio2>
 800473e:	f000 0003 	and.w	r0, r0, #3
 8004742:	2801      	cmp	r0, #1
 8004744:	d00b      	beq.n	800475e <cos+0x5e>
 8004746:	2802      	cmp	r0, #2
 8004748:	d016      	beq.n	8004778 <cos+0x78>
 800474a:	b9e0      	cbnz	r0, 8004786 <cos+0x86>
 800474c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004750:	ed9d 0b00 	vldr	d0, [sp]
 8004754:	f000 f95c 	bl	8004a10 <__kernel_cos>
 8004758:	ec51 0b10 	vmov	r0, r1, d0
 800475c:	e7e7      	b.n	800472e <cos+0x2e>
 800475e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004762:	ed9d 0b00 	vldr	d0, [sp]
 8004766:	f000 fa1b 	bl	8004ba0 <__kernel_sin>
 800476a:	ec53 2b10 	vmov	r2, r3, d0
 800476e:	ee10 0a10 	vmov	r0, s0
 8004772:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004776:	e7da      	b.n	800472e <cos+0x2e>
 8004778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800477c:	ed9d 0b00 	vldr	d0, [sp]
 8004780:	f000 f946 	bl	8004a10 <__kernel_cos>
 8004784:	e7f1      	b.n	800476a <cos+0x6a>
 8004786:	ed9d 1b02 	vldr	d1, [sp, #8]
 800478a:	ed9d 0b00 	vldr	d0, [sp]
 800478e:	2001      	movs	r0, #1
 8004790:	f000 fa06 	bl	8004ba0 <__kernel_sin>
 8004794:	e7e0      	b.n	8004758 <cos+0x58>
 8004796:	bf00      	nop
	...
 80047a0:	3fe921fb 	.word	0x3fe921fb
 80047a4:	7fefffff 	.word	0x7fefffff

080047a8 <sin>:
 80047a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047aa:	ec53 2b10 	vmov	r2, r3, d0
 80047ae:	4828      	ldr	r0, [pc, #160]	; (8004850 <sin+0xa8>)
 80047b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047b4:	4281      	cmp	r1, r0
 80047b6:	dc07      	bgt.n	80047c8 <sin+0x20>
 80047b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004848 <sin+0xa0>
 80047bc:	2000      	movs	r0, #0
 80047be:	b005      	add	sp, #20
 80047c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047c4:	f000 b9ec 	b.w	8004ba0 <__kernel_sin>
 80047c8:	4822      	ldr	r0, [pc, #136]	; (8004854 <sin+0xac>)
 80047ca:	4281      	cmp	r1, r0
 80047cc:	dd09      	ble.n	80047e2 <sin+0x3a>
 80047ce:	ee10 0a10 	vmov	r0, s0
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7fb fd50 	bl	8000278 <__aeabi_dsub>
 80047d8:	ec41 0b10 	vmov	d0, r0, r1
 80047dc:	b005      	add	sp, #20
 80047de:	f85d fb04 	ldr.w	pc, [sp], #4
 80047e2:	4668      	mov	r0, sp
 80047e4:	f000 fa9c 	bl	8004d20 <__ieee754_rem_pio2>
 80047e8:	f000 0003 	and.w	r0, r0, #3
 80047ec:	2801      	cmp	r0, #1
 80047ee:	d00c      	beq.n	800480a <sin+0x62>
 80047f0:	2802      	cmp	r0, #2
 80047f2:	d011      	beq.n	8004818 <sin+0x70>
 80047f4:	b9f0      	cbnz	r0, 8004834 <sin+0x8c>
 80047f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80047fa:	ed9d 0b00 	vldr	d0, [sp]
 80047fe:	2001      	movs	r0, #1
 8004800:	f000 f9ce 	bl	8004ba0 <__kernel_sin>
 8004804:	ec51 0b10 	vmov	r0, r1, d0
 8004808:	e7e6      	b.n	80047d8 <sin+0x30>
 800480a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800480e:	ed9d 0b00 	vldr	d0, [sp]
 8004812:	f000 f8fd 	bl	8004a10 <__kernel_cos>
 8004816:	e7f5      	b.n	8004804 <sin+0x5c>
 8004818:	ed9d 1b02 	vldr	d1, [sp, #8]
 800481c:	ed9d 0b00 	vldr	d0, [sp]
 8004820:	2001      	movs	r0, #1
 8004822:	f000 f9bd 	bl	8004ba0 <__kernel_sin>
 8004826:	ec53 2b10 	vmov	r2, r3, d0
 800482a:	ee10 0a10 	vmov	r0, s0
 800482e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004832:	e7d1      	b.n	80047d8 <sin+0x30>
 8004834:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004838:	ed9d 0b00 	vldr	d0, [sp]
 800483c:	f000 f8e8 	bl	8004a10 <__kernel_cos>
 8004840:	e7f1      	b.n	8004826 <sin+0x7e>
 8004842:	bf00      	nop
 8004844:	f3af 8000 	nop.w
	...
 8004850:	3fe921fb 	.word	0x3fe921fb
 8004854:	7fefffff 	.word	0x7fefffff

08004858 <__ieee754_sqrt>:
 8004858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	ec55 4b10 	vmov	r4, r5, d0
 8004860:	4e67      	ldr	r6, [pc, #412]	; (8004a00 <__ieee754_sqrt+0x1a8>)
 8004862:	43ae      	bics	r6, r5
 8004864:	ee10 0a10 	vmov	r0, s0
 8004868:	ee10 2a10 	vmov	r2, s0
 800486c:	4629      	mov	r1, r5
 800486e:	462b      	mov	r3, r5
 8004870:	d10d      	bne.n	800488e <__ieee754_sqrt+0x36>
 8004872:	f7fb feb9 	bl	80005e8 <__aeabi_dmul>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4620      	mov	r0, r4
 800487c:	4629      	mov	r1, r5
 800487e:	f7fb fcfd 	bl	800027c <__adddf3>
 8004882:	4604      	mov	r4, r0
 8004884:	460d      	mov	r5, r1
 8004886:	ec45 4b10 	vmov	d0, r4, r5
 800488a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488e:	2d00      	cmp	r5, #0
 8004890:	dc0b      	bgt.n	80048aa <__ieee754_sqrt+0x52>
 8004892:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004896:	4326      	orrs	r6, r4
 8004898:	d0f5      	beq.n	8004886 <__ieee754_sqrt+0x2e>
 800489a:	b135      	cbz	r5, 80048aa <__ieee754_sqrt+0x52>
 800489c:	f7fb fcec 	bl	8000278 <__aeabi_dsub>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	f7fb ffca 	bl	800083c <__aeabi_ddiv>
 80048a8:	e7eb      	b.n	8004882 <__ieee754_sqrt+0x2a>
 80048aa:	1509      	asrs	r1, r1, #20
 80048ac:	f000 808d 	beq.w	80049ca <__ieee754_sqrt+0x172>
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80048b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048bc:	07c9      	lsls	r1, r1, #31
 80048be:	bf5c      	itt	pl
 80048c0:	005b      	lslpl	r3, r3, #1
 80048c2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80048c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80048ca:	bf58      	it	pl
 80048cc:	0052      	lslpl	r2, r2, #1
 80048ce:	2500      	movs	r5, #0
 80048d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80048d4:	1076      	asrs	r6, r6, #1
 80048d6:	0052      	lsls	r2, r2, #1
 80048d8:	f04f 0e16 	mov.w	lr, #22
 80048dc:	46ac      	mov	ip, r5
 80048de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048e2:	eb0c 0001 	add.w	r0, ip, r1
 80048e6:	4298      	cmp	r0, r3
 80048e8:	bfde      	ittt	le
 80048ea:	1a1b      	suble	r3, r3, r0
 80048ec:	eb00 0c01 	addle.w	ip, r0, r1
 80048f0:	186d      	addle	r5, r5, r1
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	f1be 0e01 	subs.w	lr, lr, #1
 80048f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80048fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004900:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004904:	d1ed      	bne.n	80048e2 <__ieee754_sqrt+0x8a>
 8004906:	4674      	mov	r4, lr
 8004908:	2720      	movs	r7, #32
 800490a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800490e:	4563      	cmp	r3, ip
 8004910:	eb01 000e 	add.w	r0, r1, lr
 8004914:	dc02      	bgt.n	800491c <__ieee754_sqrt+0xc4>
 8004916:	d113      	bne.n	8004940 <__ieee754_sqrt+0xe8>
 8004918:	4290      	cmp	r0, r2
 800491a:	d811      	bhi.n	8004940 <__ieee754_sqrt+0xe8>
 800491c:	2800      	cmp	r0, #0
 800491e:	eb00 0e01 	add.w	lr, r0, r1
 8004922:	da57      	bge.n	80049d4 <__ieee754_sqrt+0x17c>
 8004924:	f1be 0f00 	cmp.w	lr, #0
 8004928:	db54      	blt.n	80049d4 <__ieee754_sqrt+0x17c>
 800492a:	f10c 0801 	add.w	r8, ip, #1
 800492e:	eba3 030c 	sub.w	r3, r3, ip
 8004932:	4290      	cmp	r0, r2
 8004934:	bf88      	it	hi
 8004936:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800493a:	1a12      	subs	r2, r2, r0
 800493c:	440c      	add	r4, r1
 800493e:	46c4      	mov	ip, r8
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	3f01      	subs	r7, #1
 8004944:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004948:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800494c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004950:	d1dd      	bne.n	800490e <__ieee754_sqrt+0xb6>
 8004952:	4313      	orrs	r3, r2
 8004954:	d01b      	beq.n	800498e <__ieee754_sqrt+0x136>
 8004956:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004a04 <__ieee754_sqrt+0x1ac>
 800495a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004a08 <__ieee754_sqrt+0x1b0>
 800495e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004962:	e9db 2300 	ldrd	r2, r3, [fp]
 8004966:	f7fb fc87 	bl	8000278 <__aeabi_dsub>
 800496a:	e9da 8900 	ldrd	r8, r9, [sl]
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4640      	mov	r0, r8
 8004974:	4649      	mov	r1, r9
 8004976:	f7fc f8b3 	bl	8000ae0 <__aeabi_dcmple>
 800497a:	b140      	cbz	r0, 800498e <__ieee754_sqrt+0x136>
 800497c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004980:	e9da 0100 	ldrd	r0, r1, [sl]
 8004984:	e9db 2300 	ldrd	r2, r3, [fp]
 8004988:	d126      	bne.n	80049d8 <__ieee754_sqrt+0x180>
 800498a:	3501      	adds	r5, #1
 800498c:	463c      	mov	r4, r7
 800498e:	106a      	asrs	r2, r5, #1
 8004990:	0863      	lsrs	r3, r4, #1
 8004992:	07e9      	lsls	r1, r5, #31
 8004994:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004998:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800499c:	bf48      	it	mi
 800499e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80049a2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80049a6:	461c      	mov	r4, r3
 80049a8:	e76d      	b.n	8004886 <__ieee754_sqrt+0x2e>
 80049aa:	0ad3      	lsrs	r3, r2, #11
 80049ac:	3815      	subs	r0, #21
 80049ae:	0552      	lsls	r2, r2, #21
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0fa      	beq.n	80049aa <__ieee754_sqrt+0x152>
 80049b4:	02dc      	lsls	r4, r3, #11
 80049b6:	d50a      	bpl.n	80049ce <__ieee754_sqrt+0x176>
 80049b8:	f1c1 0420 	rsb	r4, r1, #32
 80049bc:	fa22 f404 	lsr.w	r4, r2, r4
 80049c0:	1e4d      	subs	r5, r1, #1
 80049c2:	408a      	lsls	r2, r1
 80049c4:	4323      	orrs	r3, r4
 80049c6:	1b41      	subs	r1, r0, r5
 80049c8:	e772      	b.n	80048b0 <__ieee754_sqrt+0x58>
 80049ca:	4608      	mov	r0, r1
 80049cc:	e7f0      	b.n	80049b0 <__ieee754_sqrt+0x158>
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	3101      	adds	r1, #1
 80049d2:	e7ef      	b.n	80049b4 <__ieee754_sqrt+0x15c>
 80049d4:	46e0      	mov	r8, ip
 80049d6:	e7aa      	b.n	800492e <__ieee754_sqrt+0xd6>
 80049d8:	f7fb fc50 	bl	800027c <__adddf3>
 80049dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4640      	mov	r0, r8
 80049e6:	4649      	mov	r1, r9
 80049e8:	f7fc f870 	bl	8000acc <__aeabi_dcmplt>
 80049ec:	b120      	cbz	r0, 80049f8 <__ieee754_sqrt+0x1a0>
 80049ee:	1ca0      	adds	r0, r4, #2
 80049f0:	bf08      	it	eq
 80049f2:	3501      	addeq	r5, #1
 80049f4:	3402      	adds	r4, #2
 80049f6:	e7ca      	b.n	800498e <__ieee754_sqrt+0x136>
 80049f8:	3401      	adds	r4, #1
 80049fa:	f024 0401 	bic.w	r4, r4, #1
 80049fe:	e7c6      	b.n	800498e <__ieee754_sqrt+0x136>
 8004a00:	7ff00000 	.word	0x7ff00000
 8004a04:	20000070 	.word	0x20000070
 8004a08:	20000078 	.word	0x20000078
 8004a0c:	00000000 	.word	0x00000000

08004a10 <__kernel_cos>:
 8004a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	ec57 6b10 	vmov	r6, r7, d0
 8004a18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004a1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004a20:	ed8d 1b00 	vstr	d1, [sp]
 8004a24:	da07      	bge.n	8004a36 <__kernel_cos+0x26>
 8004a26:	ee10 0a10 	vmov	r0, s0
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	f7fc f88c 	bl	8000b48 <__aeabi_d2iz>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	f000 8088 	beq.w	8004b46 <__kernel_cos+0x136>
 8004a36:	4632      	mov	r2, r6
 8004a38:	463b      	mov	r3, r7
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	f7fb fdd3 	bl	80005e8 <__aeabi_dmul>
 8004a42:	4b51      	ldr	r3, [pc, #324]	; (8004b88 <__kernel_cos+0x178>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	4604      	mov	r4, r0
 8004a48:	460d      	mov	r5, r1
 8004a4a:	f7fb fdcd 	bl	80005e8 <__aeabi_dmul>
 8004a4e:	a340      	add	r3, pc, #256	; (adr r3, 8004b50 <__kernel_cos+0x140>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	4682      	mov	sl, r0
 8004a56:	468b      	mov	fp, r1
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	f7fb fdc4 	bl	80005e8 <__aeabi_dmul>
 8004a60:	a33d      	add	r3, pc, #244	; (adr r3, 8004b58 <__kernel_cos+0x148>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fc09 	bl	800027c <__adddf3>
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f7fb fdbb 	bl	80005e8 <__aeabi_dmul>
 8004a72:	a33b      	add	r3, pc, #236	; (adr r3, 8004b60 <__kernel_cos+0x150>)
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f7fb fbfe 	bl	8000278 <__aeabi_dsub>
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	f7fb fdb2 	bl	80005e8 <__aeabi_dmul>
 8004a84:	a338      	add	r3, pc, #224	; (adr r3, 8004b68 <__kernel_cos+0x158>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f7fb fbf7 	bl	800027c <__adddf3>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	462b      	mov	r3, r5
 8004a92:	f7fb fda9 	bl	80005e8 <__aeabi_dmul>
 8004a96:	a336      	add	r3, pc, #216	; (adr r3, 8004b70 <__kernel_cos+0x160>)
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f7fb fbec 	bl	8000278 <__aeabi_dsub>
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	f7fb fda0 	bl	80005e8 <__aeabi_dmul>
 8004aa8:	a333      	add	r3, pc, #204	; (adr r3, 8004b78 <__kernel_cos+0x168>)
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	f7fb fbe5 	bl	800027c <__adddf3>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	f7fb fd97 	bl	80005e8 <__aeabi_dmul>
 8004aba:	4622      	mov	r2, r4
 8004abc:	462b      	mov	r3, r5
 8004abe:	f7fb fd93 	bl	80005e8 <__aeabi_dmul>
 8004ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	460d      	mov	r5, r1
 8004aca:	4630      	mov	r0, r6
 8004acc:	4639      	mov	r1, r7
 8004ace:	f7fb fd8b 	bl	80005e8 <__aeabi_dmul>
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fb fbcd 	bl	8000278 <__aeabi_dsub>
 8004ade:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <__kernel_cos+0x17c>)
 8004ae0:	4598      	cmp	r8, r3
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	dc10      	bgt.n	8004b0a <__kernel_cos+0xfa>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4650      	mov	r0, sl
 8004aee:	4659      	mov	r1, fp
 8004af0:	f7fb fbc2 	bl	8000278 <__aeabi_dsub>
 8004af4:	460b      	mov	r3, r1
 8004af6:	4926      	ldr	r1, [pc, #152]	; (8004b90 <__kernel_cos+0x180>)
 8004af8:	4602      	mov	r2, r0
 8004afa:	2000      	movs	r0, #0
 8004afc:	f7fb fbbc 	bl	8000278 <__aeabi_dsub>
 8004b00:	ec41 0b10 	vmov	d0, r0, r1
 8004b04:	b003      	add	sp, #12
 8004b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0a:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <__kernel_cos+0x184>)
 8004b0c:	4920      	ldr	r1, [pc, #128]	; (8004b90 <__kernel_cos+0x180>)
 8004b0e:	4598      	cmp	r8, r3
 8004b10:	bfcc      	ite	gt
 8004b12:	4d21      	ldrgt	r5, [pc, #132]	; (8004b98 <__kernel_cos+0x188>)
 8004b14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004b18:	2400      	movs	r4, #0
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	462b      	mov	r3, r5
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f7fb fbaa 	bl	8000278 <__aeabi_dsub>
 8004b24:	4622      	mov	r2, r4
 8004b26:	4680      	mov	r8, r0
 8004b28:	4689      	mov	r9, r1
 8004b2a:	462b      	mov	r3, r5
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	4659      	mov	r1, fp
 8004b30:	f7fb fba2 	bl	8000278 <__aeabi_dsub>
 8004b34:	4632      	mov	r2, r6
 8004b36:	463b      	mov	r3, r7
 8004b38:	f7fb fb9e 	bl	8000278 <__aeabi_dsub>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4640      	mov	r0, r8
 8004b42:	4649      	mov	r1, r9
 8004b44:	e7da      	b.n	8004afc <__kernel_cos+0xec>
 8004b46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004b80 <__kernel_cos+0x170>
 8004b4a:	e7db      	b.n	8004b04 <__kernel_cos+0xf4>
 8004b4c:	f3af 8000 	nop.w
 8004b50:	be8838d4 	.word	0xbe8838d4
 8004b54:	bda8fae9 	.word	0xbda8fae9
 8004b58:	bdb4b1c4 	.word	0xbdb4b1c4
 8004b5c:	3e21ee9e 	.word	0x3e21ee9e
 8004b60:	809c52ad 	.word	0x809c52ad
 8004b64:	3e927e4f 	.word	0x3e927e4f
 8004b68:	19cb1590 	.word	0x19cb1590
 8004b6c:	3efa01a0 	.word	0x3efa01a0
 8004b70:	16c15177 	.word	0x16c15177
 8004b74:	3f56c16c 	.word	0x3f56c16c
 8004b78:	5555554c 	.word	0x5555554c
 8004b7c:	3fa55555 	.word	0x3fa55555
 8004b80:	00000000 	.word	0x00000000
 8004b84:	3ff00000 	.word	0x3ff00000
 8004b88:	3fe00000 	.word	0x3fe00000
 8004b8c:	3fd33332 	.word	0x3fd33332
 8004b90:	3ff00000 	.word	0x3ff00000
 8004b94:	3fe90000 	.word	0x3fe90000
 8004b98:	3fd20000 	.word	0x3fd20000
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <__kernel_sin>:
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	ed2d 8b04 	vpush	{d8-d9}
 8004ba8:	eeb0 8a41 	vmov.f32	s16, s2
 8004bac:	eef0 8a61 	vmov.f32	s17, s3
 8004bb0:	ec55 4b10 	vmov	r4, r5, d0
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004bba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004bbe:	9001      	str	r0, [sp, #4]
 8004bc0:	da06      	bge.n	8004bd0 <__kernel_sin+0x30>
 8004bc2:	ee10 0a10 	vmov	r0, s0
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb ffbe 	bl	8000b48 <__aeabi_d2iz>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d051      	beq.n	8004c74 <__kernel_sin+0xd4>
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	462b      	mov	r3, r5
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fb fd06 	bl	80005e8 <__aeabi_dmul>
 8004bdc:	4682      	mov	sl, r0
 8004bde:	468b      	mov	fp, r1
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4620      	mov	r0, r4
 8004be6:	4629      	mov	r1, r5
 8004be8:	f7fb fcfe 	bl	80005e8 <__aeabi_dmul>
 8004bec:	a341      	add	r3, pc, #260	; (adr r3, 8004cf4 <__kernel_sin+0x154>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	4680      	mov	r8, r0
 8004bf4:	4689      	mov	r9, r1
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	4659      	mov	r1, fp
 8004bfa:	f7fb fcf5 	bl	80005e8 <__aeabi_dmul>
 8004bfe:	a33f      	add	r3, pc, #252	; (adr r3, 8004cfc <__kernel_sin+0x15c>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fb38 	bl	8000278 <__aeabi_dsub>
 8004c08:	4652      	mov	r2, sl
 8004c0a:	465b      	mov	r3, fp
 8004c0c:	f7fb fcec 	bl	80005e8 <__aeabi_dmul>
 8004c10:	a33c      	add	r3, pc, #240	; (adr r3, 8004d04 <__kernel_sin+0x164>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fb31 	bl	800027c <__adddf3>
 8004c1a:	4652      	mov	r2, sl
 8004c1c:	465b      	mov	r3, fp
 8004c1e:	f7fb fce3 	bl	80005e8 <__aeabi_dmul>
 8004c22:	a33a      	add	r3, pc, #232	; (adr r3, 8004d0c <__kernel_sin+0x16c>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f7fb fb26 	bl	8000278 <__aeabi_dsub>
 8004c2c:	4652      	mov	r2, sl
 8004c2e:	465b      	mov	r3, fp
 8004c30:	f7fb fcda 	bl	80005e8 <__aeabi_dmul>
 8004c34:	a337      	add	r3, pc, #220	; (adr r3, 8004d14 <__kernel_sin+0x174>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fb1f 	bl	800027c <__adddf3>
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	4606      	mov	r6, r0
 8004c42:	460f      	mov	r7, r1
 8004c44:	b9eb      	cbnz	r3, 8004c82 <__kernel_sin+0xe2>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4650      	mov	r0, sl
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	f7fb fccb 	bl	80005e8 <__aeabi_dmul>
 8004c52:	a325      	add	r3, pc, #148	; (adr r3, 8004ce8 <__kernel_sin+0x148>)
 8004c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c58:	f7fb fb0e 	bl	8000278 <__aeabi_dsub>
 8004c5c:	4642      	mov	r2, r8
 8004c5e:	464b      	mov	r3, r9
 8004c60:	f7fb fcc2 	bl	80005e8 <__aeabi_dmul>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4620      	mov	r0, r4
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f7fb fb06 	bl	800027c <__adddf3>
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	ec45 4b10 	vmov	d0, r4, r5
 8004c78:	b003      	add	sp, #12
 8004c7a:	ecbd 8b04 	vpop	{d8-d9}
 8004c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <__kernel_sin+0x150>)
 8004c84:	ec51 0b18 	vmov	r0, r1, d8
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f7fb fcad 	bl	80005e8 <__aeabi_dmul>
 8004c8e:	4632      	mov	r2, r6
 8004c90:	ec41 0b19 	vmov	d9, r0, r1
 8004c94:	463b      	mov	r3, r7
 8004c96:	4640      	mov	r0, r8
 8004c98:	4649      	mov	r1, r9
 8004c9a:	f7fb fca5 	bl	80005e8 <__aeabi_dmul>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	ec51 0b19 	vmov	r0, r1, d9
 8004ca6:	f7fb fae7 	bl	8000278 <__aeabi_dsub>
 8004caa:	4652      	mov	r2, sl
 8004cac:	465b      	mov	r3, fp
 8004cae:	f7fb fc9b 	bl	80005e8 <__aeabi_dmul>
 8004cb2:	ec53 2b18 	vmov	r2, r3, d8
 8004cb6:	f7fb fadf 	bl	8000278 <__aeabi_dsub>
 8004cba:	a30b      	add	r3, pc, #44	; (adr r3, 8004ce8 <__kernel_sin+0x148>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	460f      	mov	r7, r1
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	f7fb fc8e 	bl	80005e8 <__aeabi_dmul>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	4639      	mov	r1, r7
 8004cd4:	f7fb fad2 	bl	800027c <__adddf3>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4620      	mov	r0, r4
 8004cde:	4629      	mov	r1, r5
 8004ce0:	f7fb faca 	bl	8000278 <__aeabi_dsub>
 8004ce4:	e7c4      	b.n	8004c70 <__kernel_sin+0xd0>
 8004ce6:	bf00      	nop
 8004ce8:	55555549 	.word	0x55555549
 8004cec:	3fc55555 	.word	0x3fc55555
 8004cf0:	3fe00000 	.word	0x3fe00000
 8004cf4:	5acfd57c 	.word	0x5acfd57c
 8004cf8:	3de5d93a 	.word	0x3de5d93a
 8004cfc:	8a2b9ceb 	.word	0x8a2b9ceb
 8004d00:	3e5ae5e6 	.word	0x3e5ae5e6
 8004d04:	57b1fe7d 	.word	0x57b1fe7d
 8004d08:	3ec71de3 	.word	0x3ec71de3
 8004d0c:	19c161d5 	.word	0x19c161d5
 8004d10:	3f2a01a0 	.word	0x3f2a01a0
 8004d14:	1110f8a6 	.word	0x1110f8a6
 8004d18:	3f811111 	.word	0x3f811111
 8004d1c:	00000000 	.word	0x00000000

08004d20 <__ieee754_rem_pio2>:
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	ed2d 8b02 	vpush	{d8}
 8004d28:	ec55 4b10 	vmov	r4, r5, d0
 8004d2c:	4bca      	ldr	r3, [pc, #808]	; (8005058 <__ieee754_rem_pio2+0x338>)
 8004d2e:	b08b      	sub	sp, #44	; 0x2c
 8004d30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004d34:	4598      	cmp	r8, r3
 8004d36:	4682      	mov	sl, r0
 8004d38:	9502      	str	r5, [sp, #8]
 8004d3a:	dc08      	bgt.n	8004d4e <__ieee754_rem_pio2+0x2e>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2300      	movs	r3, #0
 8004d40:	ed80 0b00 	vstr	d0, [r0]
 8004d44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004d48:	f04f 0b00 	mov.w	fp, #0
 8004d4c:	e028      	b.n	8004da0 <__ieee754_rem_pio2+0x80>
 8004d4e:	4bc3      	ldr	r3, [pc, #780]	; (800505c <__ieee754_rem_pio2+0x33c>)
 8004d50:	4598      	cmp	r8, r3
 8004d52:	dc78      	bgt.n	8004e46 <__ieee754_rem_pio2+0x126>
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	4ec2      	ldr	r6, [pc, #776]	; (8005060 <__ieee754_rem_pio2+0x340>)
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	ee10 0a10 	vmov	r0, s0
 8004d5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005020 <__ieee754_rem_pio2+0x300>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	4629      	mov	r1, r5
 8004d66:	dd39      	ble.n	8004ddc <__ieee754_rem_pio2+0xbc>
 8004d68:	f7fb fa86 	bl	8000278 <__aeabi_dsub>
 8004d6c:	45b0      	cmp	r8, r6
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	d01b      	beq.n	8004dac <__ieee754_rem_pio2+0x8c>
 8004d74:	a3ac      	add	r3, pc, #688	; (adr r3, 8005028 <__ieee754_rem_pio2+0x308>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f7fb fa7d 	bl	8000278 <__aeabi_dsub>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9ca 2300 	strd	r2, r3, [sl]
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fa75 	bl	8000278 <__aeabi_dsub>
 8004d8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005028 <__ieee754_rem_pio2+0x308>)
 8004d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d94:	f7fb fa70 	bl	8000278 <__aeabi_dsub>
 8004d98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d9c:	f04f 0b01 	mov.w	fp, #1
 8004da0:	4658      	mov	r0, fp
 8004da2:	b00b      	add	sp, #44	; 0x2c
 8004da4:	ecbd 8b02 	vpop	{d8}
 8004da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dac:	a3a0      	add	r3, pc, #640	; (adr r3, 8005030 <__ieee754_rem_pio2+0x310>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb fa61 	bl	8000278 <__aeabi_dsub>
 8004db6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005038 <__ieee754_rem_pio2+0x318>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	f7fb fa5a 	bl	8000278 <__aeabi_dsub>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9ca 2300 	strd	r2, r3, [sl]
 8004dcc:	4620      	mov	r0, r4
 8004dce:	4629      	mov	r1, r5
 8004dd0:	f7fb fa52 	bl	8000278 <__aeabi_dsub>
 8004dd4:	a398      	add	r3, pc, #608	; (adr r3, 8005038 <__ieee754_rem_pio2+0x318>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	e7db      	b.n	8004d94 <__ieee754_rem_pio2+0x74>
 8004ddc:	f7fb fa4e 	bl	800027c <__adddf3>
 8004de0:	45b0      	cmp	r8, r6
 8004de2:	4604      	mov	r4, r0
 8004de4:	460d      	mov	r5, r1
 8004de6:	d016      	beq.n	8004e16 <__ieee754_rem_pio2+0xf6>
 8004de8:	a38f      	add	r3, pc, #572	; (adr r3, 8005028 <__ieee754_rem_pio2+0x308>)
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	f7fb fa45 	bl	800027c <__adddf3>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9ca 2300 	strd	r2, r3, [sl]
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	f7fb fa3b 	bl	8000278 <__aeabi_dsub>
 8004e02:	a389      	add	r3, pc, #548	; (adr r3, 8005028 <__ieee754_rem_pio2+0x308>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb fa38 	bl	800027c <__adddf3>
 8004e0c:	f04f 3bff 	mov.w	fp, #4294967295
 8004e10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e14:	e7c4      	b.n	8004da0 <__ieee754_rem_pio2+0x80>
 8004e16:	a386      	add	r3, pc, #536	; (adr r3, 8005030 <__ieee754_rem_pio2+0x310>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb fa2e 	bl	800027c <__adddf3>
 8004e20:	a385      	add	r3, pc, #532	; (adr r3, 8005038 <__ieee754_rem_pio2+0x318>)
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	f7fb fa27 	bl	800027c <__adddf3>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	e9ca 2300 	strd	r2, r3, [sl]
 8004e36:	4620      	mov	r0, r4
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7fb fa1d 	bl	8000278 <__aeabi_dsub>
 8004e3e:	a37e      	add	r3, pc, #504	; (adr r3, 8005038 <__ieee754_rem_pio2+0x318>)
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	e7e0      	b.n	8004e08 <__ieee754_rem_pio2+0xe8>
 8004e46:	4b87      	ldr	r3, [pc, #540]	; (8005064 <__ieee754_rem_pio2+0x344>)
 8004e48:	4598      	cmp	r8, r3
 8004e4a:	f300 80d8 	bgt.w	8004ffe <__ieee754_rem_pio2+0x2de>
 8004e4e:	f000 f96d 	bl	800512c <fabs>
 8004e52:	ec55 4b10 	vmov	r4, r5, d0
 8004e56:	ee10 0a10 	vmov	r0, s0
 8004e5a:	a379      	add	r3, pc, #484	; (adr r3, 8005040 <__ieee754_rem_pio2+0x320>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	4629      	mov	r1, r5
 8004e62:	f7fb fbc1 	bl	80005e8 <__aeabi_dmul>
 8004e66:	4b80      	ldr	r3, [pc, #512]	; (8005068 <__ieee754_rem_pio2+0x348>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f7fb fa07 	bl	800027c <__adddf3>
 8004e6e:	f7fb fe6b 	bl	8000b48 <__aeabi_d2iz>
 8004e72:	4683      	mov	fp, r0
 8004e74:	f7fb fb4e 	bl	8000514 <__aeabi_i2d>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	ec43 2b18 	vmov	d8, r2, r3
 8004e80:	a367      	add	r3, pc, #412	; (adr r3, 8005020 <__ieee754_rem_pio2+0x300>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f7fb fbaf 	bl	80005e8 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	f7fb f9f1 	bl	8000278 <__aeabi_dsub>
 8004e96:	a364      	add	r3, pc, #400	; (adr r3, 8005028 <__ieee754_rem_pio2+0x308>)
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	460f      	mov	r7, r1
 8004ea0:	ec51 0b18 	vmov	r0, r1, d8
 8004ea4:	f7fb fba0 	bl	80005e8 <__aeabi_dmul>
 8004ea8:	f1bb 0f1f 	cmp.w	fp, #31
 8004eac:	4604      	mov	r4, r0
 8004eae:	460d      	mov	r5, r1
 8004eb0:	dc0d      	bgt.n	8004ece <__ieee754_rem_pio2+0x1ae>
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <__ieee754_rem_pio2+0x34c>)
 8004eb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	d006      	beq.n	8004ece <__ieee754_rem_pio2+0x1ae>
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	462b      	mov	r3, r5
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	4639      	mov	r1, r7
 8004ec8:	f7fb f9d6 	bl	8000278 <__aeabi_dsub>
 8004ecc:	e00e      	b.n	8004eec <__ieee754_rem_pio2+0x1cc>
 8004ece:	462b      	mov	r3, r5
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb f9cf 	bl	8000278 <__aeabi_dsub>
 8004eda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004ee4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	dc02      	bgt.n	8004ef2 <__ieee754_rem_pio2+0x1d2>
 8004eec:	e9ca 0100 	strd	r0, r1, [sl]
 8004ef0:	e039      	b.n	8004f66 <__ieee754_rem_pio2+0x246>
 8004ef2:	a34f      	add	r3, pc, #316	; (adr r3, 8005030 <__ieee754_rem_pio2+0x310>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	ec51 0b18 	vmov	r0, r1, d8
 8004efc:	f7fb fb74 	bl	80005e8 <__aeabi_dmul>
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4630      	mov	r0, r6
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	f7fb f9b4 	bl	8000278 <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4680      	mov	r8, r0
 8004f16:	4689      	mov	r9, r1
 8004f18:	4630      	mov	r0, r6
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	f7fb f9ac 	bl	8000278 <__aeabi_dsub>
 8004f20:	4622      	mov	r2, r4
 8004f22:	462b      	mov	r3, r5
 8004f24:	f7fb f9a8 	bl	8000278 <__aeabi_dsub>
 8004f28:	a343      	add	r3, pc, #268	; (adr r3, 8005038 <__ieee754_rem_pio2+0x318>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	4604      	mov	r4, r0
 8004f30:	460d      	mov	r5, r1
 8004f32:	ec51 0b18 	vmov	r0, r1, d8
 8004f36:	f7fb fb57 	bl	80005e8 <__aeabi_dmul>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	f7fb f99b 	bl	8000278 <__aeabi_dsub>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4604      	mov	r4, r0
 8004f48:	460d      	mov	r5, r1
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	f7fb f993 	bl	8000278 <__aeabi_dsub>
 8004f52:	9a03      	ldr	r2, [sp, #12]
 8004f54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b31      	cmp	r3, #49	; 0x31
 8004f5c:	dc24      	bgt.n	8004fa8 <__ieee754_rem_pio2+0x288>
 8004f5e:	e9ca 0100 	strd	r0, r1, [sl]
 8004f62:	4646      	mov	r6, r8
 8004f64:	464f      	mov	r7, r9
 8004f66:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	4639      	mov	r1, r7
 8004f72:	f7fb f981 	bl	8000278 <__aeabi_dsub>
 8004f76:	462b      	mov	r3, r5
 8004f78:	4622      	mov	r2, r4
 8004f7a:	f7fb f97d 	bl	8000278 <__aeabi_dsub>
 8004f7e:	9b02      	ldr	r3, [sp, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f86:	f6bf af0b 	bge.w	8004da0 <__ieee754_rem_pio2+0x80>
 8004f8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f8e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f96:	f8ca 8000 	str.w	r8, [sl]
 8004f9a:	f8ca 0008 	str.w	r0, [sl, #8]
 8004f9e:	f8ca 300c 	str.w	r3, [sl, #12]
 8004fa2:	f1cb 0b00 	rsb	fp, fp, #0
 8004fa6:	e6fb      	b.n	8004da0 <__ieee754_rem_pio2+0x80>
 8004fa8:	a327      	add	r3, pc, #156	; (adr r3, 8005048 <__ieee754_rem_pio2+0x328>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	ec51 0b18 	vmov	r0, r1, d8
 8004fb2:	f7fb fb19 	bl	80005e8 <__aeabi_dmul>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	460d      	mov	r5, r1
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	f7fb f959 	bl	8000278 <__aeabi_dsub>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4606      	mov	r6, r0
 8004fcc:	460f      	mov	r7, r1
 8004fce:	4640      	mov	r0, r8
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	f7fb f951 	bl	8000278 <__aeabi_dsub>
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	462b      	mov	r3, r5
 8004fda:	f7fb f94d 	bl	8000278 <__aeabi_dsub>
 8004fde:	a31c      	add	r3, pc, #112	; (adr r3, 8005050 <__ieee754_rem_pio2+0x330>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	ec51 0b18 	vmov	r0, r1, d8
 8004fec:	f7fb fafc 	bl	80005e8 <__aeabi_dmul>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	f7fb f940 	bl	8000278 <__aeabi_dsub>
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	460d      	mov	r5, r1
 8004ffc:	e760      	b.n	8004ec0 <__ieee754_rem_pio2+0x1a0>
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <__ieee754_rem_pio2+0x350>)
 8005000:	4598      	cmp	r8, r3
 8005002:	dd37      	ble.n	8005074 <__ieee754_rem_pio2+0x354>
 8005004:	ee10 2a10 	vmov	r2, s0
 8005008:	462b      	mov	r3, r5
 800500a:	4620      	mov	r0, r4
 800500c:	4629      	mov	r1, r5
 800500e:	f7fb f933 	bl	8000278 <__aeabi_dsub>
 8005012:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005016:	e9ca 0100 	strd	r0, r1, [sl]
 800501a:	e695      	b.n	8004d48 <__ieee754_rem_pio2+0x28>
 800501c:	f3af 8000 	nop.w
 8005020:	54400000 	.word	0x54400000
 8005024:	3ff921fb 	.word	0x3ff921fb
 8005028:	1a626331 	.word	0x1a626331
 800502c:	3dd0b461 	.word	0x3dd0b461
 8005030:	1a600000 	.word	0x1a600000
 8005034:	3dd0b461 	.word	0x3dd0b461
 8005038:	2e037073 	.word	0x2e037073
 800503c:	3ba3198a 	.word	0x3ba3198a
 8005040:	6dc9c883 	.word	0x6dc9c883
 8005044:	3fe45f30 	.word	0x3fe45f30
 8005048:	2e000000 	.word	0x2e000000
 800504c:	3ba3198a 	.word	0x3ba3198a
 8005050:	252049c1 	.word	0x252049c1
 8005054:	397b839a 	.word	0x397b839a
 8005058:	3fe921fb 	.word	0x3fe921fb
 800505c:	4002d97b 	.word	0x4002d97b
 8005060:	3ff921fb 	.word	0x3ff921fb
 8005064:	413921fb 	.word	0x413921fb
 8005068:	3fe00000 	.word	0x3fe00000
 800506c:	08005a48 	.word	0x08005a48
 8005070:	7fefffff 	.word	0x7fefffff
 8005074:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005078:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800507c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005080:	4620      	mov	r0, r4
 8005082:	460d      	mov	r5, r1
 8005084:	f7fb fd60 	bl	8000b48 <__aeabi_d2iz>
 8005088:	f7fb fa44 	bl	8000514 <__aeabi_i2d>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4620      	mov	r0, r4
 8005092:	4629      	mov	r1, r5
 8005094:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005098:	f7fb f8ee 	bl	8000278 <__aeabi_dsub>
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <__ieee754_rem_pio2+0x404>)
 800509e:	2200      	movs	r2, #0
 80050a0:	f7fb faa2 	bl	80005e8 <__aeabi_dmul>
 80050a4:	460d      	mov	r5, r1
 80050a6:	4604      	mov	r4, r0
 80050a8:	f7fb fd4e 	bl	8000b48 <__aeabi_d2iz>
 80050ac:	f7fb fa32 	bl	8000514 <__aeabi_i2d>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4620      	mov	r0, r4
 80050b6:	4629      	mov	r1, r5
 80050b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050bc:	f7fb f8dc 	bl	8000278 <__aeabi_dsub>
 80050c0:	4b18      	ldr	r3, [pc, #96]	; (8005124 <__ieee754_rem_pio2+0x404>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	f7fb fa90 	bl	80005e8 <__aeabi_dmul>
 80050c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80050cc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80050d0:	2703      	movs	r7, #3
 80050d2:	2400      	movs	r4, #0
 80050d4:	2500      	movs	r5, #0
 80050d6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	46b9      	mov	r9, r7
 80050e0:	3f01      	subs	r7, #1
 80050e2:	f7fb fce9 	bl	8000ab8 <__aeabi_dcmpeq>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d1f5      	bne.n	80050d6 <__ieee754_rem_pio2+0x3b6>
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <__ieee754_rem_pio2+0x408>)
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	2302      	movs	r3, #2
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4632      	mov	r2, r6
 80050f4:	464b      	mov	r3, r9
 80050f6:	4651      	mov	r1, sl
 80050f8:	a804      	add	r0, sp, #16
 80050fa:	f000 f821 	bl	8005140 <__kernel_rem_pio2>
 80050fe:	9b02      	ldr	r3, [sp, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	4683      	mov	fp, r0
 8005104:	f6bf ae4c 	bge.w	8004da0 <__ieee754_rem_pio2+0x80>
 8005108:	e9da 2100 	ldrd	r2, r1, [sl]
 800510c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005110:	e9ca 2300 	strd	r2, r3, [sl]
 8005114:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005118:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800511c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005120:	e73f      	b.n	8004fa2 <__ieee754_rem_pio2+0x282>
 8005122:	bf00      	nop
 8005124:	41700000 	.word	0x41700000
 8005128:	08005ac8 	.word	0x08005ac8

0800512c <fabs>:
 800512c:	ec51 0b10 	vmov	r0, r1, d0
 8005130:	ee10 2a10 	vmov	r2, s0
 8005134:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005138:	ec43 2b10 	vmov	d0, r2, r3
 800513c:	4770      	bx	lr
	...

08005140 <__kernel_rem_pio2>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	ed2d 8b02 	vpush	{d8}
 8005148:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800514c:	f112 0f14 	cmn.w	r2, #20
 8005150:	9306      	str	r3, [sp, #24]
 8005152:	9104      	str	r1, [sp, #16]
 8005154:	4bc2      	ldr	r3, [pc, #776]	; (8005460 <__kernel_rem_pio2+0x320>)
 8005156:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005158:	9009      	str	r0, [sp, #36]	; 0x24
 800515a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	9b06      	ldr	r3, [sp, #24]
 8005162:	f103 33ff 	add.w	r3, r3, #4294967295
 8005166:	bfa8      	it	ge
 8005168:	1ed4      	subge	r4, r2, #3
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	bfb2      	itee	lt
 800516e:	2400      	movlt	r4, #0
 8005170:	2318      	movge	r3, #24
 8005172:	fb94 f4f3 	sdivge	r4, r4, r3
 8005176:	f06f 0317 	mvn.w	r3, #23
 800517a:	fb04 3303 	mla	r3, r4, r3, r3
 800517e:	eb03 0a02 	add.w	sl, r3, r2
 8005182:	9b00      	ldr	r3, [sp, #0]
 8005184:	9a05      	ldr	r2, [sp, #20]
 8005186:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005450 <__kernel_rem_pio2+0x310>
 800518a:	eb03 0802 	add.w	r8, r3, r2
 800518e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005190:	1aa7      	subs	r7, r4, r2
 8005192:	ae20      	add	r6, sp, #128	; 0x80
 8005194:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005198:	2500      	movs	r5, #0
 800519a:	4545      	cmp	r5, r8
 800519c:	dd13      	ble.n	80051c6 <__kernel_rem_pio2+0x86>
 800519e:	9b06      	ldr	r3, [sp, #24]
 80051a0:	aa20      	add	r2, sp, #128	; 0x80
 80051a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80051a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80051aa:	f04f 0800 	mov.w	r8, #0
 80051ae:	9b00      	ldr	r3, [sp, #0]
 80051b0:	4598      	cmp	r8, r3
 80051b2:	dc31      	bgt.n	8005218 <__kernel_rem_pio2+0xd8>
 80051b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005450 <__kernel_rem_pio2+0x310>
 80051b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051c0:	462f      	mov	r7, r5
 80051c2:	2600      	movs	r6, #0
 80051c4:	e01b      	b.n	80051fe <__kernel_rem_pio2+0xbe>
 80051c6:	42ef      	cmn	r7, r5
 80051c8:	d407      	bmi.n	80051da <__kernel_rem_pio2+0x9a>
 80051ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80051ce:	f7fb f9a1 	bl	8000514 <__aeabi_i2d>
 80051d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80051d6:	3501      	adds	r5, #1
 80051d8:	e7df      	b.n	800519a <__kernel_rem_pio2+0x5a>
 80051da:	ec51 0b18 	vmov	r0, r1, d8
 80051de:	e7f8      	b.n	80051d2 <__kernel_rem_pio2+0x92>
 80051e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80051e8:	f7fb f9fe 	bl	80005e8 <__aeabi_dmul>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051f4:	f7fb f842 	bl	800027c <__adddf3>
 80051f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051fc:	3601      	adds	r6, #1
 80051fe:	9b05      	ldr	r3, [sp, #20]
 8005200:	429e      	cmp	r6, r3
 8005202:	f1a7 0708 	sub.w	r7, r7, #8
 8005206:	ddeb      	ble.n	80051e0 <__kernel_rem_pio2+0xa0>
 8005208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800520c:	f108 0801 	add.w	r8, r8, #1
 8005210:	ecab 7b02 	vstmia	fp!, {d7}
 8005214:	3508      	adds	r5, #8
 8005216:	e7ca      	b.n	80051ae <__kernel_rem_pio2+0x6e>
 8005218:	9b00      	ldr	r3, [sp, #0]
 800521a:	aa0c      	add	r2, sp, #48	; 0x30
 800521c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005220:	930b      	str	r3, [sp, #44]	; 0x2c
 8005222:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005224:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005228:	9c00      	ldr	r4, [sp, #0]
 800522a:	930a      	str	r3, [sp, #40]	; 0x28
 800522c:	00e3      	lsls	r3, r4, #3
 800522e:	9308      	str	r3, [sp, #32]
 8005230:	ab98      	add	r3, sp, #608	; 0x260
 8005232:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005236:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800523a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800523e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005240:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005244:	46c3      	mov	fp, r8
 8005246:	46a1      	mov	r9, r4
 8005248:	f1b9 0f00 	cmp.w	r9, #0
 800524c:	f1a5 0508 	sub.w	r5, r5, #8
 8005250:	dc77      	bgt.n	8005342 <__kernel_rem_pio2+0x202>
 8005252:	ec47 6b10 	vmov	d0, r6, r7
 8005256:	4650      	mov	r0, sl
 8005258:	f000 fac2 	bl	80057e0 <scalbn>
 800525c:	ec57 6b10 	vmov	r6, r7, d0
 8005260:	2200      	movs	r2, #0
 8005262:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005266:	ee10 0a10 	vmov	r0, s0
 800526a:	4639      	mov	r1, r7
 800526c:	f7fb f9bc 	bl	80005e8 <__aeabi_dmul>
 8005270:	ec41 0b10 	vmov	d0, r0, r1
 8005274:	f000 fb34 	bl	80058e0 <floor>
 8005278:	4b7a      	ldr	r3, [pc, #488]	; (8005464 <__kernel_rem_pio2+0x324>)
 800527a:	ec51 0b10 	vmov	r0, r1, d0
 800527e:	2200      	movs	r2, #0
 8005280:	f7fb f9b2 	bl	80005e8 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fa fff4 	bl	8000278 <__aeabi_dsub>
 8005290:	460f      	mov	r7, r1
 8005292:	4606      	mov	r6, r0
 8005294:	f7fb fc58 	bl	8000b48 <__aeabi_d2iz>
 8005298:	9002      	str	r0, [sp, #8]
 800529a:	f7fb f93b 	bl	8000514 <__aeabi_i2d>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4630      	mov	r0, r6
 80052a4:	4639      	mov	r1, r7
 80052a6:	f7fa ffe7 	bl	8000278 <__aeabi_dsub>
 80052aa:	f1ba 0f00 	cmp.w	sl, #0
 80052ae:	4606      	mov	r6, r0
 80052b0:	460f      	mov	r7, r1
 80052b2:	dd6d      	ble.n	8005390 <__kernel_rem_pio2+0x250>
 80052b4:	1e61      	subs	r1, r4, #1
 80052b6:	ab0c      	add	r3, sp, #48	; 0x30
 80052b8:	9d02      	ldr	r5, [sp, #8]
 80052ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052be:	f1ca 0018 	rsb	r0, sl, #24
 80052c2:	fa43 f200 	asr.w	r2, r3, r0
 80052c6:	4415      	add	r5, r2
 80052c8:	4082      	lsls	r2, r0
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	aa0c      	add	r2, sp, #48	; 0x30
 80052ce:	9502      	str	r5, [sp, #8]
 80052d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80052d4:	f1ca 0217 	rsb	r2, sl, #23
 80052d8:	fa43 fb02 	asr.w	fp, r3, r2
 80052dc:	f1bb 0f00 	cmp.w	fp, #0
 80052e0:	dd65      	ble.n	80053ae <__kernel_rem_pio2+0x26e>
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	3301      	adds	r3, #1
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	4615      	mov	r5, r2
 80052ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80052f0:	4294      	cmp	r4, r2
 80052f2:	f300 809f 	bgt.w	8005434 <__kernel_rem_pio2+0x2f4>
 80052f6:	f1ba 0f00 	cmp.w	sl, #0
 80052fa:	dd07      	ble.n	800530c <__kernel_rem_pio2+0x1cc>
 80052fc:	f1ba 0f01 	cmp.w	sl, #1
 8005300:	f000 80c1 	beq.w	8005486 <__kernel_rem_pio2+0x346>
 8005304:	f1ba 0f02 	cmp.w	sl, #2
 8005308:	f000 80c7 	beq.w	800549a <__kernel_rem_pio2+0x35a>
 800530c:	f1bb 0f02 	cmp.w	fp, #2
 8005310:	d14d      	bne.n	80053ae <__kernel_rem_pio2+0x26e>
 8005312:	4632      	mov	r2, r6
 8005314:	463b      	mov	r3, r7
 8005316:	4954      	ldr	r1, [pc, #336]	; (8005468 <__kernel_rem_pio2+0x328>)
 8005318:	2000      	movs	r0, #0
 800531a:	f7fa ffad 	bl	8000278 <__aeabi_dsub>
 800531e:	4606      	mov	r6, r0
 8005320:	460f      	mov	r7, r1
 8005322:	2d00      	cmp	r5, #0
 8005324:	d043      	beq.n	80053ae <__kernel_rem_pio2+0x26e>
 8005326:	4650      	mov	r0, sl
 8005328:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005458 <__kernel_rem_pio2+0x318>
 800532c:	f000 fa58 	bl	80057e0 <scalbn>
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	ec53 2b10 	vmov	r2, r3, d0
 8005338:	f7fa ff9e 	bl	8000278 <__aeabi_dsub>
 800533c:	4606      	mov	r6, r0
 800533e:	460f      	mov	r7, r1
 8005340:	e035      	b.n	80053ae <__kernel_rem_pio2+0x26e>
 8005342:	4b4a      	ldr	r3, [pc, #296]	; (800546c <__kernel_rem_pio2+0x32c>)
 8005344:	2200      	movs	r2, #0
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fb f94d 	bl	80005e8 <__aeabi_dmul>
 800534e:	f7fb fbfb 	bl	8000b48 <__aeabi_d2iz>
 8005352:	f7fb f8df 	bl	8000514 <__aeabi_i2d>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	ec43 2b18 	vmov	d8, r2, r3
 800535e:	4b44      	ldr	r3, [pc, #272]	; (8005470 <__kernel_rem_pio2+0x330>)
 8005360:	2200      	movs	r2, #0
 8005362:	f7fb f941 	bl	80005e8 <__aeabi_dmul>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4630      	mov	r0, r6
 800536c:	4639      	mov	r1, r7
 800536e:	f7fa ff83 	bl	8000278 <__aeabi_dsub>
 8005372:	f7fb fbe9 	bl	8000b48 <__aeabi_d2iz>
 8005376:	e9d5 2300 	ldrd	r2, r3, [r5]
 800537a:	f84b 0b04 	str.w	r0, [fp], #4
 800537e:	ec51 0b18 	vmov	r0, r1, d8
 8005382:	f7fa ff7b 	bl	800027c <__adddf3>
 8005386:	f109 39ff 	add.w	r9, r9, #4294967295
 800538a:	4606      	mov	r6, r0
 800538c:	460f      	mov	r7, r1
 800538e:	e75b      	b.n	8005248 <__kernel_rem_pio2+0x108>
 8005390:	d106      	bne.n	80053a0 <__kernel_rem_pio2+0x260>
 8005392:	1e63      	subs	r3, r4, #1
 8005394:	aa0c      	add	r2, sp, #48	; 0x30
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800539e:	e79d      	b.n	80052dc <__kernel_rem_pio2+0x19c>
 80053a0:	4b34      	ldr	r3, [pc, #208]	; (8005474 <__kernel_rem_pio2+0x334>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	f7fb fba6 	bl	8000af4 <__aeabi_dcmpge>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d140      	bne.n	800542e <__kernel_rem_pio2+0x2ee>
 80053ac:	4683      	mov	fp, r0
 80053ae:	2200      	movs	r2, #0
 80053b0:	2300      	movs	r3, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	f7fb fb7f 	bl	8000ab8 <__aeabi_dcmpeq>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	f000 80c1 	beq.w	8005542 <__kernel_rem_pio2+0x402>
 80053c0:	1e65      	subs	r5, r4, #1
 80053c2:	462b      	mov	r3, r5
 80053c4:	2200      	movs	r2, #0
 80053c6:	9900      	ldr	r1, [sp, #0]
 80053c8:	428b      	cmp	r3, r1
 80053ca:	da6d      	bge.n	80054a8 <__kernel_rem_pio2+0x368>
 80053cc:	2a00      	cmp	r2, #0
 80053ce:	f000 808a 	beq.w	80054e6 <__kernel_rem_pio2+0x3a6>
 80053d2:	ab0c      	add	r3, sp, #48	; 0x30
 80053d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80053d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 80ae 	beq.w	800553e <__kernel_rem_pio2+0x3fe>
 80053e2:	4650      	mov	r0, sl
 80053e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005458 <__kernel_rem_pio2+0x318>
 80053e8:	f000 f9fa 	bl	80057e0 <scalbn>
 80053ec:	1c6b      	adds	r3, r5, #1
 80053ee:	00da      	lsls	r2, r3, #3
 80053f0:	9205      	str	r2, [sp, #20]
 80053f2:	ec57 6b10 	vmov	r6, r7, d0
 80053f6:	aa70      	add	r2, sp, #448	; 0x1c0
 80053f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800546c <__kernel_rem_pio2+0x32c>
 80053fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005400:	462c      	mov	r4, r5
 8005402:	f04f 0800 	mov.w	r8, #0
 8005406:	2c00      	cmp	r4, #0
 8005408:	f280 80d4 	bge.w	80055b4 <__kernel_rem_pio2+0x474>
 800540c:	462c      	mov	r4, r5
 800540e:	2c00      	cmp	r4, #0
 8005410:	f2c0 8102 	blt.w	8005618 <__kernel_rem_pio2+0x4d8>
 8005414:	4b18      	ldr	r3, [pc, #96]	; (8005478 <__kernel_rem_pio2+0x338>)
 8005416:	461e      	mov	r6, r3
 8005418:	ab70      	add	r3, sp, #448	; 0x1c0
 800541a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800541e:	1b2b      	subs	r3, r5, r4
 8005420:	f04f 0900 	mov.w	r9, #0
 8005424:	f04f 0a00 	mov.w	sl, #0
 8005428:	2700      	movs	r7, #0
 800542a:	9306      	str	r3, [sp, #24]
 800542c:	e0e6      	b.n	80055fc <__kernel_rem_pio2+0x4bc>
 800542e:	f04f 0b02 	mov.w	fp, #2
 8005432:	e756      	b.n	80052e2 <__kernel_rem_pio2+0x1a2>
 8005434:	f8d8 3000 	ldr.w	r3, [r8]
 8005438:	bb05      	cbnz	r5, 800547c <__kernel_rem_pio2+0x33c>
 800543a:	b123      	cbz	r3, 8005446 <__kernel_rem_pio2+0x306>
 800543c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005440:	f8c8 3000 	str.w	r3, [r8]
 8005444:	2301      	movs	r3, #1
 8005446:	3201      	adds	r2, #1
 8005448:	f108 0804 	add.w	r8, r8, #4
 800544c:	461d      	mov	r5, r3
 800544e:	e74f      	b.n	80052f0 <__kernel_rem_pio2+0x1b0>
	...
 800545c:	3ff00000 	.word	0x3ff00000
 8005460:	08005c10 	.word	0x08005c10
 8005464:	40200000 	.word	0x40200000
 8005468:	3ff00000 	.word	0x3ff00000
 800546c:	3e700000 	.word	0x3e700000
 8005470:	41700000 	.word	0x41700000
 8005474:	3fe00000 	.word	0x3fe00000
 8005478:	08005bd0 	.word	0x08005bd0
 800547c:	1acb      	subs	r3, r1, r3
 800547e:	f8c8 3000 	str.w	r3, [r8]
 8005482:	462b      	mov	r3, r5
 8005484:	e7df      	b.n	8005446 <__kernel_rem_pio2+0x306>
 8005486:	1e62      	subs	r2, r4, #1
 8005488:	ab0c      	add	r3, sp, #48	; 0x30
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005492:	a90c      	add	r1, sp, #48	; 0x30
 8005494:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005498:	e738      	b.n	800530c <__kernel_rem_pio2+0x1cc>
 800549a:	1e62      	subs	r2, r4, #1
 800549c:	ab0c      	add	r3, sp, #48	; 0x30
 800549e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80054a6:	e7f4      	b.n	8005492 <__kernel_rem_pio2+0x352>
 80054a8:	a90c      	add	r1, sp, #48	; 0x30
 80054aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	430a      	orrs	r2, r1
 80054b2:	e788      	b.n	80053c6 <__kernel_rem_pio2+0x286>
 80054b4:	3301      	adds	r3, #1
 80054b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80054ba:	2900      	cmp	r1, #0
 80054bc:	d0fa      	beq.n	80054b4 <__kernel_rem_pio2+0x374>
 80054be:	9a08      	ldr	r2, [sp, #32]
 80054c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80054c4:	446a      	add	r2, sp
 80054c6:	3a98      	subs	r2, #152	; 0x98
 80054c8:	9208      	str	r2, [sp, #32]
 80054ca:	9a06      	ldr	r2, [sp, #24]
 80054cc:	a920      	add	r1, sp, #128	; 0x80
 80054ce:	18a2      	adds	r2, r4, r2
 80054d0:	18e3      	adds	r3, r4, r3
 80054d2:	f104 0801 	add.w	r8, r4, #1
 80054d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80054da:	9302      	str	r3, [sp, #8]
 80054dc:	9b02      	ldr	r3, [sp, #8]
 80054de:	4543      	cmp	r3, r8
 80054e0:	da04      	bge.n	80054ec <__kernel_rem_pio2+0x3ac>
 80054e2:	461c      	mov	r4, r3
 80054e4:	e6a2      	b.n	800522c <__kernel_rem_pio2+0xec>
 80054e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054e8:	2301      	movs	r3, #1
 80054ea:	e7e4      	b.n	80054b6 <__kernel_rem_pio2+0x376>
 80054ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80054f2:	f7fb f80f 	bl	8000514 <__aeabi_i2d>
 80054f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80054fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fc:	46ab      	mov	fp, r5
 80054fe:	461c      	mov	r4, r3
 8005500:	f04f 0900 	mov.w	r9, #0
 8005504:	2600      	movs	r6, #0
 8005506:	2700      	movs	r7, #0
 8005508:	9b05      	ldr	r3, [sp, #20]
 800550a:	4599      	cmp	r9, r3
 800550c:	dd06      	ble.n	800551c <__kernel_rem_pio2+0x3dc>
 800550e:	9b08      	ldr	r3, [sp, #32]
 8005510:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005514:	f108 0801 	add.w	r8, r8, #1
 8005518:	9308      	str	r3, [sp, #32]
 800551a:	e7df      	b.n	80054dc <__kernel_rem_pio2+0x39c>
 800551c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005520:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005524:	f7fb f860 	bl	80005e8 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4630      	mov	r0, r6
 800552e:	4639      	mov	r1, r7
 8005530:	f7fa fea4 	bl	800027c <__adddf3>
 8005534:	f109 0901 	add.w	r9, r9, #1
 8005538:	4606      	mov	r6, r0
 800553a:	460f      	mov	r7, r1
 800553c:	e7e4      	b.n	8005508 <__kernel_rem_pio2+0x3c8>
 800553e:	3d01      	subs	r5, #1
 8005540:	e747      	b.n	80053d2 <__kernel_rem_pio2+0x292>
 8005542:	ec47 6b10 	vmov	d0, r6, r7
 8005546:	f1ca 0000 	rsb	r0, sl, #0
 800554a:	f000 f949 	bl	80057e0 <scalbn>
 800554e:	ec57 6b10 	vmov	r6, r7, d0
 8005552:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <__kernel_rem_pio2+0x694>)
 8005554:	ee10 0a10 	vmov	r0, s0
 8005558:	2200      	movs	r2, #0
 800555a:	4639      	mov	r1, r7
 800555c:	f7fb faca 	bl	8000af4 <__aeabi_dcmpge>
 8005560:	b1f8      	cbz	r0, 80055a2 <__kernel_rem_pio2+0x462>
 8005562:	4b9d      	ldr	r3, [pc, #628]	; (80057d8 <__kernel_rem_pio2+0x698>)
 8005564:	2200      	movs	r2, #0
 8005566:	4630      	mov	r0, r6
 8005568:	4639      	mov	r1, r7
 800556a:	f7fb f83d 	bl	80005e8 <__aeabi_dmul>
 800556e:	f7fb faeb 	bl	8000b48 <__aeabi_d2iz>
 8005572:	4680      	mov	r8, r0
 8005574:	f7fa ffce 	bl	8000514 <__aeabi_i2d>
 8005578:	4b96      	ldr	r3, [pc, #600]	; (80057d4 <__kernel_rem_pio2+0x694>)
 800557a:	2200      	movs	r2, #0
 800557c:	f7fb f834 	bl	80005e8 <__aeabi_dmul>
 8005580:	460b      	mov	r3, r1
 8005582:	4602      	mov	r2, r0
 8005584:	4639      	mov	r1, r7
 8005586:	4630      	mov	r0, r6
 8005588:	f7fa fe76 	bl	8000278 <__aeabi_dsub>
 800558c:	f7fb fadc 	bl	8000b48 <__aeabi_d2iz>
 8005590:	1c65      	adds	r5, r4, #1
 8005592:	ab0c      	add	r3, sp, #48	; 0x30
 8005594:	f10a 0a18 	add.w	sl, sl, #24
 8005598:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800559c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80055a0:	e71f      	b.n	80053e2 <__kernel_rem_pio2+0x2a2>
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f7fb facf 	bl	8000b48 <__aeabi_d2iz>
 80055aa:	ab0c      	add	r3, sp, #48	; 0x30
 80055ac:	4625      	mov	r5, r4
 80055ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80055b2:	e716      	b.n	80053e2 <__kernel_rem_pio2+0x2a2>
 80055b4:	ab0c      	add	r3, sp, #48	; 0x30
 80055b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80055ba:	f7fa ffab 	bl	8000514 <__aeabi_i2d>
 80055be:	4632      	mov	r2, r6
 80055c0:	463b      	mov	r3, r7
 80055c2:	f7fb f811 	bl	80005e8 <__aeabi_dmul>
 80055c6:	4642      	mov	r2, r8
 80055c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80055cc:	464b      	mov	r3, r9
 80055ce:	4630      	mov	r0, r6
 80055d0:	4639      	mov	r1, r7
 80055d2:	f7fb f809 	bl	80005e8 <__aeabi_dmul>
 80055d6:	3c01      	subs	r4, #1
 80055d8:	4606      	mov	r6, r0
 80055da:	460f      	mov	r7, r1
 80055dc:	e713      	b.n	8005406 <__kernel_rem_pio2+0x2c6>
 80055de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80055e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80055e6:	f7fa ffff 	bl	80005e8 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4648      	mov	r0, r9
 80055f0:	4651      	mov	r1, sl
 80055f2:	f7fa fe43 	bl	800027c <__adddf3>
 80055f6:	3701      	adds	r7, #1
 80055f8:	4681      	mov	r9, r0
 80055fa:	468a      	mov	sl, r1
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	429f      	cmp	r7, r3
 8005600:	dc02      	bgt.n	8005608 <__kernel_rem_pio2+0x4c8>
 8005602:	9b06      	ldr	r3, [sp, #24]
 8005604:	429f      	cmp	r7, r3
 8005606:	ddea      	ble.n	80055de <__kernel_rem_pio2+0x49e>
 8005608:	9a06      	ldr	r2, [sp, #24]
 800560a:	ab48      	add	r3, sp, #288	; 0x120
 800560c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005610:	e9c6 9a00 	strd	r9, sl, [r6]
 8005614:	3c01      	subs	r4, #1
 8005616:	e6fa      	b.n	800540e <__kernel_rem_pio2+0x2ce>
 8005618:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800561a:	2b02      	cmp	r3, #2
 800561c:	dc0b      	bgt.n	8005636 <__kernel_rem_pio2+0x4f6>
 800561e:	2b00      	cmp	r3, #0
 8005620:	dc39      	bgt.n	8005696 <__kernel_rem_pio2+0x556>
 8005622:	d05d      	beq.n	80056e0 <__kernel_rem_pio2+0x5a0>
 8005624:	9b02      	ldr	r3, [sp, #8]
 8005626:	f003 0007 	and.w	r0, r3, #7
 800562a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800562e:	ecbd 8b02 	vpop	{d8}
 8005632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005636:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005638:	2b03      	cmp	r3, #3
 800563a:	d1f3      	bne.n	8005624 <__kernel_rem_pio2+0x4e4>
 800563c:	9b05      	ldr	r3, [sp, #20]
 800563e:	9500      	str	r5, [sp, #0]
 8005640:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005644:	eb0d 0403 	add.w	r4, sp, r3
 8005648:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800564c:	46a2      	mov	sl, r4
 800564e:	9b00      	ldr	r3, [sp, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f1aa 0a08 	sub.w	sl, sl, #8
 8005656:	dc69      	bgt.n	800572c <__kernel_rem_pio2+0x5ec>
 8005658:	46aa      	mov	sl, r5
 800565a:	f1ba 0f01 	cmp.w	sl, #1
 800565e:	f1a4 0408 	sub.w	r4, r4, #8
 8005662:	f300 8083 	bgt.w	800576c <__kernel_rem_pio2+0x62c>
 8005666:	9c05      	ldr	r4, [sp, #20]
 8005668:	ab48      	add	r3, sp, #288	; 0x120
 800566a:	441c      	add	r4, r3
 800566c:	2000      	movs	r0, #0
 800566e:	2100      	movs	r1, #0
 8005670:	2d01      	cmp	r5, #1
 8005672:	f300 809a 	bgt.w	80057aa <__kernel_rem_pio2+0x66a>
 8005676:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800567a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800567e:	f1bb 0f00 	cmp.w	fp, #0
 8005682:	f040 8098 	bne.w	80057b6 <__kernel_rem_pio2+0x676>
 8005686:	9b04      	ldr	r3, [sp, #16]
 8005688:	e9c3 7800 	strd	r7, r8, [r3]
 800568c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005690:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005694:	e7c6      	b.n	8005624 <__kernel_rem_pio2+0x4e4>
 8005696:	9e05      	ldr	r6, [sp, #20]
 8005698:	ab48      	add	r3, sp, #288	; 0x120
 800569a:	441e      	add	r6, r3
 800569c:	462c      	mov	r4, r5
 800569e:	2000      	movs	r0, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	2c00      	cmp	r4, #0
 80056a4:	da33      	bge.n	800570e <__kernel_rem_pio2+0x5ce>
 80056a6:	f1bb 0f00 	cmp.w	fp, #0
 80056aa:	d036      	beq.n	800571a <__kernel_rem_pio2+0x5da>
 80056ac:	4602      	mov	r2, r0
 80056ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056b2:	9c04      	ldr	r4, [sp, #16]
 80056b4:	e9c4 2300 	strd	r2, r3, [r4]
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80056c0:	f7fa fdda 	bl	8000278 <__aeabi_dsub>
 80056c4:	ae4a      	add	r6, sp, #296	; 0x128
 80056c6:	2401      	movs	r4, #1
 80056c8:	42a5      	cmp	r5, r4
 80056ca:	da29      	bge.n	8005720 <__kernel_rem_pio2+0x5e0>
 80056cc:	f1bb 0f00 	cmp.w	fp, #0
 80056d0:	d002      	beq.n	80056d8 <__kernel_rem_pio2+0x598>
 80056d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056d6:	4619      	mov	r1, r3
 80056d8:	9b04      	ldr	r3, [sp, #16]
 80056da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80056de:	e7a1      	b.n	8005624 <__kernel_rem_pio2+0x4e4>
 80056e0:	9c05      	ldr	r4, [sp, #20]
 80056e2:	ab48      	add	r3, sp, #288	; 0x120
 80056e4:	441c      	add	r4, r3
 80056e6:	2000      	movs	r0, #0
 80056e8:	2100      	movs	r1, #0
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	da09      	bge.n	8005702 <__kernel_rem_pio2+0x5c2>
 80056ee:	f1bb 0f00 	cmp.w	fp, #0
 80056f2:	d002      	beq.n	80056fa <__kernel_rem_pio2+0x5ba>
 80056f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056f8:	4619      	mov	r1, r3
 80056fa:	9b04      	ldr	r3, [sp, #16]
 80056fc:	e9c3 0100 	strd	r0, r1, [r3]
 8005700:	e790      	b.n	8005624 <__kernel_rem_pio2+0x4e4>
 8005702:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005706:	f7fa fdb9 	bl	800027c <__adddf3>
 800570a:	3d01      	subs	r5, #1
 800570c:	e7ed      	b.n	80056ea <__kernel_rem_pio2+0x5aa>
 800570e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005712:	f7fa fdb3 	bl	800027c <__adddf3>
 8005716:	3c01      	subs	r4, #1
 8005718:	e7c3      	b.n	80056a2 <__kernel_rem_pio2+0x562>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	e7c8      	b.n	80056b2 <__kernel_rem_pio2+0x572>
 8005720:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005724:	f7fa fdaa 	bl	800027c <__adddf3>
 8005728:	3401      	adds	r4, #1
 800572a:	e7cd      	b.n	80056c8 <__kernel_rem_pio2+0x588>
 800572c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005730:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005734:	9b00      	ldr	r3, [sp, #0]
 8005736:	3b01      	subs	r3, #1
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4632      	mov	r2, r6
 800573c:	463b      	mov	r3, r7
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f7fa fd9b 	bl	800027c <__adddf3>
 8005746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fa fd91 	bl	8000278 <__aeabi_dsub>
 8005756:	4632      	mov	r2, r6
 8005758:	463b      	mov	r3, r7
 800575a:	f7fa fd8f 	bl	800027c <__adddf3>
 800575e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005762:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005766:	ed8a 7b00 	vstr	d7, [sl]
 800576a:	e770      	b.n	800564e <__kernel_rem_pio2+0x50e>
 800576c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005770:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005774:	4640      	mov	r0, r8
 8005776:	4632      	mov	r2, r6
 8005778:	463b      	mov	r3, r7
 800577a:	4649      	mov	r1, r9
 800577c:	f7fa fd7e 	bl	800027c <__adddf3>
 8005780:	e9cd 0100 	strd	r0, r1, [sp]
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4640      	mov	r0, r8
 800578a:	4649      	mov	r1, r9
 800578c:	f7fa fd74 	bl	8000278 <__aeabi_dsub>
 8005790:	4632      	mov	r2, r6
 8005792:	463b      	mov	r3, r7
 8005794:	f7fa fd72 	bl	800027c <__adddf3>
 8005798:	ed9d 7b00 	vldr	d7, [sp]
 800579c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80057a0:	ed84 7b00 	vstr	d7, [r4]
 80057a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057a8:	e757      	b.n	800565a <__kernel_rem_pio2+0x51a>
 80057aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80057ae:	f7fa fd65 	bl	800027c <__adddf3>
 80057b2:	3d01      	subs	r5, #1
 80057b4:	e75c      	b.n	8005670 <__kernel_rem_pio2+0x530>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	9a04      	ldr	r2, [sp, #16]
 80057ba:	601f      	str	r7, [r3, #0]
 80057bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80057c0:	605c      	str	r4, [r3, #4]
 80057c2:	609d      	str	r5, [r3, #8]
 80057c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057c8:	60d3      	str	r3, [r2, #12]
 80057ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057ce:	6110      	str	r0, [r2, #16]
 80057d0:	6153      	str	r3, [r2, #20]
 80057d2:	e727      	b.n	8005624 <__kernel_rem_pio2+0x4e4>
 80057d4:	41700000 	.word	0x41700000
 80057d8:	3e700000 	.word	0x3e700000
 80057dc:	00000000 	.word	0x00000000

080057e0 <scalbn>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	ec55 4b10 	vmov	r4, r5, d0
 80057e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80057ea:	4606      	mov	r6, r0
 80057ec:	462b      	mov	r3, r5
 80057ee:	b999      	cbnz	r1, 8005818 <scalbn+0x38>
 80057f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80057f4:	4323      	orrs	r3, r4
 80057f6:	d03f      	beq.n	8005878 <scalbn+0x98>
 80057f8:	4b35      	ldr	r3, [pc, #212]	; (80058d0 <scalbn+0xf0>)
 80057fa:	4629      	mov	r1, r5
 80057fc:	ee10 0a10 	vmov	r0, s0
 8005800:	2200      	movs	r2, #0
 8005802:	f7fa fef1 	bl	80005e8 <__aeabi_dmul>
 8005806:	4b33      	ldr	r3, [pc, #204]	; (80058d4 <scalbn+0xf4>)
 8005808:	429e      	cmp	r6, r3
 800580a:	4604      	mov	r4, r0
 800580c:	460d      	mov	r5, r1
 800580e:	da10      	bge.n	8005832 <scalbn+0x52>
 8005810:	a327      	add	r3, pc, #156	; (adr r3, 80058b0 <scalbn+0xd0>)
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	e01f      	b.n	8005858 <scalbn+0x78>
 8005818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800581c:	4291      	cmp	r1, r2
 800581e:	d10c      	bne.n	800583a <scalbn+0x5a>
 8005820:	ee10 2a10 	vmov	r2, s0
 8005824:	4620      	mov	r0, r4
 8005826:	4629      	mov	r1, r5
 8005828:	f7fa fd28 	bl	800027c <__adddf3>
 800582c:	4604      	mov	r4, r0
 800582e:	460d      	mov	r5, r1
 8005830:	e022      	b.n	8005878 <scalbn+0x98>
 8005832:	460b      	mov	r3, r1
 8005834:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005838:	3936      	subs	r1, #54	; 0x36
 800583a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800583e:	4296      	cmp	r6, r2
 8005840:	dd0d      	ble.n	800585e <scalbn+0x7e>
 8005842:	2d00      	cmp	r5, #0
 8005844:	a11c      	add	r1, pc, #112	; (adr r1, 80058b8 <scalbn+0xd8>)
 8005846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800584a:	da02      	bge.n	8005852 <scalbn+0x72>
 800584c:	a11c      	add	r1, pc, #112	; (adr r1, 80058c0 <scalbn+0xe0>)
 800584e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005852:	a319      	add	r3, pc, #100	; (adr r3, 80058b8 <scalbn+0xd8>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f7fa fec6 	bl	80005e8 <__aeabi_dmul>
 800585c:	e7e6      	b.n	800582c <scalbn+0x4c>
 800585e:	1872      	adds	r2, r6, r1
 8005860:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005864:	428a      	cmp	r2, r1
 8005866:	dcec      	bgt.n	8005842 <scalbn+0x62>
 8005868:	2a00      	cmp	r2, #0
 800586a:	dd08      	ble.n	800587e <scalbn+0x9e>
 800586c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005870:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005874:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005878:	ec45 4b10 	vmov	d0, r4, r5
 800587c:	bd70      	pop	{r4, r5, r6, pc}
 800587e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005882:	da08      	bge.n	8005896 <scalbn+0xb6>
 8005884:	2d00      	cmp	r5, #0
 8005886:	a10a      	add	r1, pc, #40	; (adr r1, 80058b0 <scalbn+0xd0>)
 8005888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800588c:	dac0      	bge.n	8005810 <scalbn+0x30>
 800588e:	a10e      	add	r1, pc, #56	; (adr r1, 80058c8 <scalbn+0xe8>)
 8005890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005894:	e7bc      	b.n	8005810 <scalbn+0x30>
 8005896:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800589a:	3236      	adds	r2, #54	; 0x36
 800589c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80058a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80058a4:	4620      	mov	r0, r4
 80058a6:	4b0c      	ldr	r3, [pc, #48]	; (80058d8 <scalbn+0xf8>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	e7d5      	b.n	8005858 <scalbn+0x78>
 80058ac:	f3af 8000 	nop.w
 80058b0:	c2f8f359 	.word	0xc2f8f359
 80058b4:	01a56e1f 	.word	0x01a56e1f
 80058b8:	8800759c 	.word	0x8800759c
 80058bc:	7e37e43c 	.word	0x7e37e43c
 80058c0:	8800759c 	.word	0x8800759c
 80058c4:	fe37e43c 	.word	0xfe37e43c
 80058c8:	c2f8f359 	.word	0xc2f8f359
 80058cc:	81a56e1f 	.word	0x81a56e1f
 80058d0:	43500000 	.word	0x43500000
 80058d4:	ffff3cb0 	.word	0xffff3cb0
 80058d8:	3c900000 	.word	0x3c900000
 80058dc:	00000000 	.word	0x00000000

080058e0 <floor>:
 80058e0:	ec51 0b10 	vmov	r0, r1, d0
 80058e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80058f0:	2e13      	cmp	r6, #19
 80058f2:	ee10 5a10 	vmov	r5, s0
 80058f6:	ee10 8a10 	vmov	r8, s0
 80058fa:	460c      	mov	r4, r1
 80058fc:	dc31      	bgt.n	8005962 <floor+0x82>
 80058fe:	2e00      	cmp	r6, #0
 8005900:	da14      	bge.n	800592c <floor+0x4c>
 8005902:	a333      	add	r3, pc, #204	; (adr r3, 80059d0 <floor+0xf0>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	f7fa fcb8 	bl	800027c <__adddf3>
 800590c:	2200      	movs	r2, #0
 800590e:	2300      	movs	r3, #0
 8005910:	f7fb f8fa 	bl	8000b08 <__aeabi_dcmpgt>
 8005914:	b138      	cbz	r0, 8005926 <floor+0x46>
 8005916:	2c00      	cmp	r4, #0
 8005918:	da53      	bge.n	80059c2 <floor+0xe2>
 800591a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800591e:	4325      	orrs	r5, r4
 8005920:	d052      	beq.n	80059c8 <floor+0xe8>
 8005922:	4c2d      	ldr	r4, [pc, #180]	; (80059d8 <floor+0xf8>)
 8005924:	2500      	movs	r5, #0
 8005926:	4621      	mov	r1, r4
 8005928:	4628      	mov	r0, r5
 800592a:	e024      	b.n	8005976 <floor+0x96>
 800592c:	4f2b      	ldr	r7, [pc, #172]	; (80059dc <floor+0xfc>)
 800592e:	4137      	asrs	r7, r6
 8005930:	ea01 0307 	and.w	r3, r1, r7
 8005934:	4303      	orrs	r3, r0
 8005936:	d01e      	beq.n	8005976 <floor+0x96>
 8005938:	a325      	add	r3, pc, #148	; (adr r3, 80059d0 <floor+0xf0>)
 800593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593e:	f7fa fc9d 	bl	800027c <__adddf3>
 8005942:	2200      	movs	r2, #0
 8005944:	2300      	movs	r3, #0
 8005946:	f7fb f8df 	bl	8000b08 <__aeabi_dcmpgt>
 800594a:	2800      	cmp	r0, #0
 800594c:	d0eb      	beq.n	8005926 <floor+0x46>
 800594e:	2c00      	cmp	r4, #0
 8005950:	bfbe      	ittt	lt
 8005952:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005956:	4133      	asrlt	r3, r6
 8005958:	18e4      	addlt	r4, r4, r3
 800595a:	ea24 0407 	bic.w	r4, r4, r7
 800595e:	2500      	movs	r5, #0
 8005960:	e7e1      	b.n	8005926 <floor+0x46>
 8005962:	2e33      	cmp	r6, #51	; 0x33
 8005964:	dd0b      	ble.n	800597e <floor+0x9e>
 8005966:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800596a:	d104      	bne.n	8005976 <floor+0x96>
 800596c:	ee10 2a10 	vmov	r2, s0
 8005970:	460b      	mov	r3, r1
 8005972:	f7fa fc83 	bl	800027c <__adddf3>
 8005976:	ec41 0b10 	vmov	d0, r0, r1
 800597a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800597e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8005982:	f04f 37ff 	mov.w	r7, #4294967295
 8005986:	40df      	lsrs	r7, r3
 8005988:	4238      	tst	r0, r7
 800598a:	d0f4      	beq.n	8005976 <floor+0x96>
 800598c:	a310      	add	r3, pc, #64	; (adr r3, 80059d0 <floor+0xf0>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fc73 	bl	800027c <__adddf3>
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	f7fb f8b5 	bl	8000b08 <__aeabi_dcmpgt>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d0c1      	beq.n	8005926 <floor+0x46>
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	da0a      	bge.n	80059bc <floor+0xdc>
 80059a6:	2e14      	cmp	r6, #20
 80059a8:	d101      	bne.n	80059ae <floor+0xce>
 80059aa:	3401      	adds	r4, #1
 80059ac:	e006      	b.n	80059bc <floor+0xdc>
 80059ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80059b2:	2301      	movs	r3, #1
 80059b4:	40b3      	lsls	r3, r6
 80059b6:	441d      	add	r5, r3
 80059b8:	45a8      	cmp	r8, r5
 80059ba:	d8f6      	bhi.n	80059aa <floor+0xca>
 80059bc:	ea25 0507 	bic.w	r5, r5, r7
 80059c0:	e7b1      	b.n	8005926 <floor+0x46>
 80059c2:	2500      	movs	r5, #0
 80059c4:	462c      	mov	r4, r5
 80059c6:	e7ae      	b.n	8005926 <floor+0x46>
 80059c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80059cc:	e7ab      	b.n	8005926 <floor+0x46>
 80059ce:	bf00      	nop
 80059d0:	8800759c 	.word	0x8800759c
 80059d4:	7e37e43c 	.word	0x7e37e43c
 80059d8:	bff00000 	.word	0xbff00000
 80059dc:	000fffff 	.word	0x000fffff

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
