
DTMF_Generate_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004940  08004940  00014940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
  8 .bss          000005b4  20000060  20000060  00020060  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000614  20000614  00020060  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014178  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e8  00000000  00000000  0003424b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000076ce  00000000  00000000  00037333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0003ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d14  00000000  00000000  0003f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022df2  00000000  00000000  000403c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001893d  00000000  00000000  000631b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d21a7  00000000  00000000  0007baf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e6c  00000000  00000000  0014dc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00150b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004928 	.word	0x08004928

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08004928 	.word	0x08004928

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_InitTick+0x3c>)
 8000e64:	781a      	ldrb	r2, [r3, #0]
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ea0 <HAL_InitTick+0x40>)
{
 8000e70:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e72:	6810      	ldr	r0, [r2, #0]
 8000e74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e78:	f000 fadc 	bl	8001434 <HAL_SYSTICK_Config>
 8000e7c:	4604      	mov	r4, r0
 8000e7e:	b958      	cbnz	r0, 8000e98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e80:	2d0f      	cmp	r5, #15
 8000e82:	d809      	bhi.n	8000e98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	4602      	mov	r2, r0
 8000e86:	4629      	mov	r1, r5
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 fa92 	bl	80013b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <HAL_InitTick+0x44>)
 8000e92:	4620      	mov	r0, r4
 8000e94:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e98:	2001      	movs	r0, #1
 8000e9a:	e7fc      	b.n	8000e96 <HAL_InitTick+0x36>
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	2000000c 	.word	0x2000000c
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <HAL_Init>:
{
 8000ea8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x30>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ec2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fa63 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff ffc8 	bl	8000e60 <HAL_InitTick>
  HAL_MspInit();
 8000ed0:	f002 fa2c 	bl	800332c <HAL_MspInit>
}
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	bd08      	pop	{r3, pc}
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <HAL_IncTick+0x10>)
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_IncTick+0x14>)
 8000ee0:	6811      	ldr	r1, [r2, #0]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	2000007c 	.word	0x2000007c
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ef4:	4b01      	ldr	r3, [pc, #4]	; (8000efc <HAL_GetTick+0x8>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000007c 	.word	0x2000007c

08000f00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f00:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f02:	4604      	mov	r4, r0
 8000f04:	2800      	cmp	r0, #0
 8000f06:	f000 809b 	beq.w	8001040 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f0a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000f0c:	b925      	cbnz	r5, 8000f18 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f0e:	f002 fa29 	bl	8003364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f12:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f14:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f1a:	06db      	lsls	r3, r3, #27
 8000f1c:	f100 808e 	bmi.w	800103c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f30:	4b44      	ldr	r3, [pc, #272]	; (8001044 <HAL_ADC_Init+0x144>)
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f38:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	6861      	ldr	r1, [r4, #4]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f42:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f44:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f56:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f58:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f5a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f66:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f68:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f76:	4934      	ldr	r1, [pc, #208]	; (8001048 <HAL_ADC_Init+0x148>)
 8000f78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	d052      	beq.n	8001024 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f7e:	6899      	ldr	r1, [r3, #8]
 8000f80:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000f84:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f8c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f9a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	f022 0202 	bic.w	r2, r2, #2
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	7e21      	ldrb	r1, [r4, #24]
 8000fa8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000fac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fae:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d03e      	beq.n	8001034 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fb6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	3901      	subs	r1, #1
 8000fcc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fd0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000fd4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000fd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fde:	3901      	subs	r1, #1
 8000fe0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8000ff4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000ff8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ffa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ffc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001004:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001006:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001008:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800100c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800100e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001010:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800101c:	2300      	movs	r3, #0
 800101e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001022:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800102a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001032:	e7b2      	b.n	8000f9a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800103a:	e7c9      	b.n	8000fd0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800103c:	2001      	movs	r0, #1
 800103e:	e7ed      	b.n	800101c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
 8001042:	e7ee      	b.n	8001022 <HAL_ADC_Init+0x122>
 8001044:	40012300 	.word	0x40012300
 8001048:	0f000001 	.word	0x0f000001

0800104c <HAL_ADC_Start_IT>:
{
 800104c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001052:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001056:	2b01      	cmp	r3, #1
 8001058:	d066      	beq.n	8001128 <HAL_ADC_Start_IT+0xdc>
 800105a:	2301      	movs	r3, #1
 800105c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001060:	6803      	ldr	r3, [r0, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	07d2      	lsls	r2, r2, #31
 8001066:	d505      	bpl.n	8001074 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	07d1      	lsls	r1, r2, #31
 800106c:	d414      	bmi.n	8001098 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 800106e:	2000      	movs	r0, #0
}
 8001070:	b002      	add	sp, #8
 8001072:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8001074:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001076:	492d      	ldr	r1, [pc, #180]	; (800112c <HAL_ADC_Start_IT+0xe0>)
    __HAL_ADC_ENABLE(hadc);
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800107e:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <HAL_ADC_Start_IT+0xe4>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	fbb2 f2f1 	udiv	r2, r2, r1
 8001086:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 800108a:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 800108c:	9a01      	ldr	r2, [sp, #4]
 800108e:	2a00      	cmp	r2, #0
 8001090:	d0ea      	beq.n	8001068 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8001092:	9a01      	ldr	r2, [sp, #4]
 8001094:	3a01      	subs	r2, #1
 8001096:	e7f8      	b.n	800108a <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800109a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a6:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ac:	bf41      	itttt	mi
 80010ae:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 80010b0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80010b4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80010b8:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80010bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010c0:	bf1c      	itt	ne
 80010c2:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 80010c4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010d4:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010dc:	f042 0220 	orr.w	r2, r2, #32
 80010e0:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_ADC_Start_IT+0xe8>)
 80010e4:	6851      	ldr	r1, [r2, #4]
 80010e6:	f011 0f1f 	tst.w	r1, #31
 80010ea:	4913      	ldr	r1, [pc, #76]	; (8001138 <HAL_ADC_Start_IT+0xec>)
 80010ec:	d119      	bne.n	8001122 <HAL_ADC_Start_IT+0xd6>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d007      	beq.n	8001102 <HAL_ADC_Start_IT+0xb6>
 80010f2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80010f6:	428b      	cmp	r3, r1
 80010f8:	d10c      	bne.n	8001114 <HAL_ADC_Start_IT+0xc8>
 80010fa:	6852      	ldr	r2, [r2, #4]
 80010fc:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001100:	d1b5      	bne.n	800106e <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001102:	6898      	ldr	r0, [r3, #8]
 8001104:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001108:	d1b1      	bne.n	800106e <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	e7ad      	b.n	8001070 <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001114:	4909      	ldr	r1, [pc, #36]	; (800113c <HAL_ADC_Start_IT+0xf0>)
 8001116:	428b      	cmp	r3, r1
 8001118:	d1a9      	bne.n	800106e <HAL_ADC_Start_IT+0x22>
 800111a:	6852      	ldr	r2, [r2, #4]
 800111c:	f012 0f10 	tst.w	r2, #16
 8001120:	e7ee      	b.n	8001100 <HAL_ADC_Start_IT+0xb4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001122:	428b      	cmp	r3, r1
 8001124:	d1a3      	bne.n	800106e <HAL_ADC_Start_IT+0x22>
 8001126:	e7ec      	b.n	8001102 <HAL_ADC_Start_IT+0xb6>
  __HAL_LOCK(hadc);
 8001128:	2002      	movs	r0, #2
 800112a:	e7a1      	b.n	8001070 <HAL_ADC_Start_IT+0x24>
 800112c:	000f4240 	.word	0x000f4240
 8001130:	2000000c 	.word	0x2000000c
 8001134:	40012300 	.word	0x40012300
 8001138:	40012000 	.word	0x40012000
 800113c:	40012200 	.word	0x40012200

08001140 <HAL_ADC_LevelOutOfWindowCallback>:
 8001140:	4770      	bx	lr

08001142 <HAL_ADC_ErrorCallback>:
 8001142:	4770      	bx	lr

08001144 <HAL_ADC_IRQHandler>:
{
 8001144:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	6803      	ldr	r3, [r0, #0]
 8001148:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800114a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800114c:	078d      	lsls	r5, r1, #30
{
 800114e:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8001150:	d52b      	bpl.n	80011aa <HAL_ADC_IRQHandler+0x66>
 8001152:	0690      	lsls	r0, r2, #26
 8001154:	d529      	bpl.n	80011aa <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001156:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001158:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800115a:	bf5e      	ittt	pl
 800115c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800115e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001162:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800116a:	d117      	bne.n	800119c <HAL_ADC_IRQHandler+0x58>
 800116c:	7e22      	ldrb	r2, [r4, #24]
 800116e:	b9aa      	cbnz	r2, 800119c <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001172:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001176:	d002      	beq.n	800117e <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001178:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800117a:	0552      	lsls	r2, r2, #21
 800117c:	d40e      	bmi.n	800119c <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	f022 0220 	bic.w	r2, r2, #32
 8001184:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800118c:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800118e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001190:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001192:	bf5e      	ittt	pl
 8001194:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001196:	f043 0301 	orrpl.w	r3, r3, #1
 800119a:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800119c:	4620      	mov	r0, r4
 800119e:	f001 fe15 	bl	8002dcc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	f06f 0212 	mvn.w	r2, #18
 80011a8:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011ae:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80011b0:	074d      	lsls	r5, r1, #29
 80011b2:	d532      	bpl.n	800121a <HAL_ADC_IRQHandler+0xd6>
 80011b4:	0610      	lsls	r0, r2, #24
 80011b6:	d530      	bpl.n	800121a <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011ba:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80011bc:	bf5e      	ittt	pl
 80011be:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80011c0:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80011c4:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80011cc:	d11e      	bne.n	800120c <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80011d0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80011d4:	d002      	beq.n	80011dc <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011d6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011d8:	0552      	lsls	r2, r2, #21
 80011da:	d417      	bmi.n	800120c <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011dc:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011de:	0555      	lsls	r5, r2, #21
 80011e0:	d414      	bmi.n	800120c <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011e2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011e4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80011e8:	d110      	bne.n	800120c <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011ea:	7e22      	ldrb	r2, [r4, #24]
 80011ec:	b972      	cbnz	r2, 800120c <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f4:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011fc:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001200:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001202:	bf5e      	ittt	pl
 8001204:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001206:	f043 0301 	orrpl.w	r3, r3, #1
 800120a:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800120c:	4620      	mov	r0, r4
 800120e:	f000 f8bd 	bl	800138c <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	f06f 020c 	mvn.w	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800121e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001220:	07c9      	lsls	r1, r1, #31
 8001222:	d50f      	bpl.n	8001244 <HAL_ADC_IRQHandler+0x100>
 8001224:	0655      	lsls	r5, r2, #25
 8001226:	d50d      	bpl.n	8001244 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	07d8      	lsls	r0, r3, #31
 800122c:	d50a      	bpl.n	8001244 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800122e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001236:	4620      	mov	r0, r4
 8001238:	f7ff ff82 	bl	8001140 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f06f 0201 	mvn.w	r2, #1
 8001242:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001248:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800124a:	0689      	lsls	r1, r1, #26
 800124c:	d50d      	bpl.n	800126a <HAL_ADC_IRQHandler+0x126>
 800124e:	0152      	lsls	r2, r2, #5
 8001250:	d50b      	bpl.n	800126a <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001252:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001254:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001258:	f042 0202 	orr.w	r2, r2, #2
 800125c:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 800125e:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001260:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001262:	f7ff ff6e 	bl	8001142 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	601d      	str	r5, [r3, #0]
}
 800126a:	bd38      	pop	{r3, r4, r5, pc}

0800126c <HAL_ADC_ConfigChannel>:
{
 800126c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001272:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001276:	2b01      	cmp	r3, #1
 8001278:	d064      	beq.n	8001344 <HAL_ADC_ConfigChannel+0xd8>
 800127a:	2301      	movs	r3, #1
 800127c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001280:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001282:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001284:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001286:	2d09      	cmp	r5, #9
 8001288:	b2ac      	uxth	r4, r5
 800128a:	d931      	bls.n	80012f0 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800128c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001290:	68df      	ldr	r7, [r3, #12]
 8001292:	3a1e      	subs	r2, #30
 8001294:	f04f 0c07 	mov.w	ip, #7
 8001298:	fa0c fc02 	lsl.w	ip, ip, r2
 800129c:	ea27 070c 	bic.w	r7, r7, ip
 80012a0:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012a2:	68df      	ldr	r7, [r3, #12]
 80012a4:	fa06 f202 	lsl.w	r2, r6, r2
 80012a8:	433a      	orrs	r2, r7
 80012aa:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 80012ac:	6849      	ldr	r1, [r1, #4]
 80012ae:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012b0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 80012b4:	d82b      	bhi.n	800130e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b8:	3a05      	subs	r2, #5
 80012ba:	261f      	movs	r6, #31
 80012bc:	4096      	lsls	r6, r2
 80012be:	ea21 0106 	bic.w	r1, r1, r6
 80012c2:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012c6:	fa04 f202 	lsl.w	r2, r4, r2
 80012ca:	430a      	orrs	r2, r1
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ce:	4a2b      	ldr	r2, [pc, #172]	; (800137c <HAL_ADC_ConfigChannel+0x110>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d107      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x78>
 80012d4:	2d12      	cmp	r5, #18
 80012d6:	d137      	bne.n	8001348 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012d8:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 80012e4:	2300      	movs	r3, #0
 80012e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80012ea:	4618      	mov	r0, r3
}
 80012ec:	b003      	add	sp, #12
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80012f6:	2707      	movs	r7, #7
 80012f8:	fa07 f70c 	lsl.w	r7, r7, ip
 80012fc:	ea22 0207 	bic.w	r2, r2, r7
 8001300:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	fa06 f60c 	lsl.w	r6, r6, ip
 8001308:	4316      	orrs	r6, r2
 800130a:	611e      	str	r6, [r3, #16]
 800130c:	e7ce      	b.n	80012ac <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800130e:	290c      	cmp	r1, #12
 8001310:	f04f 011f 	mov.w	r1, #31
 8001314:	d80b      	bhi.n	800132e <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001316:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001318:	3a23      	subs	r2, #35	; 0x23
 800131a:	4091      	lsls	r1, r2
 800131c:	ea26 0101 	bic.w	r1, r6, r1
 8001320:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001324:	fa04 f202 	lsl.w	r2, r4, r2
 8001328:	430a      	orrs	r2, r1
 800132a:	631a      	str	r2, [r3, #48]	; 0x30
 800132c:	e7cf      	b.n	80012ce <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800132e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001330:	3a41      	subs	r2, #65	; 0x41
 8001332:	4091      	lsls	r1, r2
 8001334:	ea26 0101 	bic.w	r1, r6, r1
 8001338:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800133a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800133c:	4094      	lsls	r4, r2
 800133e:	430c      	orrs	r4, r1
 8001340:	62dc      	str	r4, [r3, #44]	; 0x2c
 8001342:	e7c4      	b.n	80012ce <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001344:	2002      	movs	r0, #2
 8001346:	e7d1      	b.n	80012ec <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001348:	f1a5 0310 	sub.w	r3, r5, #16
 800134c:	2b01      	cmp	r3, #1
 800134e:	d8c9      	bhi.n	80012e4 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_ADC_ConfigChannel+0x114>)
 8001352:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001354:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800135a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800135c:	d1c2      	bne.n	80012e4 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_ADC_ConfigChannel+0x118>)
 8001360:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_ADC_ConfigChannel+0x11c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	fbb3 f3f2 	udiv	r3, r3, r2
 8001368:	220a      	movs	r2, #10
 800136a:	4353      	muls	r3, r2
        counter--;
 800136c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0b7      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	e7f8      	b.n	800136c <HAL_ADC_ConfigChannel+0x100>
 800137a:	bf00      	nop
 800137c:	40012000 	.word	0x40012000
 8001380:	40012300 	.word	0x40012300
 8001384:	2000000c 	.word	0x2000000c
 8001388:	000f4240 	.word	0x000f4240

0800138c <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800138c:	4770      	bx	lr
	...

08001390 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001392:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001394:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b530      	push	{r4, r5, lr}
 80013b8:	68dc      	ldr	r4, [r3, #12]
 80013ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	bf28      	it	cs
 80013c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d0:	bf8c      	ite	hi
 80013d2:	3c03      	subhi	r4, #3
 80013d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d6:	fa05 f303 	lsl.w	r3, r5, r3
 80013da:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013de:	40a5      	lsls	r5, r4
 80013e0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80013e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	bfac      	ite	ge
 80013ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	4a08      	ldrlt	r2, [pc, #32]	; (8001414 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	bfb8      	it	lt
 80013fa:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	bfaa      	itet	ge
 8001402:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800140c:	bd30      	pop	{r4, r5, pc}
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00
 8001414:	e000ed14 	.word	0xe000ed14

08001418 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001418:	2800      	cmp	r0, #0
 800141a:	db07      	blt.n	800142c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141c:	0941      	lsrs	r1, r0, #5
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_NVIC_EnableIRQ+0x18>)
 8001420:	f000 001f 	and.w	r0, r0, #31
 8001424:	2301      	movs	r3, #1
 8001426:	4083      	lsls	r3, r0
 8001428:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	3801      	subs	r0, #1
 8001436:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800143a:	d20b      	bcs.n	8001454 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	4a05      	ldr	r2, [pc, #20]	; (8001458 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	21f0      	movs	r1, #240	; 0xf0
 8001446:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001450:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001452:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001454:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001460:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <HAL_GPIO_Init+0x1bc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001620 <HAL_GPIO_Init+0x1c4>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001466:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001624 <HAL_GPIO_Init+0x1c8>
{
 800146a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8001470:	2701      	movs	r7, #1
 8001472:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001474:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8001478:	ea37 0404 	bics.w	r4, r7, r4
 800147c:	f040 80b7 	bne.w	80015ee <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	684c      	ldr	r4, [r1, #4]
 8001482:	f024 0a10 	bic.w	sl, r4, #16
 8001486:	f1ba 0f02 	cmp.w	sl, #2
 800148a:	d116      	bne.n	80014ba <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 800148c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001490:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001494:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001498:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80014a0:	f04f 0c0f 	mov.w	ip, #15
 80014a4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80014a8:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	690e      	ldr	r6, [r1, #16]
 80014ae:	fa06 f60b 	lsl.w	r6, r6, fp
 80014b2:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 80014b6:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 80014ba:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014be:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80014c2:	f04f 0c03 	mov.w	ip, #3
 80014c6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80014ca:	ea6f 060c 	mvn.w	r6, ip
 80014ce:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d2:	f004 0c03 	and.w	ip, r4, #3
 80014d6:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014da:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014de:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e2:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e6:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 80014e8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ec:	d813      	bhi.n	8001516 <HAL_GPIO_Init+0xba>
        temp = GPIOx->OSPEEDR; 
 80014ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f2:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	68ce      	ldr	r6, [r1, #12]
 80014f8:	fa06 fa0e 	lsl.w	sl, r6, lr
 80014fc:	ea4a 0a0c 	orr.w	sl, sl, ip
        GPIOx->OSPEEDR = temp;
 8001500:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 8001504:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001508:	ea2c 0c07 	bic.w	ip, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800150c:	0927      	lsrs	r7, r4, #4
 800150e:	409f      	lsls	r7, r3
 8001510:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001514:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001516:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001518:	9e01      	ldr	r6, [sp, #4]
 800151a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	688e      	ldr	r6, [r1, #8]
 800151e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001522:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001524:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	00e6      	lsls	r6, r4, #3
 8001528:	d561      	bpl.n	80015ee <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	f04f 0b00 	mov.w	fp, #0
 800152e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001532:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001536:	4e39      	ldr	r6, [pc, #228]	; (800161c <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800153c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001540:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001544:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001548:	9703      	str	r7, [sp, #12]
 800154a:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800154c:	f023 0703 	bic.w	r7, r3, #3
 8001550:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001554:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001558:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800155c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001560:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001564:	f04f 0c0f 	mov.w	ip, #15
 8001568:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800156c:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800156e:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001572:	d043      	beq.n	80015fc <HAL_GPIO_Init+0x1a0>
 8001574:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001578:	42b0      	cmp	r0, r6
 800157a:	d041      	beq.n	8001600 <HAL_GPIO_Init+0x1a4>
 800157c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001580:	42b0      	cmp	r0, r6
 8001582:	d03f      	beq.n	8001604 <HAL_GPIO_Init+0x1a8>
 8001584:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001588:	42b0      	cmp	r0, r6
 800158a:	d03d      	beq.n	8001608 <HAL_GPIO_Init+0x1ac>
 800158c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001590:	42b0      	cmp	r0, r6
 8001592:	d03b      	beq.n	800160c <HAL_GPIO_Init+0x1b0>
 8001594:	4548      	cmp	r0, r9
 8001596:	d03b      	beq.n	8001610 <HAL_GPIO_Init+0x1b4>
 8001598:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800159c:	42b0      	cmp	r0, r6
 800159e:	d039      	beq.n	8001614 <HAL_GPIO_Init+0x1b8>
 80015a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015a4:	42b0      	cmp	r0, r6
 80015a6:	bf0c      	ite	eq
 80015a8:	2607      	moveq	r6, #7
 80015aa:	2608      	movne	r6, #8
 80015ac:	fa06 f60e 	lsl.w	r6, r6, lr
 80015b0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80015b6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80015be:	bf0c      	ite	eq
 80015c0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80015c2:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80015c4:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80015c6:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80015cc:	bf0c      	ite	eq
 80015ce:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80015d0:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80015d2:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d4:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80015da:	bf0c      	ite	eq
 80015dc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80015de:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80015e0:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80015e2:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80015e6:	bf54      	ite	pl
 80015e8:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80015ea:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80015ec:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	3301      	adds	r3, #1
 80015f0:	2b10      	cmp	r3, #16
 80015f2:	f47f af3c 	bne.w	800146e <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 80015f6:	b005      	add	sp, #20
 80015f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fc:	465e      	mov	r6, fp
 80015fe:	e7d5      	b.n	80015ac <HAL_GPIO_Init+0x150>
 8001600:	2601      	movs	r6, #1
 8001602:	e7d3      	b.n	80015ac <HAL_GPIO_Init+0x150>
 8001604:	2602      	movs	r6, #2
 8001606:	e7d1      	b.n	80015ac <HAL_GPIO_Init+0x150>
 8001608:	2603      	movs	r6, #3
 800160a:	e7cf      	b.n	80015ac <HAL_GPIO_Init+0x150>
 800160c:	2604      	movs	r6, #4
 800160e:	e7cd      	b.n	80015ac <HAL_GPIO_Init+0x150>
 8001610:	2605      	movs	r6, #5
 8001612:	e7cb      	b.n	80015ac <HAL_GPIO_Init+0x150>
 8001614:	2606      	movs	r6, #6
 8001616:	e7c9      	b.n	80015ac <HAL_GPIO_Init+0x150>
 8001618:	40013c00 	.word	0x40013c00
 800161c:	40020000 	.word	0x40020000
 8001620:	40023800 	.word	0x40023800
 8001624:	40021400 	.word	0x40021400

08001628 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	b10a      	cbz	r2, 800162e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162a:	6181      	str	r1, [r0, #24]
  }
}
 800162c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	0409      	lsls	r1, r1, #16
 8001630:	e7fb      	b.n	800162a <HAL_GPIO_WritePin+0x2>

08001632 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001632:	6801      	ldr	r1, [r0, #0]
 8001634:	694b      	ldr	r3, [r1, #20]
 8001636:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	d010      	beq.n	8001662 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001640:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001644:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001646:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001648:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800164a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800164e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001652:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001654:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800165e:	2001      	movs	r0, #1
 8001660:	4770      	bx	lr
  }
  return HAL_OK;
 8001662:	4618      	mov	r0, r3
}
 8001664:	4770      	bx	lr

08001666 <I2C_WaitOnFlagUntilTimeout>:
{
 8001666:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800166a:	4606      	mov	r6, r0
 800166c:	460f      	mov	r7, r1
 800166e:	4691      	mov	r9, r2
 8001670:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001672:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001676:	6833      	ldr	r3, [r6, #0]
 8001678:	f1ba 0f01 	cmp.w	sl, #1
 800167c:	bf0c      	ite	eq
 800167e:	695c      	ldreq	r4, [r3, #20]
 8001680:	699c      	ldrne	r4, [r3, #24]
 8001682:	ea27 0404 	bic.w	r4, r7, r4
 8001686:	b2a4      	uxth	r4, r4
 8001688:	fab4 f484 	clz	r4, r4
 800168c:	0964      	lsrs	r4, r4, #5
 800168e:	45a1      	cmp	r9, r4
 8001690:	d001      	beq.n	8001696 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001692:	2000      	movs	r0, #0
 8001694:	e017      	b.n	80016c6 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001696:	1c6a      	adds	r2, r5, #1
 8001698:	d0ee      	beq.n	8001678 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800169a:	f7ff fc2b 	bl	8000ef4 <HAL_GetTick>
 800169e:	9b08      	ldr	r3, [sp, #32]
 80016a0:	1ac0      	subs	r0, r0, r3
 80016a2:	42a8      	cmp	r0, r5
 80016a4:	d801      	bhi.n	80016aa <I2C_WaitOnFlagUntilTimeout+0x44>
 80016a6:	2d00      	cmp	r5, #0
 80016a8:	d1e5      	bne.n	8001676 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016aa:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80016ac:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016ae:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016b0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016b4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016b8:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80016ba:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016be:	f042 0220 	orr.w	r2, r2, #32
 80016c2:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 80016c4:	2001      	movs	r0, #1
}
 80016c6:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080016ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80016ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ce:	4604      	mov	r4, r0
 80016d0:	460f      	mov	r7, r1
 80016d2:	4616      	mov	r6, r2
 80016d4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016d6:	6825      	ldr	r5, [r4, #0]
 80016d8:	6968      	ldr	r0, [r5, #20]
 80016da:	ea27 0000 	bic.w	r0, r7, r0
 80016de:	b280      	uxth	r0, r0
 80016e0:	b1b8      	cbz	r0, 8001712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016e2:	696b      	ldr	r3, [r5, #20]
 80016e4:	055a      	lsls	r2, r3, #21
 80016e6:	d516      	bpl.n	8001716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80016f4:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80016f6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001700:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001704:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001706:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800170a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800170c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001710:	2001      	movs	r0, #1
}
 8001712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001716:	1c73      	adds	r3, r6, #1
 8001718:	d0de      	beq.n	80016d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171a:	f7ff fbeb 	bl	8000ef4 <HAL_GetTick>
 800171e:	eba0 0008 	sub.w	r0, r0, r8
 8001722:	42b0      	cmp	r0, r6
 8001724:	d801      	bhi.n	800172a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8001726:	2e00      	cmp	r6, #0
 8001728:	d1d5      	bne.n	80016d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800172a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800172c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800172e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001730:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001734:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001738:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	e7e4      	b.n	800170a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001740 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001748:	6821      	ldr	r1, [r4, #0]
 800174a:	694b      	ldr	r3, [r1, #20]
 800174c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001750:	d001      	beq.n	8001756 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001752:	2000      	movs	r0, #0
 8001754:	e010      	b.n	8001778 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001756:	694a      	ldr	r2, [r1, #20]
 8001758:	06d2      	lsls	r2, r2, #27
 800175a:	d50e      	bpl.n	800177a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800175c:	f06f 0210 	mvn.w	r2, #16
 8001760:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001762:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001764:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001766:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800176a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800176e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001770:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001772:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001776:	2001      	movs	r0, #1
}
 8001778:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800177a:	f7ff fbbb 	bl	8000ef4 <HAL_GetTick>
 800177e:	1b80      	subs	r0, r0, r6
 8001780:	42a8      	cmp	r0, r5
 8001782:	d801      	bhi.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001784:	2d00      	cmp	r5, #0
 8001786:	d1df      	bne.n	8001748 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001788:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800178a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800178c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800178e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001792:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001796:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001798:	f042 0220 	orr.w	r2, r2, #32
 800179c:	e7e8      	b.n	8001770 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800179e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800179e:	b570      	push	{r4, r5, r6, lr}
 80017a0:	4604      	mov	r4, r0
 80017a2:	460d      	mov	r5, r1
 80017a4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	075b      	lsls	r3, r3, #29
 80017ac:	d501      	bpl.n	80017b2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80017ae:	2000      	movs	r0, #0
}
 80017b0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff ff3d 	bl	8001632 <I2C_IsAcknowledgeFailed>
 80017b8:	b9a8      	cbnz	r0, 80017e6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80017ba:	1c6a      	adds	r2, r5, #1
 80017bc:	d0f3      	beq.n	80017a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017be:	f7ff fb99 	bl	8000ef4 <HAL_GetTick>
 80017c2:	1b80      	subs	r0, r0, r6
 80017c4:	42a8      	cmp	r0, r5
 80017c6:	d801      	bhi.n	80017cc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	d1ec      	bne.n	80017a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017cc:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80017ce:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017da:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80017dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
 80017e8:	e7e2      	b.n	80017b0 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080017ea <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80017ea:	b570      	push	{r4, r5, r6, lr}
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	061b      	lsls	r3, r3, #24
 80017f8:	d501      	bpl.n	80017fe <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80017fa:	2000      	movs	r0, #0
}
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017fe:	4620      	mov	r0, r4
 8001800:	f7ff ff17 	bl	8001632 <I2C_IsAcknowledgeFailed>
 8001804:	b9a8      	cbnz	r0, 8001832 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001806:	1c6a      	adds	r2, r5, #1
 8001808:	d0f3      	beq.n	80017f2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180a:	f7ff fb73 	bl	8000ef4 <HAL_GetTick>
 800180e:	1b80      	subs	r0, r0, r6
 8001810:	42a8      	cmp	r0, r5
 8001812:	d801      	bhi.n	8001818 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001814:	2d00      	cmp	r5, #0
 8001816:	d1ec      	bne.n	80017f2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001818:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800181a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800181c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800181e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001822:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001826:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001828:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800182c:	f042 0220 	orr.w	r2, r2, #32
 8001830:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
 8001834:	e7e2      	b.n	80017fc <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08001838 <HAL_I2C_Init>:
{
 8001838:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800183a:	4604      	mov	r4, r0
 800183c:	b908      	cbnz	r0, 8001842 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800183e:	2001      	movs	r0, #1
}
 8001840:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001842:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001846:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800184a:	b91b      	cbnz	r3, 8001854 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800184c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001850:	f001 fdc2 	bl	80033d8 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001854:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001856:	2324      	movs	r3, #36	; 0x24
 8001858:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001864:	f000 ff90 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001868:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_I2C_Init+0x130>)
 800186a:	6865      	ldr	r5, [r4, #4]
 800186c:	429d      	cmp	r5, r3
 800186e:	bf94      	ite	ls
 8001870:	4b3e      	ldrls	r3, [pc, #248]	; (800196c <HAL_I2C_Init+0x134>)
 8001872:	4b3f      	ldrhi	r3, [pc, #252]	; (8001970 <HAL_I2C_Init+0x138>)
 8001874:	4298      	cmp	r0, r3
 8001876:	bf8c      	ite	hi
 8001878:	2300      	movhi	r3, #0
 800187a:	2301      	movls	r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1de      	bne.n	800183e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001880:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001882:	4e39      	ldr	r6, [pc, #228]	; (8001968 <HAL_I2C_Init+0x130>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001884:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001886:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <HAL_I2C_Init+0x13c>)
 8001888:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800188c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001890:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001892:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001894:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001896:	bf88      	it	hi
 8001898:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 800189c:	6a11      	ldr	r1, [r2, #32]
 800189e:	bf88      	it	hi
 80018a0:	4373      	mulhi	r3, r6
 80018a2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80018a6:	bf84      	itt	hi
 80018a8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80018ac:	fbb3 f3f6 	udivhi	r3, r3, r6
 80018b0:	3301      	adds	r3, #1
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b6:	69d1      	ldr	r1, [r2, #28]
 80018b8:	1e43      	subs	r3, r0, #1
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <HAL_I2C_Init+0x130>)
 80018bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80018c0:	4285      	cmp	r5, r0
 80018c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80018c6:	d832      	bhi.n	800192e <HAL_I2C_Init+0xf6>
 80018c8:	006d      	lsls	r5, r5, #1
 80018ca:	f640 70fc 	movw	r0, #4092	; 0xffc
 80018ce:	fbb3 f3f5 	udiv	r3, r3, r5
 80018d2:	3301      	adds	r3, #1
 80018d4:	4203      	tst	r3, r0
 80018d6:	d042      	beq.n	800195e <HAL_I2C_Init+0x126>
 80018d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018dc:	4319      	orrs	r1, r3
 80018de:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018e0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80018e4:	6811      	ldr	r1, [r2, #0]
 80018e6:	4303      	orrs	r3, r0
 80018e8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f0:	6891      	ldr	r1, [r2, #8]
 80018f2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80018f6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80018fa:	4303      	orrs	r3, r0
 80018fc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001900:	430b      	orrs	r3, r1
 8001902:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001904:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001908:	68d1      	ldr	r1, [r2, #12]
 800190a:	4303      	orrs	r3, r0
 800190c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001910:	430b      	orrs	r3, r1
 8001912:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800191e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001920:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001922:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001926:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001928:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800192c:	e788      	b.n	8001840 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800192e:	68a0      	ldr	r0, [r4, #8]
 8001930:	b950      	cbnz	r0, 8001948 <HAL_I2C_Init+0x110>
 8001932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001936:	fbb3 f3f5 	udiv	r3, r3, r5
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	b17b      	cbz	r3, 8001962 <HAL_I2C_Init+0x12a>
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	e7c9      	b.n	80018dc <HAL_I2C_Init+0xa4>
 8001948:	2019      	movs	r0, #25
 800194a:	4368      	muls	r0, r5
 800194c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001950:	3301      	adds	r3, #1
 8001952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001956:	b123      	cbz	r3, 8001962 <HAL_I2C_Init+0x12a>
 8001958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800195c:	e7be      	b.n	80018dc <HAL_I2C_Init+0xa4>
 800195e:	2304      	movs	r3, #4
 8001960:	e7bc      	b.n	80018dc <HAL_I2C_Init+0xa4>
 8001962:	2301      	movs	r3, #1
 8001964:	e7ba      	b.n	80018dc <HAL_I2C_Init+0xa4>
 8001966:	bf00      	nop
 8001968:	000186a0 	.word	0x000186a0
 800196c:	001e847f 	.word	0x001e847f
 8001970:	003d08ff 	.word	0x003d08ff
 8001974:	000f4240 	.word	0x000f4240

08001978 <HAL_I2C_Master_Transmit>:
{
 8001978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800197c:	4604      	mov	r4, r0
 800197e:	b085      	sub	sp, #20
 8001980:	4698      	mov	r8, r3
 8001982:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001984:	460d      	mov	r5, r1
 8001986:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fab4 	bl	8000ef4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800198c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001990:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001992:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001994:	d004      	beq.n	80019a0 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8001996:	2502      	movs	r5, #2
}
 8001998:	4628      	mov	r0, r5
 800199a:	b005      	add	sp, #20
 800199c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a0:	9000      	str	r0, [sp, #0]
 80019a2:	495a      	ldr	r1, [pc, #360]	; (8001b0c <HAL_I2C_Master_Transmit+0x194>)
 80019a4:	2319      	movs	r3, #25
 80019a6:	2201      	movs	r2, #1
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff fe5c 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d1f1      	bne.n	8001996 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80019b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d0ed      	beq.n	8001996 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ba:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80019bc:	2301      	movs	r3, #1
 80019be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c2:	680b      	ldr	r3, [r1, #0]
 80019c4:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80019c6:	bf5e      	ittt	pl
 80019c8:	680b      	ldrpl	r3, [r1, #0]
 80019ca:	f043 0301 	orrpl.w	r3, r3, #1
 80019ce:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d0:	680b      	ldr	r3, [r1, #0]
 80019d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019d6:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019d8:	2321      	movs	r3, #33	; 0x21
 80019da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019de:	2310      	movs	r3, #16
 80019e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80019e8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ee:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_I2C_Master_Transmit+0x198>)
 80019f2:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80019f6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d004      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0x90>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d002      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0x90>
 8001a02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a06:	d104      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a08:	680b      	ldr	r3, [r1, #0]
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e002      	b.n	8001a18 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d0f7      	beq.n	8001a08 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a18:	9600      	str	r6, [sp, #0]
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff fe1f 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 8001a28:	b108      	cbz	r0, 8001a2e <HAL_I2C_Master_Transmit+0xb6>
        return HAL_ERROR;
 8001a2a:	2501      	movs	r5, #1
 8001a2c:	e7b4      	b.n	8001998 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a2e:	6923      	ldr	r3, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a30:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a36:	d121      	bne.n	8001a7c <HAL_I2C_Master_Transmit+0x104>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a38:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001a3c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a3e:	4935      	ldr	r1, [pc, #212]	; (8001b14 <HAL_I2C_Master_Transmit+0x19c>)
 8001a40:	4633      	mov	r3, r6
 8001a42:	463a      	mov	r2, r7
 8001a44:	4620      	mov	r0, r4
 8001a46:	f7ff fe40 	bl	80016ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d1ec      	bne.n	8001a2a <HAL_I2C_Master_Transmit+0xb2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	9003      	str	r0, [sp, #12]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	9203      	str	r2, [sp, #12]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	9303      	str	r3, [sp, #12]
 8001a5c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001a5e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001a60:	b9f3      	cbnz	r3, 8001aa0 <HAL_I2C_Master_Transmit+0x128>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a62:	6821      	ldr	r1, [r4, #0]
 8001a64:	680a      	ldr	r2, [r1, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001a72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001a7a:	e78d      	b.n	8001998 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a7c:	11eb      	asrs	r3, r5, #7
 8001a7e:	f003 0306 	and.w	r3, r3, #6
 8001a82:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001a86:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_I2C_Master_Transmit+0x1a0>)
 8001a8a:	4633      	mov	r3, r6
 8001a8c:	463a      	mov	r2, r7
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fe1b 	bl	80016ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d1c8      	bne.n	8001a2a <HAL_I2C_Master_Transmit+0xb2>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	b2ed      	uxtb	r5, r5
 8001a9c:	611d      	str	r5, [r3, #16]
 8001a9e:	e7ce      	b.n	8001a3e <HAL_I2C_Master_Transmit+0xc6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa0:	4632      	mov	r2, r6
 8001aa2:	4639      	mov	r1, r7
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f7ff fea0 	bl	80017ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001aaa:	b140      	cbz	r0, 8001abe <HAL_I2C_Master_Transmit+0x146>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	bf01      	itttt	eq
 8001ab2:	6822      	ldreq	r2, [r4, #0]
 8001ab4:	6813      	ldreq	r3, [r2, #0]
 8001ab6:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001aba:	6013      	streq	r3, [r2, #0]
 8001abc:	e7b5      	b.n	8001a2a <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac0:	6820      	ldr	r0, [r4, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001ac8:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001aca:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001acc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001ad4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ad6:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8001ada:	1e51      	subs	r1, r2, #1
 8001adc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ade:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8001ae2:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ae4:	d00a      	beq.n	8001afc <HAL_I2C_Master_Transmit+0x184>
 8001ae6:	b149      	cbz	r1, 8001afc <HAL_I2C_Master_Transmit+0x184>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ae8:	7859      	ldrb	r1, [r3, #1]
 8001aea:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001aec:	3302      	adds	r3, #2
 8001aee:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001af0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001af6:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001af8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001afa:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afc:	4632      	mov	r2, r6
 8001afe:	4639      	mov	r1, r7
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff fe4c 	bl	800179e <I2C_WaitOnBTFFlagUntilTimeout>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d0a9      	beq.n	8001a5e <HAL_I2C_Master_Transmit+0xe6>
 8001b0a:	e7cf      	b.n	8001aac <HAL_I2C_Master_Transmit+0x134>
 8001b0c:	00100002 	.word	0x00100002
 8001b10:	ffff0000 	.word	0xffff0000
 8001b14:	00010002 	.word	0x00010002
 8001b18:	00010008 	.word	0x00010008

08001b1c <HAL_I2C_Master_Receive>:
{
 8001b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b20:	4604      	mov	r4, r0
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	4698      	mov	r8, r3
 8001b26:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001b28:	460e      	mov	r6, r1
 8001b2a:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff f9e2 	bl	8000ef4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b30:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b34:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001b36:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b38:	d004      	beq.n	8001b44 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001b3a:	2602      	movs	r6, #2
}
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	b009      	add	sp, #36	; 0x24
 8001b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b44:	9000      	str	r0, [sp, #0]
 8001b46:	4997      	ldr	r1, [pc, #604]	; (8001da4 <HAL_I2C_Master_Receive+0x288>)
 8001b48:	2319      	movs	r3, #25
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff fd8a 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d1f1      	bne.n	8001b3a <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001b56:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d0ed      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5e:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001b60:	2301      	movs	r3, #1
 8001b62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b66:	680b      	ldr	r3, [r1, #0]
 8001b68:	07d8      	lsls	r0, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001b6a:	bf5e      	ittt	pl
 8001b6c:	680b      	ldrpl	r3, [r1, #0]
 8001b6e:	f043 0301 	orrpl.w	r3, r3, #1
 8001b72:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b74:	680b      	ldr	r3, [r1, #0]
 8001b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b7a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b7c:	2322      	movs	r3, #34	; 0x22
 8001b7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b82:	2310      	movs	r3, #16
 8001b84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001b8c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b92:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b94:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_I2C_Master_Receive+0x28c>)
 8001b96:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b9a:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 8001b9c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ba4:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ba6:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ba8:	d004      	beq.n	8001bb4 <HAL_I2C_Master_Receive+0x98>
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d002      	beq.n	8001bb4 <HAL_I2C_Master_Receive+0x98>
 8001bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bb2:	d104      	bne.n	8001bbe <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb4:	680b      	ldr	r3, [r1, #0]
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e002      	b.n	8001bc4 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001bbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bc0:	2b11      	cmp	r3, #17
 8001bc2:	d0f7      	beq.n	8001bb4 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc4:	9500      	str	r5, [sp, #0]
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fd49 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	b108      	cbz	r0, 8001bda <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001bd6:	2601      	movs	r6, #1
 8001bd8:	e7b0      	b.n	8001b3c <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bda:	6922      	ldr	r2, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bdc:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bde:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001be2:	d127      	bne.n	8001c34 <HAL_I2C_Master_Receive+0x118>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001be4:	f046 0601 	orr.w	r6, r6, #1
 8001be8:	b2f6      	uxtb	r6, r6
 8001bea:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bec:	496f      	ldr	r1, [pc, #444]	; (8001dac <HAL_I2C_Master_Receive+0x290>)
 8001bee:	462b      	mov	r3, r5
 8001bf0:	463a      	mov	r2, r7
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7ff fd69 	bl	80016ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf8:	4606      	mov	r6, r0
 8001bfa:	2800      	cmp	r0, #0
 8001bfc:	d1eb      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001bfe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c00:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d14a      	bne.n	8001c9c <HAL_I2C_Master_Receive+0x180>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c06:	9003      	str	r0, [sp, #12]
 8001c08:	694b      	ldr	r3, [r1, #20]
 8001c0a:	9303      	str	r3, [sp, #12]
 8001c0c:	698b      	ldr	r3, [r1, #24]
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c12:	680b      	ldr	r3, [r1, #0]
 8001c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c18:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c1a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8001db4 <HAL_I2C_Master_Receive+0x298>
    while (hi2c->XferSize > 0U)
 8001c1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d163      	bne.n	8001cec <HAL_I2C_Master_Receive+0x1d0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	2220      	movs	r2, #32
 8001c26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001c2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001c32:	e783      	b.n	8001b3c <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c34:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8001c38:	f008 0806 	and.w	r8, r8, #6
 8001c3c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001c40:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c42:	495b      	ldr	r1, [pc, #364]	; (8001db0 <HAL_I2C_Master_Receive+0x294>)
 8001c44:	462b      	mov	r3, r5
 8001c46:	463a      	mov	r2, r7
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f7ff fd3e 	bl	80016ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d1c1      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c52:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c54:	4955      	ldr	r1, [pc, #340]	; (8001dac <HAL_I2C_Master_Receive+0x290>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c56:	b2f6      	uxtb	r6, r6
 8001c58:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c5a:	463a      	mov	r2, r7
 8001c5c:	462b      	mov	r3, r5
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff fd33 	bl	80016ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c64:	4602      	mov	r2, r0
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d1b5      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	9007      	str	r0, [sp, #28]
 8001c6e:	6959      	ldr	r1, [r3, #20]
 8001c70:	9107      	str	r1, [sp, #28]
 8001c72:	6999      	ldr	r1, [r3, #24]
 8001c74:	9107      	str	r1, [sp, #28]
 8001c76:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c78:	6819      	ldr	r1, [r3, #0]
 8001c7a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001c7e:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c80:	4620      	mov	r0, r4
 8001c82:	9500      	str	r5, [sp, #0]
 8001c84:	463b      	mov	r3, r7
 8001c86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c8a:	f7ff fcec 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	d1a1      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001c98:	6113      	str	r3, [r2, #16]
 8001c9a:	e7a7      	b.n	8001bec <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_I2C_Master_Receive+0x19a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca0:	680b      	ldr	r3, [r1, #0]
 8001ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ca6:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca8:	9004      	str	r0, [sp, #16]
 8001caa:	694b      	ldr	r3, [r1, #20]
 8001cac:	9304      	str	r3, [sp, #16]
 8001cae:	698b      	ldr	r3, [r1, #24]
 8001cb0:	9304      	str	r3, [sp, #16]
 8001cb2:	9b04      	ldr	r3, [sp, #16]
 8001cb4:	e7ad      	b.n	8001c12 <HAL_I2C_Master_Receive+0xf6>
    else if (hi2c->XferSize == 2U)
 8001cb6:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb8:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 8001cba:	d10d      	bne.n	8001cd8 <HAL_I2C_Master_Receive+0x1bc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cc0:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	680b      	ldr	r3, [r1, #0]
 8001cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc8:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	9005      	str	r0, [sp, #20]
 8001ccc:	694b      	ldr	r3, [r1, #20]
 8001cce:	9305      	str	r3, [sp, #20]
 8001cd0:	698b      	ldr	r3, [r1, #24]
 8001cd2:	9305      	str	r3, [sp, #20]
 8001cd4:	9b05      	ldr	r3, [sp, #20]
 8001cd6:	e7a0      	b.n	8001c1a <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cdc:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cde:	9006      	str	r0, [sp, #24]
 8001ce0:	694b      	ldr	r3, [r1, #20]
 8001ce2:	9306      	str	r3, [sp, #24]
 8001ce4:	698b      	ldr	r3, [r1, #24]
 8001ce6:	9306      	str	r3, [sp, #24]
 8001ce8:	9b06      	ldr	r3, [sp, #24]
 8001cea:	e796      	b.n	8001c1a <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d863      	bhi.n	8001db8 <HAL_I2C_Master_Receive+0x29c>
        if (hi2c->XferSize == 1U)
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d116      	bne.n	8001d22 <HAL_I2C_Master_Receive+0x206>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	4639      	mov	r1, r7
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff fd21 	bl	8001740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cfe:	2800      	cmp	r0, #0
 8001d00:	f47f af69 	bne.w	8001bd6 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d0a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d0e:	3301      	adds	r3, #1
 8001d10:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001d12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001d20:	e77d      	b.n	8001c1e <HAL_I2C_Master_Receive+0x102>
        else if (hi2c->XferSize == 2U)
 8001d22:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	9500      	str	r5, [sp, #0]
 8001d26:	463b      	mov	r3, r7
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001d30:	d11a      	bne.n	8001d68 <HAL_I2C_Master_Receive+0x24c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d32:	f7ff fc98 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	f47f af4d 	bne.w	8001bd6 <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d44:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d4a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001d4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d4e:	1c53      	adds	r3, r2, #1
 8001d50:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001d52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d54:	3b01      	subs	r3, #1
 8001d56:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d60:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	7053      	strb	r3, [r2, #1]
 8001d66:	e7d1      	b.n	8001d0c <HAL_I2C_Master_Receive+0x1f0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d68:	f7ff fc7d 	bl	8001666 <I2C_WaitOnFlagUntilTimeout>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	f47f af31 	bne.w	8001bd6 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	6819      	ldr	r1, [r3, #0]
 8001d78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d7c:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7e:	6919      	ldr	r1, [r3, #16]
 8001d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d82:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8001d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001d88:	3301      	adds	r3, #1
 8001d8a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001d8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001d92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4620      	mov	r0, r4
 8001da0:	e7c7      	b.n	8001d32 <HAL_I2C_Master_Receive+0x216>
 8001da2:	bf00      	nop
 8001da4:	00100002 	.word	0x00100002
 8001da8:	ffff0000 	.word	0xffff0000
 8001dac:	00010002 	.word	0x00010002
 8001db0:	00010008 	.word	0x00010008
 8001db4:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db8:	462a      	mov	r2, r5
 8001dba:	4639      	mov	r1, r7
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff fcbf 	bl	8001740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	f47f af07 	bne.w	8001bd6 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dd2:	1c53      	adds	r3, r2, #1
 8001dd4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001dd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	6959      	ldr	r1, [r3, #20]
 8001de8:	0749      	lsls	r1, r1, #29
 8001dea:	f57f af18 	bpl.w	8001c1e <HAL_I2C_Master_Receive+0x102>
 8001dee:	e7b8      	b.n	8001d62 <HAL_I2C_Master_Receive+0x246>

08001df0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001df2:	4604      	mov	r4, r0
 8001df4:	2800      	cmp	r0, #0
 8001df6:	f000 808c 	beq.w	8001f12 <HAL_I2S_Init+0x122>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001dfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e02:	b92b      	cbnz	r3, 8001e10 <HAL_I2S_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e04:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <HAL_I2S_Init+0x12c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001e06:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001e0a:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001e0c:	f001 fb1c 	bl	8003448 <HAL_I2S_MspInit>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e10:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e12:	2102      	movs	r1, #2
 8001e14:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e18:	69d3      	ldr	r3, [r2, #28]
 8001e1a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e1e:	f023 030f 	bic.w	r3, r3, #15
 8001e22:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e24:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001e26:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e28:	428b      	cmp	r3, r1
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e2a:	68e2      	ldr	r2, [r4, #12]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e2c:	d073      	beq.n	8001f16 <HAL_I2S_Init+0x126>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e2e:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2510      	moveq	r5, #16
 8001e36:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e38:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e3a:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001e3c:	bf98      	it	ls
 8001e3e:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e40:	f000 fd4a 	bl	80028d8 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e44:	6923      	ldr	r3, [r4, #16]
 8001e46:	6962      	ldr	r2, [r4, #20]
 8001e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4c:	d159      	bne.n	8001f02 <HAL_I2S_Init+0x112>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e4e:	68e3      	ldr	r3, [r4, #12]
 8001e50:	210a      	movs	r1, #10
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d053      	beq.n	8001efe <HAL_I2S_Init+0x10e>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e56:	00ad      	lsls	r5, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e58:	fbb0 f3f5 	udiv	r3, r0, r5
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e5c:	434b      	muls	r3, r1
 8001e5e:	fbb3 f3f2 	udiv	r3, r3, r2
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001e62:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e64:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001e66:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e6a:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e6e:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e70:	1e99      	subs	r1, r3, #2
 8001e72:	29fd      	cmp	r1, #253	; 0xfd
 8001e74:	d849      	bhi.n	8001f0a <HAL_I2S_Init+0x11a>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e76:	0212      	lsls	r2, r2, #8
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	6922      	ldr	r2, [r4, #16]
 8001e7c:	6820      	ldr	r0, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e7e:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8001f2c <HAL_I2S_Init+0x13c>
 8001e82:	68e6      	ldr	r6, [r4, #12]
 8001e84:	69a5      	ldr	r5, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e86:	4313      	orrs	r3, r2
 8001e88:	6203      	str	r3, [r0, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e8a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8001e8e:	69c3      	ldr	r3, [r0, #28]
 8001e90:	ea42 0701 	orr.w	r7, r2, r1
 8001e94:	ea03 030c 	and.w	r3, r3, ip
 8001e98:	433b      	orrs	r3, r7
 8001e9a:	4333      	orrs	r3, r6
 8001e9c:	432b      	orrs	r3, r5
 8001e9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea2:	61c3      	str	r3, [r0, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ea4:	6a23      	ldr	r3, [r4, #32]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d123      	bne.n	8001ef2 <HAL_I2S_Init+0x102>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_I2S_Init+0x130>)
 8001eac:	6363      	str	r3, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eae:	4f1d      	ldr	r7, [pc, #116]	; (8001f24 <HAL_I2S_Init+0x134>)
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_I2S_Init+0x138>)
 8001eb2:	4298      	cmp	r0, r3
 8001eb4:	bf18      	it	ne
 8001eb6:	f04f 2740 	movne.w	r7, #1073758208	; 0x40004000

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eba:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	ea03 030c 	and.w	r3, r3, ip
 8001ec4:	61fb      	str	r3, [r7, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ec6:	f04f 0302 	mov.w	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ecc:	bf1c      	itt	ne
 8001ece:	fab2 f382 	clzne	r3, r2
 8001ed2:	095b      	lsrne	r3, r3, #5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ed4:	69f8      	ldr	r0, [r7, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ed6:	bf14      	ite	ne
 8001ed8:	021b      	lslne	r3, r3, #8
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001eda:	f44f 7380 	moveq.w	r3, #256	; 0x100
    {
      tmp = I2S_MODE_SLAVE_TX;
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ede:	4331      	orrs	r1, r6
 8001ee0:	4319      	orrs	r1, r3
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ee2:	b280      	uxth	r0, r0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ee4:	4329      	orrs	r1, r5
 8001ee6:	ea40 0301 	orr.w	r3, r0, r1
 8001eea:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef0:	61fb      	str	r3, [r7, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ef2:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ef4:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ef6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ef8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8001efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001efe:	00ed      	lsls	r5, r5, #3
 8001f00:	e7aa      	b.n	8001e58 <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f02:	210a      	movs	r1, #10
 8001f04:	fbb0 f3f5 	udiv	r3, r0, r5
 8001f08:	e7a8      	b.n	8001e5c <HAL_I2S_Init+0x6c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
 8001f14:	e7f2      	b.n	8001efc <HAL_I2S_Init+0x10c>
    i2sodd = 0U;
 8001f16:	2200      	movs	r2, #0
 8001f18:	e7ae      	b.n	8001e78 <HAL_I2S_Init+0x88>
 8001f1a:	bf00      	nop
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	080020a9 	.word	0x080020a9
 8001f24:	40003400 	.word	0x40003400
 8001f28:	40003800 	.word	0x40003800
 8001f2c:	fffff040 	.word	0xfffff040

08001f30 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001f30:	b510      	push	{r4, lr}
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001f32:	2900      	cmp	r1, #0
 8001f34:	d033      	beq.n	8001f9e <HAL_I2S_Transmit_IT+0x6e>
 8001f36:	2a00      	cmp	r2, #0
 8001f38:	d031      	beq.n	8001f9e <HAL_I2S_Transmit_IT+0x6e>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001f3a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d00a      	beq.n	8001f58 <HAL_I2S_Transmit_IT+0x28>
 8001f42:	2301      	movs	r3, #1
 8001f44:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001f48:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_I2S_Transmit_IT+0x2c>
  {
    __HAL_UNLOCK(hi2s);
 8001f54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8001f58:	2002      	movs	r0, #2
 8001f5a:	e01f      	b.n	8001f9c <HAL_I2S_Transmit_IT+0x6c>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001f5c:	2403      	movs	r4, #3
 8001f5e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f62:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001f64:	6803      	ldr	r3, [r0, #0]
  hi2s->pTxBuffPtr = pData;
 8001f66:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001f68:	69dc      	ldr	r4, [r3, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001f6a:	2128      	movs	r1, #40	; 0x28
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001f6c:	f004 0407 	and.w	r4, r4, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001f70:	40e1      	lsrs	r1, r4
 8001f72:	07c9      	lsls	r1, r1, #31
  {
    hi2s->TxXferSize = (Size << 1U);
 8001f74:	bf44      	itt	mi
 8001f76:	0052      	lslmi	r2, r2, #1
 8001f78:	b292      	uxthmi	r2, r2
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001f7a:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001f7c:	8542      	strh	r2, [r0, #42]	; 0x2a
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001f84:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	0552      	lsls	r2, r2, #21
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001f8a:	bf5e      	ittt	pl
 8001f8c:	69da      	ldrpl	r2, [r3, #28]
 8001f8e:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8001f92:	61da      	strpl	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 8001f94:	2300      	movs	r3, #0
 8001f96:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8001f9a:	4618      	mov	r0, r3
}
 8001f9c:	bd10      	pop	{r4, pc}
    return  HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e7fc      	b.n	8001f9c <HAL_I2S_Transmit_IT+0x6c>

08001fa2 <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001fa2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fa4:	4718      	bx	r3

08001fa6 <HAL_I2S_RxCpltCallback>:
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2S_ErrorCallback>:
 8001fa8:	4770      	bx	lr

08001faa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001faa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001fac:	6803      	ldr	r3, [r0, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001fb2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001fb6:	2a04      	cmp	r2, #4
{
 8001fb8:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001fba:	d136      	bne.n	800202a <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001fbc:	9a01      	ldr	r2, [sp, #4]
 8001fbe:	07d1      	lsls	r1, r2, #31
 8001fc0:	d517      	bpl.n	8001ff2 <I2S_IRQHandler+0x48>
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	0652      	lsls	r2, r2, #25
 8001fc6:	d514      	bpl.n	8001ff2 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001fc8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001fca:	68d9      	ldr	r1, [r3, #12]
 8001fcc:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8001fd0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001fd2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001fda:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	b942      	cbnz	r2, 8001ff2 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe6:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001fee:	f7ff ffda 	bl	8001fa6 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ff2:	9b01      	ldr	r3, [sp, #4]
 8001ff4:	0659      	lsls	r1, r3, #25
 8001ff6:	d518      	bpl.n	800202a <I2S_IRQHandler+0x80>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	0692      	lsls	r2, r2, #26
 8001ffe:	d514      	bpl.n	800202a <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002006:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002008:	2200      	movs	r2, #0
 800200a:	9202      	str	r2, [sp, #8]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	9202      	str	r2, [sp, #8]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	9302      	str	r3, [sp, #8]
 8002014:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002016:	2301      	movs	r3, #1
 8002018:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800201c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff ffbf 	bl	8001fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800202a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800202e:	2b03      	cmp	r3, #3
 8002030:	d136      	bne.n	80020a0 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002032:	9b01      	ldr	r3, [sp, #4]
 8002034:	079b      	lsls	r3, r3, #30
 8002036:	d519      	bpl.n	800206c <I2S_IRQHandler+0xc2>
 8002038:	6822      	ldr	r2, [r4, #0]
 800203a:	6853      	ldr	r3, [r2, #4]
 800203c:	0618      	lsls	r0, r3, #24
 800203e:	d515      	bpl.n	800206c <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002042:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002046:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8002048:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800204a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800204c:	3b01      	subs	r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002052:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	b94b      	cbnz	r3, 800206c <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002058:	6853      	ldr	r3, [r2, #4]
 800205a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800205e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002060:	2301      	movs	r3, #1
 8002062:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002066:	4620      	mov	r0, r4
 8002068:	f000 feaa 	bl	8002dc0 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	0719      	lsls	r1, r3, #28
 8002070:	d516      	bpl.n	80020a0 <I2S_IRQHandler+0xf6>
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	0692      	lsls	r2, r2, #26
 8002078:	d512      	bpl.n	80020a0 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002080:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002082:	2200      	movs	r2, #0
 8002084:	9203      	str	r2, [sp, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	9303      	str	r3, [sp, #12]
 800208a:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800208c:	2301      	movs	r3, #1
 800208e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002092:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff ff84 	bl	8001fa8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020a0:	b004      	add	sp, #16
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <HAL_I2SEx_TxRxCpltCallback>:
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80020a8:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80020aa:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80020ac:	498e      	ldr	r1, [pc, #568]	; (80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80020ae:	6893      	ldr	r3, [r2, #8]
{
 80020b0:	b086      	sub	sp, #24
 80020b2:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80020b4:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80020b6:	4b8d      	ldr	r3, [pc, #564]	; (80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80020b8:	428a      	cmp	r2, r1
 80020ba:	bf18      	it	ne
 80020bc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80020c0:	6899      	ldr	r1, [r3, #8]
 80020c2:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80020c4:	6851      	ldr	r1, [r2, #4]
 80020c6:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020cc:	6841      	ldr	r1, [r0, #4]
 80020ce:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 80020d2:	f040 8093 	bne.w	80021fc <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80020d6:	9b00      	ldr	r3, [sp, #0]
 80020d8:	0799      	lsls	r1, r3, #30
 80020da:	d51a      	bpl.n	8002112 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 80020dc:	9b02      	ldr	r3, [sp, #8]
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	d517      	bpl.n	8002112 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80020e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80020e4:	1c99      	adds	r1, r3, #2
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	6241      	str	r1, [r0, #36]	; 0x24
 80020ea:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 80020ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b95b      	cbnz	r3, 8002112 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020fa:	6853      	ldr	r3, [r2, #4]
 80020fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002100:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002102:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002104:	b29b      	uxth	r3, r3
 8002106:	b923      	cbnz	r3, 8002112 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002108:	2301      	movs	r3, #1
 800210a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800210e:	f7ff ffc9 	bl	80020a4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002112:	9b01      	ldr	r3, [sp, #4]
 8002114:	07d8      	lsls	r0, r3, #31
 8002116:	d522      	bpl.n	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8002118:	9b03      	ldr	r3, [sp, #12]
 800211a:	0659      	lsls	r1, r3, #25
 800211c:	d51f      	bpl.n	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800211e:	6821      	ldr	r1, [r4, #0]
 8002120:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8002122:	4b72      	ldr	r3, [pc, #456]	; (80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002124:	4291      	cmp	r1, r2
 8002126:	bf18      	it	ne
 8002128:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800212c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	1c90      	adds	r0, r2, #2
 8002132:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002134:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8002136:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002138:	3a01      	subs	r2, #1
 800213a:	b292      	uxth	r2, r2
 800213c:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800213e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002140:	b292      	uxth	r2, r2
 8002142:	b962      	cbnz	r2, 800215e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800214a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800214c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	b92b      	cbnz	r3, 800215e <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002152:	2301      	movs	r3, #1
 8002154:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002158:	4620      	mov	r0, r4
 800215a:	f7ff ffa3 	bl	80020a4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	065a      	lsls	r2, r3, #25
 8002162:	d522      	bpl.n	80021aa <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8002164:	9b03      	ldr	r3, [sp, #12]
 8002166:	069b      	lsls	r3, r3, #26
 8002168:	d51f      	bpl.n	80021aa <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	495e      	ldr	r1, [pc, #376]	; (80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800216e:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002170:	428b      	cmp	r3, r1
 8002172:	bf18      	it	ne
 8002174:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002178:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800217a:	6851      	ldr	r1, [r2, #4]
 800217c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002180:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002188:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800218a:	2200      	movs	r2, #0
 800218c:	9204      	str	r2, [sp, #16]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	9204      	str	r2, [sp, #16]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	9304      	str	r3, [sp, #16]
 8002196:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8002198:	2301      	movs	r3, #1
 800219a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800219e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80021a6:	f7ff feff 	bl	8001fa8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021aa:	9b00      	ldr	r3, [sp, #0]
 80021ac:	0718      	lsls	r0, r3, #28
 80021ae:	f140 8098 	bpl.w	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80021b2:	9b02      	ldr	r3, [sp, #8]
 80021b4:	0699      	lsls	r1, r3, #26
 80021b6:	f140 8094 	bpl.w	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ba:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021bc:	494a      	ldr	r1, [pc, #296]	; (80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021c4:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021c6:	4a49      	ldr	r2, [pc, #292]	; (80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	bf18      	it	ne
 80021cc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80021d0:	6851      	ldr	r1, [r2, #4]
 80021d2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80021d6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80021d8:	2200      	movs	r2, #0
 80021da:	9205      	str	r2, [sp, #20]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	9305      	str	r3, [sp, #20]
 80021e0:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80021ea:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6463      	str	r3, [r4, #68]	; 0x44
}
 80021f2:	b006      	add	sp, #24
 80021f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 80021f8:	f7ff bed6 	b.w	8001fa8 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80021fc:	9a01      	ldr	r2, [sp, #4]
 80021fe:	0792      	lsls	r2, r2, #30
 8002200:	d51a      	bpl.n	8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8002202:	9a03      	ldr	r2, [sp, #12]
 8002204:	0611      	lsls	r1, r2, #24
 8002206:	d517      	bpl.n	8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002208:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800220a:	1c91      	adds	r1, r2, #2
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	6241      	str	r1, [r0, #36]	; 0x24
 8002210:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002212:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002214:	3a01      	subs	r2, #1
 8002216:	b292      	uxth	r2, r2
 8002218:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800221a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800221c:	b292      	uxth	r2, r2
 800221e:	b95a      	cbnz	r2, 8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002226:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8002228:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800222a:	b29b      	uxth	r3, r3
 800222c:	b923      	cbnz	r3, 8002238 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 800222e:	2301      	movs	r3, #1
 8002230:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002234:	f7ff ff36 	bl	80020a4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002238:	9b00      	ldr	r3, [sp, #0]
 800223a:	07da      	lsls	r2, r3, #31
 800223c:	d51c      	bpl.n	8002278 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 800223e:	9b02      	ldr	r3, [sp, #8]
 8002240:	065b      	lsls	r3, r3, #25
 8002242:	d519      	bpl.n	8002278 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002244:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002246:	6822      	ldr	r2, [r4, #0]
 8002248:	1c98      	adds	r0, r3, #2
 800224a:	68d1      	ldr	r1, [r2, #12]
 800224c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800224e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002250:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002252:	3b01      	subs	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8002258:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800225a:	b29b      	uxth	r3, r3
 800225c:	b963      	cbnz	r3, 8002278 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800225e:	6853      	ldr	r3, [r2, #4]
 8002260:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002264:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002266:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	b92b      	cbnz	r3, 8002278 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 800226c:	2301      	movs	r3, #1
 800226e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002272:	4620      	mov	r0, r4
 8002274:	f7ff ff16 	bl	80020a4 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002278:	9b00      	ldr	r3, [sp, #0]
 800227a:	0658      	lsls	r0, r3, #25
 800227c:	d51b      	bpl.n	80022b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 800227e:	9b02      	ldr	r3, [sp, #8]
 8002280:	0699      	lsls	r1, r3, #26
 8002282:	d518      	bpl.n	80022b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002284:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002286:	4918      	ldr	r1, [pc, #96]	; (80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002288:	6853      	ldr	r3, [r2, #4]
 800228a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800228e:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8002292:	428a      	cmp	r2, r1
 8002294:	bf18      	it	ne
 8002296:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 800229a:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a2:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80022b2:	f7ff fe79 	bl	8001fa8 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	071a      	lsls	r2, r3, #28
 80022ba:	d512      	bpl.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 80022bc:	9b03      	ldr	r3, [sp, #12]
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	d50f      	bpl.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	4908      	ldr	r1, [pc, #32]	; (80022e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80022c8:	428a      	cmp	r2, r1
 80022ca:	bf18      	it	ne
 80022cc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80022d6:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022d8:	6853      	ldr	r3, [r2, #4]
 80022da:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80022de:	6053      	str	r3, [r2, #4]
 80022e0:	e77f      	b.n	80021e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 80022e2:	b006      	add	sp, #24
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	bf00      	nop
 80022e8:	40003800 	.word	0x40003800
 80022ec:	40003400 	.word	0x40003400

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	4604      	mov	r4, r0
 80022f6:	b918      	cbnz	r0, 8002300 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80022fa:	b002      	add	sp, #8
 80022fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002300:	6803      	ldr	r3, [r0, #0]
 8002302:	07dd      	lsls	r5, r3, #31
 8002304:	d410      	bmi.n	8002328 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	0798      	lsls	r0, r3, #30
 800230a:	d458      	bmi.n	80023be <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	071a      	lsls	r2, r3, #28
 8002310:	f100 809a 	bmi.w	8002448 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	075b      	lsls	r3, r3, #29
 8002318:	f100 80ba 	bmi.w	8002490 <HAL_RCC_OscConfig+0x1a0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231c:	69a2      	ldr	r2, [r4, #24]
 800231e:	2a00      	cmp	r2, #0
 8002320:	f040 8122 	bne.w	8002568 <HAL_RCC_OscConfig+0x278>
  return HAL_OK;
 8002324:	2000      	movs	r0, #0
 8002326:	e7e8      	b.n	80022fa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002328:	4b8c      	ldr	r3, [pc, #560]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	f002 020c 	and.w	r2, r2, #12
 8002330:	2a04      	cmp	r2, #4
 8002332:	d007      	beq.n	8002344 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233a:	2a08      	cmp	r2, #8
 800233c:	d10a      	bne.n	8002354 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0259      	lsls	r1, r3, #9
 8002342:	d507      	bpl.n	8002354 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4b85      	ldr	r3, [pc, #532]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	039a      	lsls	r2, r3, #14
 800234a:	d5dc      	bpl.n	8002306 <HAL_RCC_OscConfig+0x16>
 800234c:	6863      	ldr	r3, [r4, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1d9      	bne.n	8002306 <HAL_RCC_OscConfig+0x16>
 8002352:	e7d1      	b.n	80022f8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	6863      	ldr	r3, [r4, #4]
 8002356:	4d81      	ldr	r5, [pc, #516]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d111      	bne.n	8002382 <HAL_RCC_OscConfig+0x92>
 800235e:	682b      	ldr	r3, [r5, #0]
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002366:	f7fe fdc5 	bl	8000ef4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4e7c      	ldr	r6, [pc, #496]	; (800255c <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 800236c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	6833      	ldr	r3, [r6, #0]
 8002370:	039b      	lsls	r3, r3, #14
 8002372:	d4c8      	bmi.n	8002306 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002374:	f7fe fdbe 	bl	8000ef4 <HAL_GetTick>
 8002378:	1b40      	subs	r0, r0, r5
 800237a:	2864      	cmp	r0, #100	; 0x64
 800237c:	d9f7      	bls.n	800236e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e7bb      	b.n	80022fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002382:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002386:	d104      	bne.n	8002392 <HAL_RCC_OscConfig+0xa2>
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	e7e5      	b.n	800235e <HAL_RCC_OscConfig+0x6e>
 8002392:	682a      	ldr	r2, [r5, #0]
 8002394:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002398:	602a      	str	r2, [r5, #0]
 800239a:	682a      	ldr	r2, [r5, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1df      	bne.n	8002366 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80023a6:	f7fe fda5 	bl	8000ef4 <HAL_GetTick>
 80023aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	039f      	lsls	r7, r3, #14
 80023b0:	d5a9      	bpl.n	8002306 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b2:	f7fe fd9f 	bl	8000ef4 <HAL_GetTick>
 80023b6:	1b80      	subs	r0, r0, r6
 80023b8:	2864      	cmp	r0, #100	; 0x64
 80023ba:	d9f7      	bls.n	80023ac <HAL_RCC_OscConfig+0xbc>
 80023bc:	e7df      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	f012 0f0c 	tst.w	r2, #12
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ce:	2a08      	cmp	r2, #8
 80023d0:	d111      	bne.n	80023f6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	025e      	lsls	r6, r3, #9
 80023d6:	d40e      	bmi.n	80023f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d8:	4a60      	ldr	r2, [pc, #384]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	079d      	lsls	r5, r3, #30
 80023de:	d502      	bpl.n	80023e6 <HAL_RCC_OscConfig+0xf6>
 80023e0:	68e3      	ldr	r3, [r4, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d188      	bne.n	80022f8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	6813      	ldr	r3, [r2, #0]
 80023e8:	6921      	ldr	r1, [r4, #16]
 80023ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80023ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023f2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f4:	e78a      	b.n	800230c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f6:	68e2      	ldr	r2, [r4, #12]
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_OscConfig+0x270>)
 80023fa:	b1b2      	cbz	r2, 800242a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002400:	f7fe fd78 	bl	8000ef4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	4d55      	ldr	r5, [pc, #340]	; (800255c <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8002406:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	0798      	lsls	r0, r3, #30
 800240c:	d507      	bpl.n	800241e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	682b      	ldr	r3, [r5, #0]
 8002410:	6922      	ldr	r2, [r4, #16]
 8002412:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002416:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800241a:	602b      	str	r3, [r5, #0]
 800241c:	e776      	b.n	800230c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe fd69 	bl	8000ef4 <HAL_GetTick>
 8002422:	1b80      	subs	r0, r0, r6
 8002424:	2802      	cmp	r0, #2
 8002426:	d9ef      	bls.n	8002408 <HAL_RCC_OscConfig+0x118>
 8002428:	e7a9      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800242a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800242c:	f7fe fd62 	bl	8000ef4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002430:	4e4a      	ldr	r6, [pc, #296]	; (800255c <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8002432:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002434:	6833      	ldr	r3, [r6, #0]
 8002436:	0799      	lsls	r1, r3, #30
 8002438:	f57f af68 	bpl.w	800230c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243c:	f7fe fd5a 	bl	8000ef4 <HAL_GetTick>
 8002440:	1b40      	subs	r0, r0, r5
 8002442:	2802      	cmp	r0, #2
 8002444:	d9f6      	bls.n	8002434 <HAL_RCC_OscConfig+0x144>
 8002446:	e79a      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002448:	6962      	ldr	r2, [r4, #20]
 800244a:	4b45      	ldr	r3, [pc, #276]	; (8002560 <HAL_RCC_OscConfig+0x270>)
 800244c:	b182      	cbz	r2, 8002470 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_LSI_ENABLE();
 800244e:	2201      	movs	r2, #1
 8002450:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002454:	f7fe fd4e 	bl	8000ef4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002458:	4e40      	ldr	r6, [pc, #256]	; (800255c <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 800245a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800245e:	079f      	lsls	r7, r3, #30
 8002460:	f53f af58 	bmi.w	8002314 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fd46 	bl	8000ef4 <HAL_GetTick>
 8002468:	1b40      	subs	r0, r0, r5
 800246a:	2802      	cmp	r0, #2
 800246c:	d9f6      	bls.n	800245c <HAL_RCC_OscConfig+0x16c>
 800246e:	e786      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002470:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002474:	f7fe fd3e 	bl	8000ef4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002478:	4e38      	ldr	r6, [pc, #224]	; (800255c <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 800247a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800247e:	0798      	lsls	r0, r3, #30
 8002480:	f57f af48 	bpl.w	8002314 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002484:	f7fe fd36 	bl	8000ef4 <HAL_GetTick>
 8002488:	1b40      	subs	r0, r0, r5
 800248a:	2802      	cmp	r0, #2
 800248c:	d9f6      	bls.n	800247c <HAL_RCC_OscConfig+0x18c>
 800248e:	e776      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002490:	4b32      	ldr	r3, [pc, #200]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 8002492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002494:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002498:	d128      	bne.n	80024ec <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	9201      	str	r2, [sp, #4]
 800249c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024ae:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4d2c      	ldr	r5, [pc, #176]	; (8002564 <HAL_RCC_OscConfig+0x274>)
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	05d9      	lsls	r1, r3, #23
 80024b6:	d51b      	bpl.n	80024f0 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	68a3      	ldr	r3, [r4, #8]
 80024ba:	4d28      	ldr	r5, [pc, #160]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d127      	bne.n	8002510 <HAL_RCC_OscConfig+0x220>
 80024c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80024c8:	f7fe fd14 	bl	8000ef4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4e23      	ldr	r6, [pc, #140]	; (800255c <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80024ce:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80024d6:	079b      	lsls	r3, r3, #30
 80024d8:	d539      	bpl.n	800254e <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 80024da:	2f00      	cmp	r7, #0
 80024dc:	f43f af1e 	beq.w	800231c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_RCC_OscConfig+0x26c>)
 80024e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	e717      	b.n	800231c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80024ec:	2700      	movs	r7, #0
 80024ee:	e7df      	b.n	80024b0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f0:	682b      	ldr	r3, [r5, #0]
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80024f8:	f7fe fcfc 	bl	8000ef4 <HAL_GetTick>
 80024fc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	05da      	lsls	r2, r3, #23
 8002502:	d4d9      	bmi.n	80024b8 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fcf6 	bl	8000ef4 <HAL_GetTick>
 8002508:	1b80      	subs	r0, r0, r6
 800250a:	2802      	cmp	r0, #2
 800250c:	d9f7      	bls.n	80024fe <HAL_RCC_OscConfig+0x20e>
 800250e:	e736      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002510:	2b05      	cmp	r3, #5
 8002512:	d104      	bne.n	800251e <HAL_RCC_OscConfig+0x22e>
 8002514:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	672b      	str	r3, [r5, #112]	; 0x70
 800251c:	e7d0      	b.n	80024c0 <HAL_RCC_OscConfig+0x1d0>
 800251e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	672a      	str	r2, [r5, #112]	; 0x70
 8002526:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002528:	f022 0204 	bic.w	r2, r2, #4
 800252c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ca      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8002532:	f7fe fcdf 	bl	8000ef4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800253a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800253c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800253e:	0798      	lsls	r0, r3, #30
 8002540:	d5cb      	bpl.n	80024da <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fcd7 	bl	8000ef4 <HAL_GetTick>
 8002546:	1b80      	subs	r0, r0, r6
 8002548:	4540      	cmp	r0, r8
 800254a:	d9f7      	bls.n	800253c <HAL_RCC_OscConfig+0x24c>
 800254c:	e717      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fcd1 	bl	8000ef4 <HAL_GetTick>
 8002552:	1b40      	subs	r0, r0, r5
 8002554:	4540      	cmp	r0, r8
 8002556:	d9bd      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1e4>
 8002558:	e711      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	42470000 	.word	0x42470000
 8002564:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002568:	4d22      	ldr	r5, [pc, #136]	; (80025f4 <HAL_RCC_OscConfig+0x304>)
 800256a:	68ab      	ldr	r3, [r5, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	f43f aec1 	beq.w	80022f8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_OscConfig+0x308>)
 8002578:	2a02      	cmp	r2, #2
 800257a:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 800257e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002580:	d12b      	bne.n	80025da <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8002582:	f7fe fcb7 	bl	8000ef4 <HAL_GetTick>
 8002586:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	0199      	lsls	r1, r3, #6
 800258c:	d41f      	bmi.n	80025ce <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800258e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002592:	4313      	orrs	r3, r2
 8002594:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002596:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800259a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800259c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80025a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025a2:	0852      	lsrs	r2, r2, #1
 80025a4:	3a01      	subs	r2, #1
 80025a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80025aa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4d11      	ldr	r5, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_ENABLE();
 80025b0:	2201      	movs	r2, #1
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025b4:	f7fe fc9e 	bl	8000ef4 <HAL_GetTick>
 80025b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	682b      	ldr	r3, [r5, #0]
 80025bc:	019a      	lsls	r2, r3, #6
 80025be:	f53f aeb1 	bmi.w	8002324 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fc97 	bl	8000ef4 <HAL_GetTick>
 80025c6:	1b00      	subs	r0, r0, r4
 80025c8:	2802      	cmp	r0, #2
 80025ca:	d9f6      	bls.n	80025ba <HAL_RCC_OscConfig+0x2ca>
 80025cc:	e6d7      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe fc91 	bl	8000ef4 <HAL_GetTick>
 80025d2:	1b80      	subs	r0, r0, r6
 80025d4:	2802      	cmp	r0, #2
 80025d6:	d9d7      	bls.n	8002588 <HAL_RCC_OscConfig+0x298>
 80025d8:	e6d1      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80025da:	f7fe fc8b 	bl	8000ef4 <HAL_GetTick>
 80025de:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	019b      	lsls	r3, r3, #6
 80025e4:	f57f ae9e 	bpl.w	8002324 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fc84 	bl	8000ef4 <HAL_GetTick>
 80025ec:	1b00      	subs	r0, r0, r4
 80025ee:	2802      	cmp	r0, #2
 80025f0:	d9f6      	bls.n	80025e0 <HAL_RCC_OscConfig+0x2f0>
 80025f2:	e6c4      	b.n	800237e <HAL_RCC_OscConfig+0x8e>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	42470000 	.word	0x42470000

080025fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fc:	4913      	ldr	r1, [pc, #76]	; (800264c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80025fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002600:	688b      	ldr	r3, [r1, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d01c      	beq.n	8002644 <HAL_RCC_GetSysClockFreq+0x48>
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002610:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002612:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002614:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002618:	bf14      	ite	ne
 800261a:	480d      	ldrne	r0, [pc, #52]	; (8002650 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	480d      	ldreq	r0, [pc, #52]	; (8002654 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002622:	bf18      	it	ne
 8002624:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002626:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	fba1 0100 	umull	r0, r1, r1, r0
 800262e:	f7fe fa99 	bl	8000b64 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_GetSysClockFreq+0x50>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800263e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002642:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002644:	4802      	ldr	r0, [pc, #8]	; (8002650 <HAL_RCC_GetSysClockFreq+0x54>)
 8002646:	e7fc      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800264a:	e7fa      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x46>
 800264c:	40023800 	.word	0x40023800
 8002650:	007a1200 	.word	0x007a1200
 8002654:	00f42400 	.word	0x00f42400

08002658 <HAL_RCC_ClockConfig>:
{
 8002658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800265c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800265e:	4604      	mov	r4, r0
 8002660:	b910      	cbnz	r0, 8002668 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002662:	2001      	movs	r0, #1
}
 8002664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_ClockConfig+0x120>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f002 020f 	and.w	r2, r2, #15
 8002670:	428a      	cmp	r2, r1
 8002672:	d327      	bcc.n	80026c4 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	6821      	ldr	r1, [r4, #0]
 8002676:	078f      	lsls	r7, r1, #30
 8002678:	d42c      	bmi.n	80026d4 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	07c8      	lsls	r0, r1, #31
 800267c:	d43f      	bmi.n	80026fe <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267e:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <HAL_RCC_ClockConfig+0x120>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	f002 020f 	and.w	r2, r2, #15
 8002686:	42aa      	cmp	r2, r5
 8002688:	d864      	bhi.n	8002754 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268a:	6822      	ldr	r2, [r4, #0]
 800268c:	0751      	lsls	r1, r2, #29
 800268e:	d46a      	bmi.n	8002766 <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002690:	0713      	lsls	r3, r2, #28
 8002692:	d507      	bpl.n	80026a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_RCC_ClockConfig+0x124>)
 8002696:	6921      	ldr	r1, [r4, #16]
 8002698:	6893      	ldr	r3, [r2, #8]
 800269a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800269e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a4:	f7ff ffaa 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80026a8:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_ClockConfig+0x124>)
 80026aa:	4a35      	ldr	r2, [pc, #212]	; (8002780 <HAL_RCC_ClockConfig+0x128>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	40d8      	lsrs	r0, r3
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCC_ClockConfig+0x12c>)
 80026b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80026ba:	2000      	movs	r0, #0
 80026bc:	f7fe fbd0 	bl	8000e60 <HAL_InitTick>
  return HAL_OK;
 80026c0:	2000      	movs	r0, #0
 80026c2:	e7cf      	b.n	8002664 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	428b      	cmp	r3, r1
 80026d0:	d1c7      	bne.n	8002662 <HAL_RCC_ClockConfig+0xa>
 80026d2:	e7cf      	b.n	8002674 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_RCC_ClockConfig+0x124>)
 80026d6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026da:	bf1e      	ittt	ne
 80026dc:	689a      	ldrne	r2, [r3, #8]
 80026de:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80026e2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e6:	bf42      	ittt	mi
 80026e8:	689a      	ldrmi	r2, [r3, #8]
 80026ea:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80026ee:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	68a0      	ldr	r0, [r4, #8]
 80026f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026f8:	4302      	orrs	r2, r0
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	e7bd      	b.n	800267a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	6862      	ldr	r2, [r4, #4]
 8002700:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_RCC_ClockConfig+0x124>)
 8002702:	2a01      	cmp	r2, #1
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	d0a9      	beq.n	8002662 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4e1b      	ldr	r6, [pc, #108]	; (800277c <HAL_RCC_ClockConfig+0x124>)
 8002710:	68b3      	ldr	r3, [r6, #8]
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	4313      	orrs	r3, r2
 8002718:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800271a:	f7fe fbeb 	bl	8000ef4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002722:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002724:	68b3      	ldr	r3, [r6, #8]
 8002726:	6862      	ldr	r2, [r4, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002730:	d0a5      	beq.n	800267e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe fbdf 	bl	8000ef4 <HAL_GetTick>
 8002736:	1bc0      	subs	r0, r0, r7
 8002738:	4540      	cmp	r0, r8
 800273a:	d9f3      	bls.n	8002724 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 800273c:	2003      	movs	r0, #3
 800273e:	e791      	b.n	8002664 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002740:	1e91      	subs	r1, r2, #2
 8002742:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002744:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002746:	d802      	bhi.n	800274e <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002748:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800274c:	e7de      	b.n	800270c <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	f013 0f02 	tst.w	r3, #2
 8002752:	e7db      	b.n	800270c <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002754:	b2ea      	uxtb	r2, r5
 8002756:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	42ab      	cmp	r3, r5
 8002760:	f47f af7f 	bne.w	8002662 <HAL_RCC_ClockConfig+0xa>
 8002764:	e791      	b.n	800268a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002766:	4905      	ldr	r1, [pc, #20]	; (800277c <HAL_RCC_ClockConfig+0x124>)
 8002768:	68e0      	ldr	r0, [r4, #12]
 800276a:	688b      	ldr	r3, [r1, #8]
 800276c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002770:	4303      	orrs	r3, r0
 8002772:	608b      	str	r3, [r1, #8]
 8002774:	e78c      	b.n	8002690 <HAL_RCC_ClockConfig+0x38>
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00
 800277c:	40023800 	.word	0x40023800
 8002780:	08004940 	.word	0x08004940
 8002784:	2000000c 	.word	0x2000000c

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_RCC_GetPCLK1Freq+0x14>)
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002796:	6810      	ldr	r0, [r2, #0]
}
 8002798:	40d8      	lsrs	r0, r3
 800279a:	4770      	bx	lr
 800279c:	40023800 	.word	0x40023800
 80027a0:	08004950 	.word	0x08004950
 80027a4:	2000000c 	.word	0x2000000c

080027a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	f013 0f05 	tst.w	r3, #5
{
 80027ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027b0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027b2:	d105      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	f013 0302 	ands.w	r3, r3, #2
 80027ba:	d12a      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80027bc:	2000      	movs	r0, #0
 80027be:	e026      	b.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027c2:	4e43      	ldr	r6, [pc, #268]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 80027c4:	2200      	movs	r2, #0
 80027c6:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80027c8:	f7fe fb94 	bl	8000ef4 <HAL_GetTick>
 80027cc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027ce:	6833      	ldr	r3, [r6, #0]
 80027d0:	011f      	lsls	r7, r3, #4
 80027d2:	d416      	bmi.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80027d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027de:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027e4:	4e3a      	ldr	r6, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 80027e6:	2201      	movs	r2, #1
 80027e8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80027ea:	f7fe fb83 	bl	8000ef4 <HAL_GetTick>
 80027ee:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027f0:	6833      	ldr	r3, [r6, #0]
 80027f2:	0118      	lsls	r0, r3, #4
 80027f4:	d4de      	bmi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027f6:	f7fe fb7d 	bl	8000ef4 <HAL_GetTick>
 80027fa:	1b40      	subs	r0, r0, r5
 80027fc:	2802      	cmp	r0, #2
 80027fe:	d9f7      	bls.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002800:	e004      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002802:	f7fe fb77 	bl	8000ef4 <HAL_GetTick>
 8002806:	1b40      	subs	r0, r0, r5
 8002808:	2802      	cmp	r0, #2
 800280a:	d9e0      	bls.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800280c:	2003      	movs	r0, #3
}
 800280e:	b003      	add	sp, #12
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8002818:	4d2e      	ldr	r5, [pc, #184]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002832:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002834:	f7fe fb5e 	bl	8000ef4 <HAL_GetTick>
 8002838:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800283a:	682b      	ldr	r3, [r5, #0]
 800283c:	05d9      	lsls	r1, r3, #23
 800283e:	d51b      	bpl.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002840:	4d23      	ldr	r5, [pc, #140]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002842:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002844:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002846:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800284a:	d11b      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284c:	68e3      	ldr	r3, [r4, #12]
 800284e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002852:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8002858:	d134      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800285a:	6891      	ldr	r1, [r2, #8]
 800285c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002860:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002864:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002868:	4301      	orrs	r1, r0
 800286a:	6091      	str	r1, [r2, #8]
 800286c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	430b      	orrs	r3, r1
 8002874:	6713      	str	r3, [r2, #112]	; 0x70
 8002876:	e7a1      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002878:	f7fe fb3c 	bl	8000ef4 <HAL_GetTick>
 800287c:	1b80      	subs	r0, r0, r6
 800287e:	2802      	cmp	r0, #2
 8002880:	d9db      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8002882:	e7c3      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002884:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002888:	4293      	cmp	r3, r2
 800288a:	d0df      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800288c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002890:	2101      	movs	r1, #1
 8002892:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289a:	2100      	movs	r1, #0
 800289c:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80028a0:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028a4:	07da      	lsls	r2, r3, #31
 80028a6:	d5d1      	bpl.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 80028a8:	f7fe fb24 	bl	8000ef4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80028b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80028b4:	079b      	lsls	r3, r3, #30
 80028b6:	d4c9      	bmi.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fb1c 	bl	8000ef4 <HAL_GetTick>
 80028bc:	1b80      	subs	r0, r0, r6
 80028be:	42b8      	cmp	r0, r7
 80028c0:	d9f7      	bls.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80028c2:	e7a3      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c4:	6891      	ldr	r1, [r2, #8]
 80028c6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80028ca:	e7ce      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 80028cc:	42470000 	.word	0x42470000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000

080028d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80028d8:	2801      	cmp	r0, #1
 80028da:	d11b      	bne.n	8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80028de:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80028e0:	0212      	lsls	r2, r2, #8
 80028e2:	d417      	bmi.n	8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	bf14      	ite	ne
 80028ee:	4b0b      	ldrne	r3, [pc, #44]	; (800291c <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028f0:	4b0b      	ldreq	r3, [pc, #44]	; (8002920 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028f6:	fbb3 f3f2 	udiv	r3, r3, r2
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80028fc:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002900:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002904:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002908:	4358      	muls	r0, r3
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800290a:	f3c2 7302 	ubfx	r3, r2, #28, #3
 800290e:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002912:	4770      	bx	lr
 8002914:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002916:	4770      	bx	lr
 8002918:	40023800 	.word	0x40023800
 800291c:	007a1200 	.word	0x007a1200
 8002920:	00f42400 	.word	0x00f42400

08002924 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	2302      	movs	r3, #2
 8002926:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292a:	6803      	ldr	r3, [r0, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002932:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8002934:	bf1e      	ittt	ne
 8002936:	681a      	ldrne	r2, [r3, #0]
 8002938:	f042 0201 	orrne.w	r2, r2, #1
 800293c:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293e:	2301      	movs	r3, #1
 8002940:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002944:	2000      	movs	r0, #0
 8002946:	4770      	bx	lr

08002948 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	4a30      	ldr	r2, [pc, #192]	; (8002a0c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800294a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800294c:	4290      	cmp	r0, r2
 800294e:	d012      	beq.n	8002976 <TIM_Base_SetConfig+0x2e>
 8002950:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002954:	d00f      	beq.n	8002976 <TIM_Base_SetConfig+0x2e>
 8002956:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800295a:	4290      	cmp	r0, r2
 800295c:	d00b      	beq.n	8002976 <TIM_Base_SetConfig+0x2e>
 800295e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002962:	4290      	cmp	r0, r2
 8002964:	d007      	beq.n	8002976 <TIM_Base_SetConfig+0x2e>
 8002966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800296a:	4290      	cmp	r0, r2
 800296c:	d003      	beq.n	8002976 <TIM_Base_SetConfig+0x2e>
 800296e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002972:	4290      	cmp	r0, r2
 8002974:	d119      	bne.n	80029aa <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002976:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800297c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297e:	4a23      	ldr	r2, [pc, #140]	; (8002a0c <TIM_Base_SetConfig+0xc4>)
 8002980:	4290      	cmp	r0, r2
 8002982:	d029      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 8002984:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002988:	d026      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 800298a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800298e:	4290      	cmp	r0, r2
 8002990:	d022      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 8002992:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002996:	4290      	cmp	r0, r2
 8002998:	d01e      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 800299a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800299e:	4290      	cmp	r0, r2
 80029a0:	d01a      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029a6:	4290      	cmp	r0, r2
 80029a8:	d016      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <TIM_Base_SetConfig+0xc8>)
 80029ac:	4290      	cmp	r0, r2
 80029ae:	d013      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b4:	4290      	cmp	r0, r2
 80029b6:	d00f      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029bc:	4290      	cmp	r0, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029c0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80029c4:	4290      	cmp	r0, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029cc:	4290      	cmp	r0, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_Base_SetConfig+0x90>
 80029d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029d4:	4290      	cmp	r0, r2
 80029d6:	d103      	bne.n	80029e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029de:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e0:	694a      	ldr	r2, [r1, #20]
 80029e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80029e8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ea:	688b      	ldr	r3, [r1, #8]
 80029ec:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ee:	680b      	ldr	r3, [r1, #0]
 80029f0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <TIM_Base_SetConfig+0xc4>)
 80029f4:	4298      	cmp	r0, r3
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0xb8>
 80029f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029fc:	4298      	cmp	r0, r3
 80029fe:	d101      	bne.n	8002a04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a00:	690b      	ldr	r3, [r1, #16]
 8002a02:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	2301      	movs	r3, #1
 8002a06:	6143      	str	r3, [r0, #20]
}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40014000 	.word	0x40014000

08002a14 <HAL_TIM_Base_Init>:
{
 8002a14:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002a16:	4604      	mov	r4, r0
 8002a18:	b1a0      	cbz	r0, 8002a44 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a22:	b91b      	cbnz	r3, 8002a2c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002a24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a28:	f000 fd62 	bl	80034f0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	1d21      	adds	r1, r4, #4
 8002a36:	f7ff ff87 	bl	8002948 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	e7fc      	b.n	8002a42 <HAL_TIM_Base_Init+0x2e>

08002a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a48:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a4a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4c:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a52:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002a56:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a58:	6083      	str	r3, [r0, #8]
}
 8002a5a:	bd10      	pop	{r4, pc}

08002a5c <HAL_TIM_ConfigClockSource>:
{
 8002a5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002a5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
{
 8002a64:	4604      	mov	r4, r0
 8002a66:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002a6a:	d027      	beq.n	8002abc <HAL_TIM_ConfigClockSource+0x60>
 8002a6c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002a72:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002a76:	6800      	ldr	r0, [r0, #0]
 8002a78:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002a82:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002a84:	680b      	ldr	r3, [r1, #0]
 8002a86:	2b60      	cmp	r3, #96	; 0x60
 8002a88:	d04b      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0xc6>
 8002a8a:	d832      	bhi.n	8002af2 <HAL_TIM_ConfigClockSource+0x96>
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d060      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0xf6>
 8002a90:	d816      	bhi.n	8002ac0 <HAL_TIM_ConfigClockSource+0x64>
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x42>
 8002a96:	d809      	bhi.n	8002aac <HAL_TIM_ConfigClockSource+0x50>
 8002a98:	f033 0210 	bics.w	r2, r3, #16
 8002a9c:	d108      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8002a9e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f043 0307 	orr.w	r3, r3, #7
 8002aaa:	e038      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d0f6      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002abc:	4618      	mov	r0, r3
}
 8002abe:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002ac0:	2b50      	cmp	r3, #80	; 0x50
 8002ac2:	d1f5      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac4:	684a      	ldr	r2, [r1, #4]
 8002ac6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ac8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aca:	6a03      	ldr	r3, [r0, #32]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad2:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002adc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002ae0:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002ae2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ae4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002ae6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aec:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002af0:	e015      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8002af2:	2b70      	cmp	r3, #112	; 0x70
 8002af4:	d00b      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0xb2>
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	d1d9      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8002afc:	68cb      	ldr	r3, [r1, #12]
 8002afe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002b02:	f7ff ffa1 	bl	8002a48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b06:	6883      	ldr	r3, [r0, #8]
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0c:	e007      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8002b0e:	68cb      	ldr	r3, [r1, #12]
 8002b10:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002b14:	f7ff ff98 	bl	8002a48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b18:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8002b1e:	6083      	str	r3, [r0, #8]
}
 8002b20:	e7c6      	b.n	8002ab0 <HAL_TIM_ConfigClockSource+0x54>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b22:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b24:	684d      	ldr	r5, [r1, #4]
 8002b26:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b28:	f023 0310 	bic.w	r3, r3, #16
 8002b2c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002b30:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b32:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b3a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b3e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002b42:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b44:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b46:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b4c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002b50:	e7e5      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b52:	684a      	ldr	r2, [r1, #4]
 8002b54:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002b56:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b58:	6a03      	ldr	r3, [r0, #32]
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b60:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b62:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b6a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002b6e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002b70:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002b72:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002b74:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b7a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002b7e:	e7ce      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0xc2>

08002b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b80:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f04f 0302 	mov.w	r3, #2
 8002b8c:	d014      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b8e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002b94:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b96:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b98:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b9a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ba8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002baa:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002bb8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002bba:	bd30      	pop	{r4, r5, pc}

08002bbc <CS43L22_write>:
	// Write 0x00 to register 0x00.
	CS43L22_write( 0x00, 0x00, 2);
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
}

void CS43L22_write(uint8_t reg, uint8_t Cmd, uint8_t len){
 8002bbc:	b507      	push	{r0, r1, r2, lr}

	uint8_t iData[2]; // Buffer to read, change and write back register values of the DAC
	iData[0] =  reg;
 8002bbe:	f88d 0004 	strb.w	r0, [sp, #4]
	iData[1] = Cmd;
 8002bc2:	f88d 1005 	strb.w	r1, [sp, #5]

	CS43L22_EXTERNAL_DAC_I2C_write(iData,len);
 8002bc6:	a801      	add	r0, sp, #4
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f000 f931 	bl	8002e30 <CS43L22_EXTERNAL_DAC_I2C_write>


}
 8002bce:	b003      	add	sp, #12
 8002bd0:	f85d fb04 	ldr.w	pc, [sp], #4

08002bd4 <CS43L22_init>:
void CS43L22_init(){
 8002bd4:	b513      	push	{r0, r1, r4, lr}
	CS43L22_EXTERNAL_DAC_enable();
 8002bd6:	f000 f947 	bl	8002e68 <CS43L22_EXTERNAL_DAC_enable>
	CS43L22_write( CS43L22_REG_POWER_CTL1, 0x01, 2);
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4610      	mov	r0, r2
 8002bde:	2101      	movs	r1, #1
 8002be0:	f7ff ffec 	bl	8002bbc <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL2, 0xAF, 2);
 8002be4:	2202      	movs	r2, #2
 8002be6:	21af      	movs	r1, #175	; 0xaf
 8002be8:	2004      	movs	r0, #4
 8002bea:	f7ff ffe7 	bl	8002bbc <CS43L22_write>
	CS43L22_write( CS43L22_REG_CLOCKING_CTL,(1 << 7), 2); //Tal vez tenga que poner 0x81 para dividir clock
 8002bee:	2202      	movs	r2, #2
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	2005      	movs	r0, #5
 8002bf4:	f7ff ffe2 	bl	8002bbc <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002bf8:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002bfc:	2006      	movs	r0, #6
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002bfe:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002c00:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002c04:	f7ff ffda 	bl	8002bbc <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]); // ... and read 1 byte (the register content).
 8002c08:	f10d 0005 	add.w	r0, sp, #5
 8002c0c:	f000 f91e 	bl	8002e4c <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8002c10:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002c14:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8002c18:	f001 0120 	and.w	r1, r1, #32
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8002c1c:	f041 0107 	orr.w	r1, r1, #7
	CS43L22_write(iData[0], iData[1], 2);
 8002c20:	2202      	movs	r2, #2
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8002c22:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002c26:	f7ff ffc9 	bl	8002bbc <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002c2a:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_MISC_CTL ;
 8002c2e:	200e      	movs	r0, #14
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002c30:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_MISC_CTL ;
 8002c32:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002c36:	f7ff ffc1 	bl	8002bbc <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);  // ... and read 1 byte (the register content).
 8002c3a:	f10d 0005 	add.w	r0, sp, #5
 8002c3e:	f000 f905 	bl	8002e4c <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8002c42:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002c46:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8002c4a:	f001 0137 	and.w	r1, r1, #55	; 0x37
 8002c4e:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	CS43L22_write(iData[0], iData[1], 2);
 8002c52:	2202      	movs	r2, #2
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8002c54:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002c58:	f7ff ffb0 	bl	8002bbc <CS43L22_write>
	CS43L22_write( CS43L22_REG_PLAYBACK_CTL2, 0x00, 2);
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	2100      	movs	r1, #0
 8002c60:	200f      	movs	r0, #15
 8002c62:	f7ff ffab 	bl	8002bbc <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMA_VOL, 0x00, 2);
 8002c66:	2202      	movs	r2, #2
 8002c68:	2100      	movs	r1, #0
 8002c6a:	201a      	movs	r0, #26
 8002c6c:	f7ff ffa6 	bl	8002bbc <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMB_VOL, 0x00, 2);
 8002c70:	2202      	movs	r2, #2
 8002c72:	2100      	movs	r1, #0
 8002c74:	201b      	movs	r0, #27
 8002c76:	f7ff ffa1 	bl	8002bbc <CS43L22_write>
	CS43L22_write( 0x00, 0x99, 2);
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	2199      	movs	r1, #153	; 0x99
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7ff ff9c 	bl	8002bbc <CS43L22_write>
	iData[0] = 0x32;
 8002c84:	2432      	movs	r4, #50	; 0x32
	CS43L22_write( 0x47, 0x80, 2);
 8002c86:	2202      	movs	r2, #2
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	2047      	movs	r0, #71	; 0x47
 8002c8c:	f7ff ff96 	bl	8002bbc <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 8002c90:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002c94:	f88d 4004 	strb.w	r4, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7ff ff8e 	bl	8002bbc <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002ca0:	f10d 0005 	add.w	r0, sp, #5
 8002ca4:	f000 f8d2 	bl	8002e4c <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] |= 0x80;
 8002ca8:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002cac:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] |= 0x80;
 8002cb0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	CS43L22_write(iData[0], iData[1], 2);
 8002cb4:	2202      	movs	r2, #2
	iData[1] |= 0x80;
 8002cb6:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002cba:	f7ff ff7f 	bl	8002bbc <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 8002cbe:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002cc2:	f88d 4004 	strb.w	r4, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff ff77 	bl	8002bbc <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002cce:	f10d 0005 	add.w	r0, sp, #5
 8002cd2:	f000 f8bb 	bl	8002e4c <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(0x80);
 8002cd6:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002cda:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(0x80);
 8002cde:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	CS43L22_write(iData[0], iData[1], 2);
 8002ce2:	2202      	movs	r2, #2
	iData[1] &= ~(0x80);
 8002ce4:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002ce8:	f7ff ff68 	bl	8002bbc <CS43L22_write>
	CS43L22_write( 0x00, 0x00, 2);
 8002cec:	2100      	movs	r1, #0
 8002cee:	4608      	mov	r0, r1
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f7ff ff63 	bl	8002bbc <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	219e      	movs	r1, #158	; 0x9e
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7ff ff5e 	bl	8002bbc <CS43L22_write>
}
 8002d00:	b002      	add	sp, #8
 8002d02:	bd10      	pop	{r4, pc}

08002d04 <CS43L22_AudioSend>:

void CS43L22_AudioSend(uint16_t *buffer,uint16_t buffer_size){

	CS43L22_EXTERNAL_DAC_I2S_transmit(buffer,buffer_size);
 8002d04:	f000 b88c 	b.w	8002e20 <CS43L22_EXTERNAL_DAC_I2S_transmit>

08002d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d0a:	2410      	movs	r4, #16
{
 8002d0c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d0e:	4622      	mov	r2, r4
 8002d10:	2100      	movs	r1, #0
 8002d12:	a80e      	add	r0, sp, #56	; 0x38
 8002d14:	f000 fd30 	bl	8003778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d18:	2214      	movs	r2, #20
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	a807      	add	r0, sp, #28
 8002d1e:	f000 fd2b 	bl	8003778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d22:	4622      	mov	r2, r4
 8002d24:	2100      	movs	r1, #0
 8002d26:	a803      	add	r0, sp, #12
 8002d28:	f000 fd26 	bl	8003778 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	2400      	movs	r4, #0
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <SystemClock_Config+0xb0>)
 8002d30:	9401      	str	r4, [sp, #4]
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <SystemClock_Config+0xb4>)
 8002d46:	9402      	str	r4, [sp, #8]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d5a:	2601      	movs	r6, #1
 8002d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d60:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d62:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d6a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d6c:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002d74:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d78:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d7e:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d80:	f7ff fab6 	bl	80022f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d84:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d86:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d8a:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d96:	a807      	add	r0, sp, #28
 8002d98:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d9a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d9c:	f7ff fc5c 	bl	8002658 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002da0:	2303      	movs	r3, #3
 8002da2:	f44f 7081 	mov.w	r0, #258	; 0x102
 8002da6:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002daa:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002dac:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dae:	f7ff fcfb 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002db2:	b018      	add	sp, #96	; 0x60
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40007000 	.word	0x40007000

08002dc0 <HAL_I2S_TxCpltCallback>:
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2s);

	//HAL_GPIO_TogglePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin);

	transferComplete = TRUE;
 8002dc0:	4b01      	ldr	r3, [pc, #4]	; (8002dc8 <HAL_I2S_TxCpltCallback+0x8>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]

}
 8002dc6:	4770      	bx	lr
 8002dc8:	2000000a 	.word	0x2000000a

08002dcc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)

{
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	adc_done = 1;
 8002dcc:	4b01      	ldr	r3, [pc, #4]	; (8002dd4 <HAL_ADC_ConvCpltCallback+0x8>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]

}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000080 	.word	0x20000080

08002dd8 <select_buffer_to_transmit>:

uint16_t* select_buffer_to_transmit(buffer_t bf){

	uint16_t *ptr = NULL;

	if(buffer_to_send == buffer_A){
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <select_buffer_to_transmit+0x14>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	b123      	cbz	r3, 8002de8 <select_buffer_to_transmit+0x10>

		ptr = audioBufferA;

	}else if(buffer_to_send == buffer_B){

		ptr = audioBufferB;
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	4803      	ldr	r0, [pc, #12]	; (8002df0 <select_buffer_to_transmit+0x18>)
 8002de2:	bf18      	it	ne
 8002de4:	2000      	movne	r0, #0
 8002de6:	4770      	bx	lr
		ptr = audioBufferA;
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <select_buffer_to_transmit+0x1c>)

	}

	return ptr;

}
 8002dea:	4770      	bx	lr
 8002dec:	20000008 	.word	0x20000008
 8002df0:	200001ea 	.word	0x200001ea
 8002df4:	20000082 	.word	0x20000082

08002df8 <audio_buffer_init>:

void audio_buffer_init(){
 8002df8:	b508      	push	{r3, lr}

	size_t i;

	for(i = 0;i<AUDIO_BUFFER_SIZE;i++){

		audioBufferA[i] = 0;
 8002dfa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4805      	ldr	r0, [pc, #20]	; (8002e18 <audio_buffer_init+0x20>)
 8002e02:	f000 fcb9 	bl	8003778 <memset>
		audioBufferB[i] = 0;

	}

}
 8002e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		audioBufferB[i] = 0;
 8002e0a:	4804      	ldr	r0, [pc, #16]	; (8002e1c <audio_buffer_init+0x24>)
 8002e0c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002e10:	2100      	movs	r1, #0
 8002e12:	f000 bcb1 	b.w	8003778 <memset>
 8002e16:	bf00      	nop
 8002e18:	20000082 	.word	0x20000082
 8002e1c:	200001ea 	.word	0x200001ea

08002e20 <CS43L22_EXTERNAL_DAC_I2S_transmit>:

#endif

}*/

void CS43L22_EXTERNAL_DAC_I2S_transmit(uint16_t *buffer,uint16_t buffer_size){
 8002e20:	460a      	mov	r2, r1

	HAL_I2S_Transmit_IT(&hi2s3,buffer,buffer_size);
 8002e22:	4601      	mov	r1, r0
 8002e24:	4801      	ldr	r0, [pc, #4]	; (8002e2c <CS43L22_EXTERNAL_DAC_I2S_transmit+0xc>)
 8002e26:	f7ff b883 	b.w	8001f30 <HAL_I2S_Transmit_IT>
 8002e2a:	bf00      	nop
 8002e2c:	20000418 	.word	0x20000418

08002e30 <CS43L22_EXTERNAL_DAC_I2C_write>:

}


void CS43L22_EXTERNAL_DAC_I2C_write(uint8_t *iData, uint8_t len)
{ //maneja el periferico i2c para comunicaicon con el dac
 8002e30:	b507      	push	{r0, r1, r2, lr}
 8002e32:	460b      	mov	r3, r1

	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 8002e34:	2164      	movs	r1, #100	; 0x64
{ //maneja el periferico i2c para comunicaicon con el dac
 8002e36:	4602      	mov	r2, r0
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 8002e38:	9100      	str	r1, [sp, #0]
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <CS43L22_EXTERNAL_DAC_I2C_write+0x18>)
 8002e3c:	2194      	movs	r1, #148	; 0x94
 8002e3e:	f7fe fd9b 	bl	8001978 <HAL_I2C_Master_Transmit>

}
 8002e42:	b003      	add	sp, #12
 8002e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e48:	200003c4 	.word	0x200003c4

08002e4c <CS43L22_EXTERNAL_DAC_I2C_recieve>:

void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 8002e4c:	b507      	push	{r0, r1, r2, lr}

	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 8002e4e:	2364      	movs	r3, #100	; 0x64
void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 8002e50:	4602      	mov	r2, r0
	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2194      	movs	r1, #148	; 0x94
 8002e56:	2301      	movs	r3, #1
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <CS43L22_EXTERNAL_DAC_I2C_recieve+0x18>)
 8002e5a:	f7fe fe5f 	bl	8001b1c <HAL_I2C_Master_Receive>

}
 8002e5e:	b003      	add	sp, #12
 8002e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e64:	200003c4 	.word	0x200003c4

08002e68 <CS43L22_EXTERNAL_DAC_enable>:
void CS43L22_EXTERNAL_DAC_enable()
{
	//esta funcion se encarga de poner en alto o bajo el pin de reset del dac
	//recibe un 1 para poner el pin en alto y un 0 para ponerlo en bajo

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <CS43L22_EXTERNAL_DAC_enable+0xc>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2110      	movs	r1, #16
 8002e6e:	f7fe bbdb 	b.w	8001628 <HAL_GPIO_WritePin>
 8002e72:	bf00      	nop
 8002e74:	40020c00 	.word	0x40020c00

08002e78 <next_sample>:

}

float next_sample(DE diff_eq, Node* buffer)
{
 8002e78:	b084      	sub	sp, #16
 8002e7a:	b530      	push	{r4, r5, lr}
 8002e7c:	ac03      	add	r4, sp, #12
 8002e7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e82:	4c11      	ldr	r4, [pc, #68]	; (8002ec8 <next_sample+0x50>)
 8002e84:	9909      	ldr	r1, [sp, #36]	; 0x24
	float value = 0;
	for (int i = 0; i <3; i++)
 8002e86:	6823      	ldr	r3, [r4, #0]
	float value = 0;
 8002e88:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002ecc <next_sample+0x54>
 8002e8c:	a803      	add	r0, sp, #12
	for (int i = 0; i <3; i++)
 8002e8e:	2200      	movs	r2, #0
	{
		value += (buffer->value)*diff_eq.denominator[i] + (input_buffer->value)*diff_eq.numerator[i];
 8002e90:	4605      	mov	r5, r0
 8002e92:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e96:	ed95 7a00 	vldr	s14, [r5]
 8002e9a:	edd1 6a01 	vldr	s13, [r1, #4]
		buffer = buffer->prev;
		input_buffer = input_buffer->prev;
 8002e9e:	681b      	ldr	r3, [r3, #0]
		buffer = buffer->prev;
 8002ea0:	6809      	ldr	r1, [r1, #0]
		value += (buffer->value)*diff_eq.denominator[i] + (input_buffer->value)*diff_eq.numerator[i];
 8002ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea6:	ed95 7a03 	vldr	s14, [r5, #12]
 8002eaa:	eee6 7a87 	vfma.f32	s15, s13, s14
	for (int i = 0; i <3; i++)
 8002eae:	3201      	adds	r2, #1
 8002eb0:	2a03      	cmp	r2, #3
 8002eb2:	f100 0004 	add.w	r0, r0, #4
		value += (buffer->value)*diff_eq.denominator[i] + (input_buffer->value)*diff_eq.numerator[i];
 8002eb6:	ee30 0a27 	vadd.f32	s0, s0, s15
	for (int i = 0; i <3; i++)
 8002eba:	d1e9      	bne.n	8002e90 <next_sample+0x18>
 8002ebc:	6023      	str	r3, [r4, #0]
	}
	return value;
}
 8002ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ec2:	b004      	add	sp, #16
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200004a4 	.word	0x200004a4
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <load_buffer>:
{
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
	row_buffer = row_buffer->next;
 8002ed2:	4e25      	ldr	r6, [pc, #148]	; (8002f68 <load_buffer+0x98>)
	column_buffer = column_buffer->next;
 8002ed4:	4d25      	ldr	r5, [pc, #148]	; (8002f6c <load_buffer+0x9c>)
	row_buffer = row_buffer->next;
 8002ed6:	6833      	ldr	r3, [r6, #0]
 8002ed8:	689f      	ldr	r7, [r3, #8]
	column_buffer = column_buffer->next;
 8002eda:	682b      	ldr	r3, [r5, #0]
	row_buffer = row_buffer->next;
 8002edc:	6037      	str	r7, [r6, #0]
	column_buffer = column_buffer->next;
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	602b      	str	r3, [r5, #0]
	input_buffer = input_buffer->next;
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <load_buffer+0xa0>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
{
 8002ee6:	b085      	sub	sp, #20
	input_buffer = input_buffer->next;
 8002ee8:	6892      	ldr	r2, [r2, #8]
 8002eea:	601a      	str	r2, [r3, #0]
	row_buffer->value = next_sample(row_diffeq, row_buffer);
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <load_buffer+0xa4>)
 8002eee:	9702      	str	r7, [sp, #8]
{
 8002ef0:	4604      	mov	r4, r0
	row_buffer->value = next_sample(row_diffeq, row_buffer);
 8002ef2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ef6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002efc:	f7ff ffbc 	bl	8002e78 <next_sample>
	column_buffer->value = next_sample(column_diffeq, column_buffer);
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <load_buffer+0xa8>)
	row_buffer->value = next_sample(row_diffeq, row_buffer);
 8002f02:	ed87 0a01 	vstr	s0, [r7, #4]
	column_buffer->value = next_sample(column_diffeq, column_buffer);
 8002f06:	682f      	ldr	r7, [r5, #0]
 8002f08:	9702      	str	r7, [sp, #8]
 8002f0a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f0e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f14:	f7ff ffb0 	bl	8002e78 <next_sample>
	int16_t sample1 = (int16_t)(row_buffer->value + column_buffer->value);
 8002f18:	6832      	ldr	r2, [r6, #0]
 8002f1a:	682b      	ldr	r3, [r5, #0]
	column_buffer->value = next_sample(column_diffeq, column_buffer);
 8002f1c:	ed87 0a01 	vstr	s0, [r7, #4]
	int16_t sample1 = (int16_t)(row_buffer->value + column_buffer->value);
 8002f20:	edd2 7a01 	vldr	s15, [r2, #4]
 8002f24:	ed93 7a01 	vldr	s14, [r3, #4]
	sample = (uint16_t)sample1;
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <load_buffer+0xac>)
	buff[i] = sample;
 8002f2a:	4915      	ldr	r1, [pc, #84]	; (8002f80 <load_buffer+0xb0>)
	int16_t sample1 = (int16_t)(row_buffer->value + column_buffer->value);
 8002f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	sample = (uint16_t)sample1;
 8002f34:	ee17 3a90 	vmov	r3, s15
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8013      	strh	r3, [r2, #0]
	buff[i] = sample;
 8002f3c:	680a      	ldr	r2, [r1, #0]
 8002f3e:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	buff[i+1] =  buff[i];
 8002f42:	eb04 0442 	add.w	r4, r4, r2, lsl #1
	i = i+2;
 8002f46:	3202      	adds	r2, #2
	if( (i >= AUDIO_BUFFER_SIZE)){
 8002f48:	2ab3      	cmp	r2, #179	; 0xb3
	buff[i+1] =  buff[i];
 8002f4a:	8063      	strh	r3, [r4, #2]
	i = i+2;
 8002f4c:	600a      	str	r2, [r1, #0]
	if( (i >= AUDIO_BUFFER_SIZE)){
 8002f4e:	d909      	bls.n	8002f64 <load_buffer+0x94>
		buffer_to_send = buffer_to_fill;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <load_buffer+0xb4>)
		buffer_t aux = buffer_to_send;
 8002f52:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <load_buffer+0xb8>)
		buffer_to_send = buffer_to_fill;
 8002f54:	781c      	ldrb	r4, [r3, #0]
		buffer_t aux = buffer_to_send;
 8002f56:	7810      	ldrb	r0, [r2, #0]
		buffer_to_send = buffer_to_fill;
 8002f58:	7014      	strb	r4, [r2, #0]
		flag = data_ready_to_send;
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <load_buffer+0xbc>)
		buffer_to_fill = aux;
 8002f5c:	7018      	strb	r0, [r3, #0]
		flag = data_ready_to_send;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	7013      	strb	r3, [r2, #0]
		i=0;
 8002f62:	600b      	str	r3, [r1, #0]
}
 8002f64:	b005      	add	sp, #20
 8002f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f68:	200004a8 	.word	0x200004a8
 8002f6c:	20000360 	.word	0x20000360
 8002f70:	200004a4 	.word	0x200004a4
 8002f74:	200004ac 	.word	0x200004ac
 8002f78:	20000364 	.word	0x20000364
 8002f7c:	200004c4 	.word	0x200004c4
 8002f80:	200004a0 	.word	0x200004a0
 8002f84:	2000035c 	.word	0x2000035c
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	20000009 	.word	0x20000009

08002f90 <fill_buffers>:
void fill_buffers(){
 8002f90:	b510      	push	{r4, lr}
	if((buffer_to_fill == buffer_A)){
 8002f92:	4c09      	ldr	r4, [pc, #36]	; (8002fb8 <fill_buffers+0x28>)
 8002f94:	7823      	ldrb	r3, [r4, #0]
 8002f96:	b923      	cbnz	r3, 8002fa2 <fill_buffers+0x12>
		audioToUpdate = audioBufferA;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <fill_buffers+0x2c>)
 8002f9a:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <fill_buffers+0x30>)
 8002f9c:	6018      	str	r0, [r3, #0]
		load_buffer(audioToUpdate);
 8002f9e:	f7ff ff97 	bl	8002ed0 <load_buffer>
	if((buffer_to_fill == buffer_B)){
 8002fa2:	7823      	ldrb	r3, [r4, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <fill_buffers+0x26>
		audioToUpdate = audioBufferB;
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <fill_buffers+0x2c>)
 8002faa:	4806      	ldr	r0, [pc, #24]	; (8002fc4 <fill_buffers+0x34>)
 8002fac:	6018      	str	r0, [r3, #0]
}
 8002fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		load_buffer(audioToUpdate);
 8002fb2:	f7ff bf8d 	b.w	8002ed0 <load_buffer>
}
 8002fb6:	bd10      	pop	{r4, pc}
 8002fb8:	2000035c 	.word	0x2000035c
 8002fbc:	20000358 	.word	0x20000358
 8002fc0:	20000082 	.word	0x20000082
 8002fc4:	200001ea 	.word	0x200001ea

08002fc8 <create_circ_buffer>:

Node* create_circ_buffer(int size)
{
 8002fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fcc:	4606      	mov	r6, r0
	// create head and current node pointers
	Node* head = malloc(sizeof(Node));
 8002fce:	200c      	movs	r0, #12
 8002fd0:	f000 fb1e 	bl	8003610 <malloc>
	head->value = 0.0;
 8002fd4:	f04f 0800 	mov.w	r8, #0
	Node* head = malloc(sizeof(Node));
 8002fd8:	4604      	mov	r4, r0
	head->value = 0.0;
 8002fda:	f8c0 8004 	str.w	r8, [r0, #4]

	// set current pointer to head
	current = head;

	//decrement size by 1
	size--;
 8002fde:	3e01      	subs	r6, #1
	// create the rest of the nodes
	for (int i = 0; i < size; i++)
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	2700      	movs	r7, #0
 8002fe4:	42b7      	cmp	r7, r6
 8002fe6:	db04      	blt.n	8002ff2 <create_circ_buffer+0x2a>
		temp->prev = current;
		// set current node to next node
		current = temp;
	}
	// point head to tail and tail to head
	head->prev = current;
 8002fe8:	6025      	str	r5, [r4, #0]
	current->next = head;
	//return the start of the circular buffer
	return head;
}
 8002fea:	4620      	mov	r0, r4
	current->next = head;
 8002fec:	60ac      	str	r4, [r5, #8]
}
 8002fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Node* temp = malloc(sizeof(Node));
 8002ff2:	200c      	movs	r0, #12
 8002ff4:	f000 fb0c 	bl	8003610 <malloc>
	for (int i = 0; i < size; i++)
 8002ff8:	3701      	adds	r7, #1
		temp->value = 0.0;
 8002ffa:	f8c0 8004 	str.w	r8, [r0, #4]
		current->next = temp;
 8002ffe:	60a8      	str	r0, [r5, #8]
		temp->prev = current;
 8003000:	6005      	str	r5, [r0, #0]
	for (int i = 0; i < size; i++)
 8003002:	4605      	mov	r5, r0
 8003004:	e7ee      	b.n	8002fe4 <create_circ_buffer+0x1c>
	...

08003008 <create_diff_eq>:

DE create_diff_eq(int freq)
{
 8003008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DE diff_eq;
	diff_eq.numerator[0] = 0;
	diff_eq.numerator[1] = sin((float)freq*M_PI/24000.0);
 800300c:	ee07 1a90 	vmov	s15, r1
 8003010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8003014:	ed2d 8b02 	vpush	{d8}
 8003018:	4604      	mov	r4, r0
	diff_eq.numerator[1] = sin((float)freq*M_PI/24000.0);
 800301a:	ee17 0a90 	vmov	r0, s15
 800301e:	f7fd fa37 	bl	8000490 <__aeabi_f2d>
 8003022:	a31a      	add	r3, pc, #104	; (adr r3, 800308c <create_diff_eq+0x84>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fa8a 	bl	8000540 <__aeabi_dmul>
 800302c:	a319      	add	r3, pc, #100	; (adr r3, 8003094 <create_diff_eq+0x8c>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f7fd fbaf 	bl	8000794 <__aeabi_ddiv>
 8003036:	ec41 0b10 	vmov	d0, r0, r1
 800303a:	ec41 0b18 	vmov	d8, r0, r1
 800303e:	f000 fc33 	bl	80038a8 <sin>
 8003042:	ec59 8b10 	vmov	r8, r9, d0
	diff_eq.numerator[2] = 0;

	diff_eq.denominator[0] = 0;
	diff_eq.denominator[1] = 2*cos((float)freq*M_PI/24000.0);
 8003046:	eeb0 0a48 	vmov.f32	s0, s16
 800304a:	eef0 0a68 	vmov.f32	s1, s17
 800304e:	f000 fbd7 	bl	8003800 <cos>
	diff_eq.denominator[2] = -1;

	return diff_eq;
 8003052:	2500      	movs	r5, #0
	diff_eq.numerator[1] = sin((float)freq*M_PI/24000.0);
 8003054:	4649      	mov	r1, r9
	return diff_eq;
 8003056:	6025      	str	r5, [r4, #0]
	diff_eq.numerator[1] = sin((float)freq*M_PI/24000.0);
 8003058:	4640      	mov	r0, r8
	diff_eq.denominator[1] = 2*cos((float)freq*M_PI/24000.0);
 800305a:	ec57 6b10 	vmov	r6, r7, d0
	diff_eq.numerator[1] = sin((float)freq*M_PI/24000.0);
 800305e:	f7fd fd31 	bl	8000ac4 <__aeabi_d2f>
	diff_eq.denominator[1] = 2*cos((float)freq*M_PI/24000.0);
 8003062:	463b      	mov	r3, r7
	diff_eq.numerator[1] = sin((float)freq*M_PI/24000.0);
 8003064:	6060      	str	r0, [r4, #4]
	diff_eq.denominator[1] = 2*cos((float)freq*M_PI/24000.0);
 8003066:	4632      	mov	r2, r6
	return diff_eq;
 8003068:	60a5      	str	r5, [r4, #8]
 800306a:	60e5      	str	r5, [r4, #12]
	diff_eq.denominator[1] = 2*cos((float)freq*M_PI/24000.0);
 800306c:	4630      	mov	r0, r6
 800306e:	4639      	mov	r1, r7
 8003070:	f7fd f8b0 	bl	80001d4 <__adddf3>
 8003074:	f7fd fd26 	bl	8000ac4 <__aeabi_d2f>
}
 8003078:	ecbd 8b02 	vpop	{d8}
	return diff_eq;
 800307c:	4b02      	ldr	r3, [pc, #8]	; (8003088 <create_diff_eq+0x80>)
	diff_eq.denominator[1] = 2*cos((float)freq*M_PI/24000.0);
 800307e:	6120      	str	r0, [r4, #16]
	return diff_eq;
 8003080:	6163      	str	r3, [r4, #20]
}
 8003082:	4620      	mov	r0, r4
 8003084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003088:	bf800000 	.word	0xbf800000
 800308c:	54442d18 	.word	0x54442d18
 8003090:	400921fb 	.word	0x400921fb
 8003094:	00000000 	.word	0x00000000
 8003098:	40d77000 	.word	0x40d77000

0800309c <main>:
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80030a0:	f7fd ff02 	bl	8000ea8 <HAL_Init>
  SystemClock_Config();
 80030a4:	f7ff fe30 	bl	8002d08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	2214      	movs	r2, #20
 80030aa:	2100      	movs	r1, #0
 80030ac:	a807      	add	r0, sp, #28
 80030ae:	f000 fb63 	bl	8003778 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030b2:	2400      	movs	r4, #0
 80030b4:	4b84      	ldr	r3, [pc, #528]	; (80032c8 <main+0x22c>)
 80030b6:	9400      	str	r4, [sp, #0]
 80030b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 80030ba:	4884      	ldr	r0, [pc, #528]	; (80032cc <main+0x230>)
  hadc1.Instance = ADC1;
 80030bc:	4d84      	ldr	r5, [pc, #528]	; (80032d0 <main+0x234>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 80030be:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8003328 <main+0x28c>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ca:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80030ce:	9200      	str	r2, [sp, #0]
 80030d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	9401      	str	r4, [sp, #4]
 80030d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
 80030dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030de:	f002 0201 	and.w	r2, r2, #1
 80030e2:	9201      	str	r2, [sp, #4]
 80030e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	9402      	str	r4, [sp, #8]
 80030e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ea:	f042 0208 	orr.w	r2, r2, #8
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
 80030f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f2:	f002 0208 	and.w	r2, r2, #8
 80030f6:	9202      	str	r2, [sp, #8]
 80030f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030fa:	9403      	str	r4, [sp, #12]
 80030fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fe:	f042 0204 	orr.w	r2, r2, #4
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
 8003104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003106:	f002 0204 	and.w	r2, r2, #4
 800310a:	9203      	str	r2, [sp, #12]
 800310c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	9404      	str	r4, [sp, #16]
 8003110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003112:	f042 0202 	orr.w	r2, r2, #2
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 800311e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 8003122:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003124:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 8003126:	f7fe fa7f 	bl	8001628 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800312a:	4622      	mov	r2, r4
 800312c:	4869      	ldr	r0, [pc, #420]	; (80032d4 <main+0x238>)
 800312e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003132:	f7fe fa79 	bl	8001628 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Button_Pin;
 8003136:	2601      	movs	r6, #1
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003138:	4864      	ldr	r0, [pc, #400]	; (80032cc <main+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800313c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313e:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003142:	f7fe f98b 	bl	800145c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sampling_Check_Pin;
 8003146:	2304      	movs	r3, #4
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 8003148:	4860      	ldr	r0, [pc, #384]	; (80032cc <main+0x230>)
 800314a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314c:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 8003154:	f7fe f982 	bl	800145c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8003158:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800315c:	a907      	add	r1, sp, #28
 800315e:	485d      	ldr	r0, [pc, #372]	; (80032d4 <main+0x238>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003160:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003168:	f7fe f978 	bl	800145c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800316c:	485a      	ldr	r0, [pc, #360]	; (80032d8 <main+0x23c>)
  hi2c1.Init.ClockSpeed = 100000;
 800316e:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <main+0x240>)
 8003170:	4b5b      	ldr	r3, [pc, #364]	; (80032e0 <main+0x244>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003172:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8003174:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800317c:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8003180:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003184:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003188:	f7fe fb56 	bl	8001838 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 800318c:	4855      	ldr	r0, [pc, #340]	; (80032e4 <main+0x248>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800318e:	4956      	ldr	r1, [pc, #344]	; (80032e8 <main+0x24c>)
 8003190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003194:	e9c0 1300 	strd	r1, r3, [r0]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003198:	6103      	str	r3, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800319a:	f64b 3380 	movw	r3, #48000	; 0xbb80
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800319e:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80031a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80031a6:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80031aa:	f7fe fe21 	bl	8001df0 <HAL_I2S_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80031ae:	2210      	movs	r2, #16
 80031b0:	4621      	mov	r1, r4
 80031b2:	a807      	add	r0, sp, #28
 80031b4:	f000 fae0 	bl	8003778 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031b8:	484c      	ldr	r0, [pc, #304]	; (80032ec <main+0x250>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ba:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c0:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80031c4:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 80031c8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031cc:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80031ce:	e9c5 370a 	strd	r3, r7, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = DISABLE;
 80031d2:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031d4:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031d6:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031da:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031dc:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031de:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031e2:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031e4:	f7fd fe8c 	bl	8000f00 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031e8:	a907      	add	r1, sp, #28
 80031ea:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 80031ec:	e9cd 6607 	strd	r6, r6, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031f0:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Instance = TIM2;
 80031f2:	4e3f      	ldr	r6, [pc, #252]	; (80032f0 <main+0x254>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031f4:	f7fe f83a 	bl	800126c <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031f8:	2210      	movs	r2, #16
 80031fa:	4621      	mov	r1, r4
 80031fc:	a807      	add	r0, sp, #28
 80031fe:	f000 fabb 	bl	8003778 <memset>
  htim2.Init.Prescaler = 175;
 8003202:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8003206:	23af      	movs	r3, #175	; 0xaf
 8003208:	e9c6 c300 	strd	ip, r3, [r6]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800320c:	4630      	mov	r0, r6
  htim2.Init.Period = 9;
 800320e:	2309      	movs	r3, #9
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003210:	e9c6 3403 	strd	r3, r4, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003214:	e9cd 4405 	strd	r4, r4, [sp, #20]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003218:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800321c:	f7ff fbfa 	bl	8002a14 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003224:	a907      	add	r1, sp, #28
 8003226:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003228:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800322a:	f7ff fc17 	bl	8002a5c <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800322e:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003230:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003232:	e9cd 3405 	strd	r3, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003236:	4630      	mov	r0, r6
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 8003238:	4c2e      	ldr	r4, [pc, #184]	; (80032f4 <main+0x258>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800323a:	f7ff fca1 	bl	8002b80 <HAL_TIMEx_MasterConfigSynchronization>
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 800323e:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <main+0x25c>)
 8003240:	6023      	str	r3, [r4, #0]
	audioToUpdate = audioBufferA;
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <main+0x260>)
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <main+0x264>)
 8003246:	601a      	str	r2, [r3, #0]
	CS43L22_init();   				//configuro el DAC CS43L22
 8003248:	f7ff fcc4 	bl	8002bd4 <CS43L22_init>
	audio_buffer_init();         	//inicializo los buffers con ceros
 800324c:	f7ff fdd4 	bl	8002df8 <audio_buffer_init>
	HAL_TIM_Base_Start(&htim2); 	//activo el timer
 8003250:	4630      	mov	r0, r6
 8003252:	f7ff fb67 	bl	8002924 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1); 		// y el ADC
 8003256:	4628      	mov	r0, r5
 8003258:	f7fd fef8 	bl	800104c <HAL_ADC_Start_IT>
	row_diffeq = create_diff_eq(ROW);
 800325c:	4829      	ldr	r0, [pc, #164]	; (8003304 <main+0x268>)
	input_buffer = create_circ_buffer(3);
 800325e:	4d2a      	ldr	r5, [pc, #168]	; (8003308 <main+0x26c>)
	row_diffeq = create_diff_eq(ROW);
 8003260:	f240 3102 	movw	r1, #770	; 0x302
 8003264:	f7ff fed0 	bl	8003008 <create_diff_eq>
	column_diffeq = create_diff_eq(COLUMN);
 8003268:	f240 41b9 	movw	r1, #1209	; 0x4b9
 800326c:	4827      	ldr	r0, [pc, #156]	; (800330c <main+0x270>)
 800326e:	f7ff fecb 	bl	8003008 <create_diff_eq>
	input_buffer = create_circ_buffer(3);
 8003272:	2003      	movs	r0, #3
 8003274:	f7ff fea8 	bl	8002fc8 <create_circ_buffer>
 8003278:	6028      	str	r0, [r5, #0]
	row_buffer = create_circ_buffer(3);
 800327a:	2003      	movs	r0, #3
 800327c:	f7ff fea4 	bl	8002fc8 <create_circ_buffer>
 8003280:	4b23      	ldr	r3, [pc, #140]	; (8003310 <main+0x274>)
 8003282:	6018      	str	r0, [r3, #0]
	column_buffer = create_circ_buffer(3);
 8003284:	2003      	movs	r0, #3
 8003286:	f7ff fe9f 	bl	8002fc8 <create_circ_buffer>
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <main+0x278>)
	input_buffer->value = START_VAL; // start the sine wave
 800328c:	4a22      	ldr	r2, [pc, #136]	; (8003318 <main+0x27c>)
	column_buffer = create_circ_buffer(3);
 800328e:	6018      	str	r0, [r3, #0]
	input_buffer->value = START_VAL; // start the sine wave
 8003290:	682b      	ldr	r3, [r5, #0]
		if(transferComplete && (flag == data_ready_to_send)){
 8003292:	4d22      	ldr	r5, [pc, #136]	; (800331c <main+0x280>)
	input_buffer->value = START_VAL; // start the sine wave
 8003294:	605a      	str	r2, [r3, #4]
		if(transferComplete && (flag == data_ready_to_send)){
 8003296:	4e22      	ldr	r6, [pc, #136]	; (8003320 <main+0x284>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 8003298:	f898 0000 	ldrb.w	r0, [r8]
 800329c:	f7ff fd9c 	bl	8002dd8 <select_buffer_to_transmit>
		if(transferComplete && (flag == data_ready_to_send)){
 80032a0:	7833      	ldrb	r3, [r6, #0]
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 80032a2:	6020      	str	r0, [r4, #0]
		if(transferComplete && (flag == data_ready_to_send)){
 80032a4:	b13b      	cbz	r3, 80032b6 <main+0x21a>
 80032a6:	782f      	ldrb	r7, [r5, #0]
 80032a8:	b92f      	cbnz	r7, 80032b6 <main+0x21a>
			flag = idle;
 80032aa:	2302      	movs	r3, #2
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 80032ac:	21b4      	movs	r1, #180	; 0xb4
			flag = idle;
 80032ae:	702b      	strb	r3, [r5, #0]
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 80032b0:	f7ff fd28 	bl	8002d04 <CS43L22_AudioSend>
			transferComplete = FALSE;
 80032b4:	7037      	strb	r7, [r6, #0]
		if(adc_done){
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <main+0x288>)
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	2a00      	cmp	r2, #0
 80032bc:	d0ec      	beq.n	8003298 <main+0x1fc>
			adc_done = 0;
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
			fill_buffers();
 80032c2:	f7ff fe65 	bl	8002f90 <fill_buffers>
 80032c6:	e7e6      	b.n	8003296 <main+0x1fa>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	2000037c 	.word	0x2000037c
 80032d4:	40020c00 	.word	0x40020c00
 80032d8:	200003c4 	.word	0x200003c4
 80032dc:	40005400 	.word	0x40005400
 80032e0:	000186a0 	.word	0x000186a0
 80032e4:	20000418 	.word	0x20000418
 80032e8:	40003c00 	.word	0x40003c00
 80032ec:	40012000 	.word	0x40012000
 80032f0:	20000460 	.word	0x20000460
 80032f4:	20000354 	.word	0x20000354
 80032f8:	200001ea 	.word	0x200001ea
 80032fc:	20000358 	.word	0x20000358
 8003300:	20000082 	.word	0x20000082
 8003304:	200004ac 	.word	0x200004ac
 8003308:	200004a4 	.word	0x200004a4
 800330c:	20000364 	.word	0x20000364
 8003310:	200004a8 	.word	0x200004a8
 8003314:	20000360 	.word	0x20000360
 8003318:	43fa0000 	.word	0x43fa0000
 800331c:	20000009 	.word	0x20000009
 8003320:	2000000a 	.word	0x2000000a
 8003324:	20000080 	.word	0x20000080
 8003328:	20000008 	.word	0x20000008

0800332c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800332c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <HAL_MspInit+0x34>)
 8003330:	2100      	movs	r1, #0
 8003332:	9100      	str	r1, [sp, #0]
 8003334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
 800333c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800333e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003342:	9200      	str	r2, [sp, #0]
 8003344:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	9101      	str	r1, [sp, #4]
 8003348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800334a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800335a:	b002      	add	sp, #8
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003364:	b510      	push	{r4, lr}
 8003366:	4604      	mov	r4, r0
 8003368:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	2214      	movs	r2, #20
 800336c:	2100      	movs	r1, #0
 800336e:	a803      	add	r0, sp, #12
 8003370:	f000 fa02 	bl	8003778 <memset>
  if(hadc->Instance==ADC1)
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_ADC_MspInit+0x6c>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d126      	bne.n	80033ca <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800337c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003380:	2400      	movs	r4, #0
 8003382:	9401      	str	r4, [sp, #4]
 8003384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = Audio_Input_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 8003386:	4813      	ldr	r0, [pc, #76]	; (80033d4 <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
 800338e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003390:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003394:	9201      	str	r2, [sp, #4]
 8003396:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003398:	9402      	str	r4, [sp, #8]
 800339a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033aa:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ac:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 80033ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 80033b6:	f7fe f851 	bl	800145c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80033ba:	2012      	movs	r0, #18
 80033bc:	4622      	mov	r2, r4
 80033be:	4621      	mov	r1, r4
 80033c0:	f7fd fff8 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80033c4:	2012      	movs	r0, #18
 80033c6:	f7fe f827 	bl	8001418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033ca:	b008      	add	sp, #32
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	bf00      	nop
 80033d0:	40012000 	.word	0x40012000
 80033d4:	40020000 	.word	0x40020000

080033d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d8:	b530      	push	{r4, r5, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033de:	2214      	movs	r2, #20
 80033e0:	2100      	movs	r1, #0
 80033e2:	a803      	add	r0, sp, #12
 80033e4:	f000 f9c8 	bl	8003778 <memset>
  if(hi2c->Instance==I2C1)
 80033e8:	6822      	ldr	r2, [r4, #0]
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_I2C_MspInit+0x64>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d122      	bne.n	8003436 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f0:	4c13      	ldr	r4, [pc, #76]	; (8003440 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f2:	4814      	ldr	r0, [pc, #80]	; (8003444 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f4:	2500      	movs	r5, #0
 80033f6:	9501      	str	r5, [sp, #4]
 80033f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	6323      	str	r3, [r4, #48]	; 0x30
 8003400:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800340a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800340e:	2312      	movs	r3, #18
 8003410:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003414:	2301      	movs	r3, #1
 8003416:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003418:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800341a:	2304      	movs	r3, #4
 800341c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	f7fe f81d 	bl	800145c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003422:	9502      	str	r5, [sp, #8]
 8003424:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003426:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800342a:	6423      	str	r3, [r4, #64]	; 0x40
 800342c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800342e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003432:	9302      	str	r3, [sp, #8]
 8003434:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003436:	b009      	add	sp, #36	; 0x24
 8003438:	bd30      	pop	{r4, r5, pc}
 800343a:	bf00      	nop
 800343c:	40005400 	.word	0x40005400
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400

08003448 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344e:	2214      	movs	r2, #20
 8003450:	2100      	movs	r1, #0
 8003452:	a803      	add	r0, sp, #12
 8003454:	f000 f990 	bl	8003778 <memset>
  if(hi2s->Instance==SPI3)
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_I2S_MspInit+0x9c>)
 800345c:	429a      	cmp	r2, r3
 800345e:	d13f      	bne.n	80034e0 <HAL_I2S_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003460:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8003464:	2400      	movs	r4, #0
 8003466:	9400      	str	r4, [sp, #0]
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800346a:	481f      	ldr	r0, [pc, #124]	; (80034e8 <HAL_I2S_MspInit+0xa0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800346c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
 8003472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003474:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003478:	9200      	str	r2, [sp, #0]
 800347a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	9401      	str	r4, [sp, #4]
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
 8003486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003488:	f002 0201 	and.w	r2, r2, #1
 800348c:	9201      	str	r2, [sp, #4]
 800348e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003490:	9402      	str	r4, [sp, #8]
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	f042 0204 	orr.w	r2, r2, #4
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2702      	movs	r7, #2
 80034a6:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034a8:	2601      	movs	r6, #1
 80034aa:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80034ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034b2:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80034b6:	f7fd ffd1 	bl	800145c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80034ba:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034be:	480b      	ldr	r0, [pc, #44]	; (80034ec <HAL_I2S_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034c0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034c8:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034cc:	f7fd ffc6 	bl	800145c <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80034d0:	2033      	movs	r0, #51	; 0x33
 80034d2:	4622      	mov	r2, r4
 80034d4:	4621      	mov	r1, r4
 80034d6:	f7fd ff6d 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80034da:	2033      	movs	r0, #51	; 0x33
 80034dc:	f7fd ff9c 	bl	8001418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80034e0:	b009      	add	sp, #36	; 0x24
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e4:	40003c00 	.word	0x40003c00
 80034e8:	40020000 	.word	0x40020000
 80034ec:	40020800 	.word	0x40020800

080034f0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80034f0:	6803      	ldr	r3, [r0, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80034f6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 80034f8:	d10b      	bne.n	8003512 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_TIM_Base_MspInit+0x28>)
 8003500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003512:	b002      	add	sp, #8
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800

0800351c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800351c:	4770      	bx	lr

0800351e <PendSV_Handler>:
 800351e:	4770      	bx	lr

08003520 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003520:	f7fd bcdc 	b.w	8000edc <HAL_IncTick>

08003524 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003524:	4801      	ldr	r0, [pc, #4]	; (800352c <ADC_IRQHandler+0x8>)
 8003526:	f7fd be0d 	b.w	8001144 <HAL_ADC_IRQHandler>
 800352a:	bf00      	nop
 800352c:	2000037c 	.word	0x2000037c

08003530 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8003530:	4801      	ldr	r0, [pc, #4]	; (8003538 <SPI3_IRQHandler+0x8>)
 8003532:	f7fe bd36 	b.w	8001fa2 <HAL_I2S_IRQHandler>
 8003536:	bf00      	nop
 8003538:	20000418 	.word	0x20000418

0800353c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <_sbrk+0x2c>)
 800353e:	6811      	ldr	r1, [r2, #0]
{
 8003540:	b508      	push	{r3, lr}
 8003542:	4603      	mov	r3, r0
	if (heap_end == 0)
 8003544:	b909      	cbnz	r1, 800354a <_sbrk+0xe>
		heap_end = &end;
 8003546:	4909      	ldr	r1, [pc, #36]	; (800356c <_sbrk+0x30>)
 8003548:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800354a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800354c:	4669      	mov	r1, sp
 800354e:	4403      	add	r3, r0
 8003550:	428b      	cmp	r3, r1
 8003552:	d906      	bls.n	8003562 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003554:	f000 f928 	bl	80037a8 <__errno>
 8003558:	230c      	movs	r3, #12
 800355a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003560:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003562:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8003564:	e7fc      	b.n	8003560 <_sbrk+0x24>
 8003566:	bf00      	nop
 8003568:	200004c8 	.word	0x200004c8
 800356c:	20000614 	.word	0x20000614

08003570 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003570:	490f      	ldr	r1, [pc, #60]	; (80035b0 <SystemInit+0x40>)
 8003572:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003576:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <SystemInit+0x44>)
 8003580:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003582:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800358a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003592:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003596:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003598:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <SystemInit+0x48>)
 800359a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035a2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035a4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035aa:	608b      	str	r3, [r1, #8]
#endif
}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	e000ed00 	.word	0xe000ed00
 80035b4:	40023800 	.word	0x40023800
 80035b8:	24003010 	.word	0x24003010

080035bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035c2:	e003      	b.n	80035cc <LoopCopyDataInit>

080035c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035ca:	3104      	adds	r1, #4

080035cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035cc:	480b      	ldr	r0, [pc, #44]	; (80035fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035d4:	d3f6      	bcc.n	80035c4 <CopyDataInit>
  ldr  r2, =_sbss
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035d8:	e002      	b.n	80035e0 <LoopFillZerobss>

080035da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035dc:	f842 3b04 	str.w	r3, [r2], #4

080035e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035e4:	d3f9      	bcc.n	80035da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035e6:	f7ff ffc3 	bl	8003570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ea:	f000 f8e3 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035ee:	f7ff fd55 	bl	800309c <main>
  bx  lr    
 80035f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035f8:	08004b40 	.word	0x08004b40
  ldr  r0, =_sdata
 80035fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003600:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 8003604:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 8003608:	20000614 	.word	0x20000614

0800360c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800360c:	e7fe      	b.n	800360c <BusFault_Handler>
	...

08003610 <malloc>:
 8003610:	4b02      	ldr	r3, [pc, #8]	; (800361c <malloc+0xc>)
 8003612:	4601      	mov	r1, r0
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f000 b823 	b.w	8003660 <_malloc_r>
 800361a:	bf00      	nop
 800361c:	2000005c 	.word	0x2000005c

08003620 <sbrk_aligned>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4e0e      	ldr	r6, [pc, #56]	; (800365c <sbrk_aligned+0x3c>)
 8003624:	460c      	mov	r4, r1
 8003626:	6831      	ldr	r1, [r6, #0]
 8003628:	4605      	mov	r5, r0
 800362a:	b911      	cbnz	r1, 8003632 <sbrk_aligned+0x12>
 800362c:	f000 f8ac 	bl	8003788 <_sbrk_r>
 8003630:	6030      	str	r0, [r6, #0]
 8003632:	4621      	mov	r1, r4
 8003634:	4628      	mov	r0, r5
 8003636:	f000 f8a7 	bl	8003788 <_sbrk_r>
 800363a:	1c43      	adds	r3, r0, #1
 800363c:	d00a      	beq.n	8003654 <sbrk_aligned+0x34>
 800363e:	1cc4      	adds	r4, r0, #3
 8003640:	f024 0403 	bic.w	r4, r4, #3
 8003644:	42a0      	cmp	r0, r4
 8003646:	d007      	beq.n	8003658 <sbrk_aligned+0x38>
 8003648:	1a21      	subs	r1, r4, r0
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f89c 	bl	8003788 <_sbrk_r>
 8003650:	3001      	adds	r0, #1
 8003652:	d101      	bne.n	8003658 <sbrk_aligned+0x38>
 8003654:	f04f 34ff 	mov.w	r4, #4294967295
 8003658:	4620      	mov	r0, r4
 800365a:	bd70      	pop	{r4, r5, r6, pc}
 800365c:	200004d0 	.word	0x200004d0

08003660 <_malloc_r>:
 8003660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003664:	1ccd      	adds	r5, r1, #3
 8003666:	f025 0503 	bic.w	r5, r5, #3
 800366a:	3508      	adds	r5, #8
 800366c:	2d0c      	cmp	r5, #12
 800366e:	bf38      	it	cc
 8003670:	250c      	movcc	r5, #12
 8003672:	2d00      	cmp	r5, #0
 8003674:	4607      	mov	r7, r0
 8003676:	db01      	blt.n	800367c <_malloc_r+0x1c>
 8003678:	42a9      	cmp	r1, r5
 800367a:	d905      	bls.n	8003688 <_malloc_r+0x28>
 800367c:	230c      	movs	r3, #12
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	2600      	movs	r6, #0
 8003682:	4630      	mov	r0, r6
 8003684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003688:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800375c <_malloc_r+0xfc>
 800368c:	f000 f868 	bl	8003760 <__malloc_lock>
 8003690:	f8d8 3000 	ldr.w	r3, [r8]
 8003694:	461c      	mov	r4, r3
 8003696:	bb5c      	cbnz	r4, 80036f0 <_malloc_r+0x90>
 8003698:	4629      	mov	r1, r5
 800369a:	4638      	mov	r0, r7
 800369c:	f7ff ffc0 	bl	8003620 <sbrk_aligned>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	4604      	mov	r4, r0
 80036a4:	d155      	bne.n	8003752 <_malloc_r+0xf2>
 80036a6:	f8d8 4000 	ldr.w	r4, [r8]
 80036aa:	4626      	mov	r6, r4
 80036ac:	2e00      	cmp	r6, #0
 80036ae:	d145      	bne.n	800373c <_malloc_r+0xdc>
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d048      	beq.n	8003746 <_malloc_r+0xe6>
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	4631      	mov	r1, r6
 80036b8:	4638      	mov	r0, r7
 80036ba:	eb04 0903 	add.w	r9, r4, r3
 80036be:	f000 f863 	bl	8003788 <_sbrk_r>
 80036c2:	4581      	cmp	r9, r0
 80036c4:	d13f      	bne.n	8003746 <_malloc_r+0xe6>
 80036c6:	6821      	ldr	r1, [r4, #0]
 80036c8:	1a6d      	subs	r5, r5, r1
 80036ca:	4629      	mov	r1, r5
 80036cc:	4638      	mov	r0, r7
 80036ce:	f7ff ffa7 	bl	8003620 <sbrk_aligned>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d037      	beq.n	8003746 <_malloc_r+0xe6>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	442b      	add	r3, r5
 80036da:	6023      	str	r3, [r4, #0]
 80036dc:	f8d8 3000 	ldr.w	r3, [r8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d038      	beq.n	8003756 <_malloc_r+0xf6>
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	42a2      	cmp	r2, r4
 80036e8:	d12b      	bne.n	8003742 <_malloc_r+0xe2>
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	e00f      	b.n	8003710 <_malloc_r+0xb0>
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	1b52      	subs	r2, r2, r5
 80036f4:	d41f      	bmi.n	8003736 <_malloc_r+0xd6>
 80036f6:	2a0b      	cmp	r2, #11
 80036f8:	d917      	bls.n	800372a <_malloc_r+0xca>
 80036fa:	1961      	adds	r1, r4, r5
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	6025      	str	r5, [r4, #0]
 8003700:	bf18      	it	ne
 8003702:	6059      	strne	r1, [r3, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	bf08      	it	eq
 8003708:	f8c8 1000 	streq.w	r1, [r8]
 800370c:	5162      	str	r2, [r4, r5]
 800370e:	604b      	str	r3, [r1, #4]
 8003710:	4638      	mov	r0, r7
 8003712:	f104 060b 	add.w	r6, r4, #11
 8003716:	f000 f829 	bl	800376c <__malloc_unlock>
 800371a:	f026 0607 	bic.w	r6, r6, #7
 800371e:	1d23      	adds	r3, r4, #4
 8003720:	1af2      	subs	r2, r6, r3
 8003722:	d0ae      	beq.n	8003682 <_malloc_r+0x22>
 8003724:	1b9b      	subs	r3, r3, r6
 8003726:	50a3      	str	r3, [r4, r2]
 8003728:	e7ab      	b.n	8003682 <_malloc_r+0x22>
 800372a:	42a3      	cmp	r3, r4
 800372c:	6862      	ldr	r2, [r4, #4]
 800372e:	d1dd      	bne.n	80036ec <_malloc_r+0x8c>
 8003730:	f8c8 2000 	str.w	r2, [r8]
 8003734:	e7ec      	b.n	8003710 <_malloc_r+0xb0>
 8003736:	4623      	mov	r3, r4
 8003738:	6864      	ldr	r4, [r4, #4]
 800373a:	e7ac      	b.n	8003696 <_malloc_r+0x36>
 800373c:	4634      	mov	r4, r6
 800373e:	6876      	ldr	r6, [r6, #4]
 8003740:	e7b4      	b.n	80036ac <_malloc_r+0x4c>
 8003742:	4613      	mov	r3, r2
 8003744:	e7cc      	b.n	80036e0 <_malloc_r+0x80>
 8003746:	230c      	movs	r3, #12
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4638      	mov	r0, r7
 800374c:	f000 f80e 	bl	800376c <__malloc_unlock>
 8003750:	e797      	b.n	8003682 <_malloc_r+0x22>
 8003752:	6025      	str	r5, [r4, #0]
 8003754:	e7dc      	b.n	8003710 <_malloc_r+0xb0>
 8003756:	605b      	str	r3, [r3, #4]
 8003758:	deff      	udf	#255	; 0xff
 800375a:	bf00      	nop
 800375c:	200004cc 	.word	0x200004cc

08003760 <__malloc_lock>:
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <__malloc_lock+0x8>)
 8003762:	f000 b84b 	b.w	80037fc <__retarget_lock_acquire_recursive>
 8003766:	bf00      	nop
 8003768:	20000610 	.word	0x20000610

0800376c <__malloc_unlock>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__malloc_unlock+0x8>)
 800376e:	f000 b846 	b.w	80037fe <__retarget_lock_release_recursive>
 8003772:	bf00      	nop
 8003774:	20000610 	.word	0x20000610

08003778 <memset>:
 8003778:	4402      	add	r2, r0
 800377a:	4603      	mov	r3, r0
 800377c:	4293      	cmp	r3, r2
 800377e:	d100      	bne.n	8003782 <memset+0xa>
 8003780:	4770      	bx	lr
 8003782:	f803 1b01 	strb.w	r1, [r3], #1
 8003786:	e7f9      	b.n	800377c <memset+0x4>

08003788 <_sbrk_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4d06      	ldr	r5, [pc, #24]	; (80037a4 <_sbrk_r+0x1c>)
 800378c:	2300      	movs	r3, #0
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	f7ff fed2 	bl	800353c <_sbrk>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_sbrk_r+0x1a>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_sbrk_r+0x1a>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	2000060c 	.word	0x2000060c

080037a8 <__errno>:
 80037a8:	4b01      	ldr	r3, [pc, #4]	; (80037b0 <__errno+0x8>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000005c 	.word	0x2000005c

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4d0d      	ldr	r5, [pc, #52]	; (80037ec <__libc_init_array+0x38>)
 80037b8:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	2600      	movs	r6, #0
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	4d0b      	ldr	r5, [pc, #44]	; (80037f4 <__libc_init_array+0x40>)
 80037c6:	4c0c      	ldr	r4, [pc, #48]	; (80037f8 <__libc_init_array+0x44>)
 80037c8:	f001 f8ae 	bl	8004928 <_init>
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	2600      	movs	r6, #0
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08004b38 	.word	0x08004b38
 80037f0:	08004b38 	.word	0x08004b38
 80037f4:	08004b38 	.word	0x08004b38
 80037f8:	08004b3c 	.word	0x08004b3c

080037fc <__retarget_lock_acquire_recursive>:
 80037fc:	4770      	bx	lr

080037fe <__retarget_lock_release_recursive>:
 80037fe:	4770      	bx	lr

08003800 <cos>:
 8003800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003802:	ec53 2b10 	vmov	r2, r3, d0
 8003806:	4826      	ldr	r0, [pc, #152]	; (80038a0 <cos+0xa0>)
 8003808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800380c:	4281      	cmp	r1, r0
 800380e:	dc06      	bgt.n	800381e <cos+0x1e>
 8003810:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003898 <cos+0x98>
 8003814:	b005      	add	sp, #20
 8003816:	f85d eb04 	ldr.w	lr, [sp], #4
 800381a:	f000 b89d 	b.w	8003958 <__kernel_cos>
 800381e:	4821      	ldr	r0, [pc, #132]	; (80038a4 <cos+0xa4>)
 8003820:	4281      	cmp	r1, r0
 8003822:	dd09      	ble.n	8003838 <cos+0x38>
 8003824:	ee10 0a10 	vmov	r0, s0
 8003828:	4619      	mov	r1, r3
 800382a:	f7fc fcd1 	bl	80001d0 <__aeabi_dsub>
 800382e:	ec41 0b10 	vmov	d0, r0, r1
 8003832:	b005      	add	sp, #20
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
 8003838:	4668      	mov	r0, sp
 800383a:	f000 fa15 	bl	8003c68 <__ieee754_rem_pio2>
 800383e:	f000 0003 	and.w	r0, r0, #3
 8003842:	2801      	cmp	r0, #1
 8003844:	d00b      	beq.n	800385e <cos+0x5e>
 8003846:	2802      	cmp	r0, #2
 8003848:	d016      	beq.n	8003878 <cos+0x78>
 800384a:	b9e0      	cbnz	r0, 8003886 <cos+0x86>
 800384c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003850:	ed9d 0b00 	vldr	d0, [sp]
 8003854:	f000 f880 	bl	8003958 <__kernel_cos>
 8003858:	ec51 0b10 	vmov	r0, r1, d0
 800385c:	e7e7      	b.n	800382e <cos+0x2e>
 800385e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003862:	ed9d 0b00 	vldr	d0, [sp]
 8003866:	f000 f93f 	bl	8003ae8 <__kernel_sin>
 800386a:	ec53 2b10 	vmov	r2, r3, d0
 800386e:	ee10 0a10 	vmov	r0, s0
 8003872:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003876:	e7da      	b.n	800382e <cos+0x2e>
 8003878:	ed9d 1b02 	vldr	d1, [sp, #8]
 800387c:	ed9d 0b00 	vldr	d0, [sp]
 8003880:	f000 f86a 	bl	8003958 <__kernel_cos>
 8003884:	e7f1      	b.n	800386a <cos+0x6a>
 8003886:	ed9d 1b02 	vldr	d1, [sp, #8]
 800388a:	ed9d 0b00 	vldr	d0, [sp]
 800388e:	2001      	movs	r0, #1
 8003890:	f000 f92a 	bl	8003ae8 <__kernel_sin>
 8003894:	e7e0      	b.n	8003858 <cos+0x58>
 8003896:	bf00      	nop
	...
 80038a0:	3fe921fb 	.word	0x3fe921fb
 80038a4:	7fefffff 	.word	0x7fefffff

080038a8 <sin>:
 80038a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038aa:	ec53 2b10 	vmov	r2, r3, d0
 80038ae:	4828      	ldr	r0, [pc, #160]	; (8003950 <sin+0xa8>)
 80038b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038b4:	4281      	cmp	r1, r0
 80038b6:	dc07      	bgt.n	80038c8 <sin+0x20>
 80038b8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003948 <sin+0xa0>
 80038bc:	2000      	movs	r0, #0
 80038be:	b005      	add	sp, #20
 80038c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c4:	f000 b910 	b.w	8003ae8 <__kernel_sin>
 80038c8:	4822      	ldr	r0, [pc, #136]	; (8003954 <sin+0xac>)
 80038ca:	4281      	cmp	r1, r0
 80038cc:	dd09      	ble.n	80038e2 <sin+0x3a>
 80038ce:	ee10 0a10 	vmov	r0, s0
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fc fc7c 	bl	80001d0 <__aeabi_dsub>
 80038d8:	ec41 0b10 	vmov	d0, r0, r1
 80038dc:	b005      	add	sp, #20
 80038de:	f85d fb04 	ldr.w	pc, [sp], #4
 80038e2:	4668      	mov	r0, sp
 80038e4:	f000 f9c0 	bl	8003c68 <__ieee754_rem_pio2>
 80038e8:	f000 0003 	and.w	r0, r0, #3
 80038ec:	2801      	cmp	r0, #1
 80038ee:	d00c      	beq.n	800390a <sin+0x62>
 80038f0:	2802      	cmp	r0, #2
 80038f2:	d011      	beq.n	8003918 <sin+0x70>
 80038f4:	b9f0      	cbnz	r0, 8003934 <sin+0x8c>
 80038f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80038fa:	ed9d 0b00 	vldr	d0, [sp]
 80038fe:	2001      	movs	r0, #1
 8003900:	f000 f8f2 	bl	8003ae8 <__kernel_sin>
 8003904:	ec51 0b10 	vmov	r0, r1, d0
 8003908:	e7e6      	b.n	80038d8 <sin+0x30>
 800390a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800390e:	ed9d 0b00 	vldr	d0, [sp]
 8003912:	f000 f821 	bl	8003958 <__kernel_cos>
 8003916:	e7f5      	b.n	8003904 <sin+0x5c>
 8003918:	ed9d 1b02 	vldr	d1, [sp, #8]
 800391c:	ed9d 0b00 	vldr	d0, [sp]
 8003920:	2001      	movs	r0, #1
 8003922:	f000 f8e1 	bl	8003ae8 <__kernel_sin>
 8003926:	ec53 2b10 	vmov	r2, r3, d0
 800392a:	ee10 0a10 	vmov	r0, s0
 800392e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003932:	e7d1      	b.n	80038d8 <sin+0x30>
 8003934:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003938:	ed9d 0b00 	vldr	d0, [sp]
 800393c:	f000 f80c 	bl	8003958 <__kernel_cos>
 8003940:	e7f1      	b.n	8003926 <sin+0x7e>
 8003942:	bf00      	nop
 8003944:	f3af 8000 	nop.w
	...
 8003950:	3fe921fb 	.word	0x3fe921fb
 8003954:	7fefffff 	.word	0x7fefffff

08003958 <__kernel_cos>:
 8003958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	ec57 6b10 	vmov	r6, r7, d0
 8003960:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003964:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003968:	ed8d 1b00 	vstr	d1, [sp]
 800396c:	da07      	bge.n	800397e <__kernel_cos+0x26>
 800396e:	ee10 0a10 	vmov	r0, s0
 8003972:	4639      	mov	r1, r7
 8003974:	f7fd f87e 	bl	8000a74 <__aeabi_d2iz>
 8003978:	2800      	cmp	r0, #0
 800397a:	f000 8088 	beq.w	8003a8e <__kernel_cos+0x136>
 800397e:	4632      	mov	r2, r6
 8003980:	463b      	mov	r3, r7
 8003982:	4630      	mov	r0, r6
 8003984:	4639      	mov	r1, r7
 8003986:	f7fc fddb 	bl	8000540 <__aeabi_dmul>
 800398a:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <__kernel_cos+0x178>)
 800398c:	2200      	movs	r2, #0
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	f7fc fdd5 	bl	8000540 <__aeabi_dmul>
 8003996:	a340      	add	r3, pc, #256	; (adr r3, 8003a98 <__kernel_cos+0x140>)
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	4682      	mov	sl, r0
 800399e:	468b      	mov	fp, r1
 80039a0:	4620      	mov	r0, r4
 80039a2:	4629      	mov	r1, r5
 80039a4:	f7fc fdcc 	bl	8000540 <__aeabi_dmul>
 80039a8:	a33d      	add	r3, pc, #244	; (adr r3, 8003aa0 <__kernel_cos+0x148>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f7fc fc11 	bl	80001d4 <__adddf3>
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	f7fc fdc3 	bl	8000540 <__aeabi_dmul>
 80039ba:	a33b      	add	r3, pc, #236	; (adr r3, 8003aa8 <__kernel_cos+0x150>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fc06 	bl	80001d0 <__aeabi_dsub>
 80039c4:	4622      	mov	r2, r4
 80039c6:	462b      	mov	r3, r5
 80039c8:	f7fc fdba 	bl	8000540 <__aeabi_dmul>
 80039cc:	a338      	add	r3, pc, #224	; (adr r3, 8003ab0 <__kernel_cos+0x158>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fc fbff 	bl	80001d4 <__adddf3>
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f7fc fdb1 	bl	8000540 <__aeabi_dmul>
 80039de:	a336      	add	r3, pc, #216	; (adr r3, 8003ab8 <__kernel_cos+0x160>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fbf4 	bl	80001d0 <__aeabi_dsub>
 80039e8:	4622      	mov	r2, r4
 80039ea:	462b      	mov	r3, r5
 80039ec:	f7fc fda8 	bl	8000540 <__aeabi_dmul>
 80039f0:	a333      	add	r3, pc, #204	; (adr r3, 8003ac0 <__kernel_cos+0x168>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f7fc fbed 	bl	80001d4 <__adddf3>
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	f7fc fd9f 	bl	8000540 <__aeabi_dmul>
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	f7fc fd9b 	bl	8000540 <__aeabi_dmul>
 8003a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a0e:	4604      	mov	r4, r0
 8003a10:	460d      	mov	r5, r1
 8003a12:	4630      	mov	r0, r6
 8003a14:	4639      	mov	r1, r7
 8003a16:	f7fc fd93 	bl	8000540 <__aeabi_dmul>
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4629      	mov	r1, r5
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7fc fbd5 	bl	80001d0 <__aeabi_dsub>
 8003a26:	4b2b      	ldr	r3, [pc, #172]	; (8003ad4 <__kernel_cos+0x17c>)
 8003a28:	4598      	cmp	r8, r3
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	460f      	mov	r7, r1
 8003a2e:	dc10      	bgt.n	8003a52 <__kernel_cos+0xfa>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4650      	mov	r0, sl
 8003a36:	4659      	mov	r1, fp
 8003a38:	f7fc fbca 	bl	80001d0 <__aeabi_dsub>
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4926      	ldr	r1, [pc, #152]	; (8003ad8 <__kernel_cos+0x180>)
 8003a40:	4602      	mov	r2, r0
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7fc fbc4 	bl	80001d0 <__aeabi_dsub>
 8003a48:	ec41 0b10 	vmov	d0, r0, r1
 8003a4c:	b003      	add	sp, #12
 8003a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a52:	4b22      	ldr	r3, [pc, #136]	; (8003adc <__kernel_cos+0x184>)
 8003a54:	4920      	ldr	r1, [pc, #128]	; (8003ad8 <__kernel_cos+0x180>)
 8003a56:	4598      	cmp	r8, r3
 8003a58:	bfcc      	ite	gt
 8003a5a:	4d21      	ldrgt	r5, [pc, #132]	; (8003ae0 <__kernel_cos+0x188>)
 8003a5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003a60:	2400      	movs	r4, #0
 8003a62:	4622      	mov	r2, r4
 8003a64:	462b      	mov	r3, r5
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fc fbb2 	bl	80001d0 <__aeabi_dsub>
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4680      	mov	r8, r0
 8003a70:	4689      	mov	r9, r1
 8003a72:	462b      	mov	r3, r5
 8003a74:	4650      	mov	r0, sl
 8003a76:	4659      	mov	r1, fp
 8003a78:	f7fc fbaa 	bl	80001d0 <__aeabi_dsub>
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	463b      	mov	r3, r7
 8003a80:	f7fc fba6 	bl	80001d0 <__aeabi_dsub>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4640      	mov	r0, r8
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	e7da      	b.n	8003a44 <__kernel_cos+0xec>
 8003a8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003ac8 <__kernel_cos+0x170>
 8003a92:	e7db      	b.n	8003a4c <__kernel_cos+0xf4>
 8003a94:	f3af 8000 	nop.w
 8003a98:	be8838d4 	.word	0xbe8838d4
 8003a9c:	bda8fae9 	.word	0xbda8fae9
 8003aa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8003aa4:	3e21ee9e 	.word	0x3e21ee9e
 8003aa8:	809c52ad 	.word	0x809c52ad
 8003aac:	3e927e4f 	.word	0x3e927e4f
 8003ab0:	19cb1590 	.word	0x19cb1590
 8003ab4:	3efa01a0 	.word	0x3efa01a0
 8003ab8:	16c15177 	.word	0x16c15177
 8003abc:	3f56c16c 	.word	0x3f56c16c
 8003ac0:	5555554c 	.word	0x5555554c
 8003ac4:	3fa55555 	.word	0x3fa55555
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	3ff00000 	.word	0x3ff00000
 8003ad0:	3fe00000 	.word	0x3fe00000
 8003ad4:	3fd33332 	.word	0x3fd33332
 8003ad8:	3ff00000 	.word	0x3ff00000
 8003adc:	3fe90000 	.word	0x3fe90000
 8003ae0:	3fd20000 	.word	0x3fd20000
 8003ae4:	00000000 	.word	0x00000000

08003ae8 <__kernel_sin>:
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	ed2d 8b04 	vpush	{d8-d9}
 8003af0:	eeb0 8a41 	vmov.f32	s16, s2
 8003af4:	eef0 8a61 	vmov.f32	s17, s3
 8003af8:	ec55 4b10 	vmov	r4, r5, d0
 8003afc:	b083      	sub	sp, #12
 8003afe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003b02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003b06:	9001      	str	r0, [sp, #4]
 8003b08:	da06      	bge.n	8003b18 <__kernel_sin+0x30>
 8003b0a:	ee10 0a10 	vmov	r0, s0
 8003b0e:	4629      	mov	r1, r5
 8003b10:	f7fc ffb0 	bl	8000a74 <__aeabi_d2iz>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d051      	beq.n	8003bbc <__kernel_sin+0xd4>
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4629      	mov	r1, r5
 8003b20:	f7fc fd0e 	bl	8000540 <__aeabi_dmul>
 8003b24:	4682      	mov	sl, r0
 8003b26:	468b      	mov	fp, r1
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	4629      	mov	r1, r5
 8003b30:	f7fc fd06 	bl	8000540 <__aeabi_dmul>
 8003b34:	a341      	add	r3, pc, #260	; (adr r3, 8003c3c <__kernel_sin+0x154>)
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	4680      	mov	r8, r0
 8003b3c:	4689      	mov	r9, r1
 8003b3e:	4650      	mov	r0, sl
 8003b40:	4659      	mov	r1, fp
 8003b42:	f7fc fcfd 	bl	8000540 <__aeabi_dmul>
 8003b46:	a33f      	add	r3, pc, #252	; (adr r3, 8003c44 <__kernel_sin+0x15c>)
 8003b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4c:	f7fc fb40 	bl	80001d0 <__aeabi_dsub>
 8003b50:	4652      	mov	r2, sl
 8003b52:	465b      	mov	r3, fp
 8003b54:	f7fc fcf4 	bl	8000540 <__aeabi_dmul>
 8003b58:	a33c      	add	r3, pc, #240	; (adr r3, 8003c4c <__kernel_sin+0x164>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fb39 	bl	80001d4 <__adddf3>
 8003b62:	4652      	mov	r2, sl
 8003b64:	465b      	mov	r3, fp
 8003b66:	f7fc fceb 	bl	8000540 <__aeabi_dmul>
 8003b6a:	a33a      	add	r3, pc, #232	; (adr r3, 8003c54 <__kernel_sin+0x16c>)
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f7fc fb2e 	bl	80001d0 <__aeabi_dsub>
 8003b74:	4652      	mov	r2, sl
 8003b76:	465b      	mov	r3, fp
 8003b78:	f7fc fce2 	bl	8000540 <__aeabi_dmul>
 8003b7c:	a337      	add	r3, pc, #220	; (adr r3, 8003c5c <__kernel_sin+0x174>)
 8003b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b82:	f7fc fb27 	bl	80001d4 <__adddf3>
 8003b86:	9b01      	ldr	r3, [sp, #4]
 8003b88:	4606      	mov	r6, r0
 8003b8a:	460f      	mov	r7, r1
 8003b8c:	b9eb      	cbnz	r3, 8003bca <__kernel_sin+0xe2>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4650      	mov	r0, sl
 8003b94:	4659      	mov	r1, fp
 8003b96:	f7fc fcd3 	bl	8000540 <__aeabi_dmul>
 8003b9a:	a325      	add	r3, pc, #148	; (adr r3, 8003c30 <__kernel_sin+0x148>)
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	f7fc fb16 	bl	80001d0 <__aeabi_dsub>
 8003ba4:	4642      	mov	r2, r8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	f7fc fcca 	bl	8000540 <__aeabi_dmul>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fb0e 	bl	80001d4 <__adddf3>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	460d      	mov	r5, r1
 8003bbc:	ec45 4b10 	vmov	d0, r4, r5
 8003bc0:	b003      	add	sp, #12
 8003bc2:	ecbd 8b04 	vpop	{d8-d9}
 8003bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <__kernel_sin+0x150>)
 8003bcc:	ec51 0b18 	vmov	r0, r1, d8
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f7fc fcb5 	bl	8000540 <__aeabi_dmul>
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	ec41 0b19 	vmov	d9, r0, r1
 8003bdc:	463b      	mov	r3, r7
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	f7fc fcad 	bl	8000540 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	ec51 0b19 	vmov	r0, r1, d9
 8003bee:	f7fc faef 	bl	80001d0 <__aeabi_dsub>
 8003bf2:	4652      	mov	r2, sl
 8003bf4:	465b      	mov	r3, fp
 8003bf6:	f7fc fca3 	bl	8000540 <__aeabi_dmul>
 8003bfa:	ec53 2b18 	vmov	r2, r3, d8
 8003bfe:	f7fc fae7 	bl	80001d0 <__aeabi_dsub>
 8003c02:	a30b      	add	r3, pc, #44	; (adr r3, 8003c30 <__kernel_sin+0x148>)
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	4606      	mov	r6, r0
 8003c0a:	460f      	mov	r7, r1
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	4649      	mov	r1, r9
 8003c10:	f7fc fc96 	bl	8000540 <__aeabi_dmul>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4630      	mov	r0, r6
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	f7fc fada 	bl	80001d4 <__adddf3>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4620      	mov	r0, r4
 8003c26:	4629      	mov	r1, r5
 8003c28:	f7fc fad2 	bl	80001d0 <__aeabi_dsub>
 8003c2c:	e7c4      	b.n	8003bb8 <__kernel_sin+0xd0>
 8003c2e:	bf00      	nop
 8003c30:	55555549 	.word	0x55555549
 8003c34:	3fc55555 	.word	0x3fc55555
 8003c38:	3fe00000 	.word	0x3fe00000
 8003c3c:	5acfd57c 	.word	0x5acfd57c
 8003c40:	3de5d93a 	.word	0x3de5d93a
 8003c44:	8a2b9ceb 	.word	0x8a2b9ceb
 8003c48:	3e5ae5e6 	.word	0x3e5ae5e6
 8003c4c:	57b1fe7d 	.word	0x57b1fe7d
 8003c50:	3ec71de3 	.word	0x3ec71de3
 8003c54:	19c161d5 	.word	0x19c161d5
 8003c58:	3f2a01a0 	.word	0x3f2a01a0
 8003c5c:	1110f8a6 	.word	0x1110f8a6
 8003c60:	3f811111 	.word	0x3f811111
 8003c64:	00000000 	.word	0x00000000

08003c68 <__ieee754_rem_pio2>:
 8003c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6c:	ed2d 8b02 	vpush	{d8}
 8003c70:	ec55 4b10 	vmov	r4, r5, d0
 8003c74:	4bca      	ldr	r3, [pc, #808]	; (8003fa0 <__ieee754_rem_pio2+0x338>)
 8003c76:	b08b      	sub	sp, #44	; 0x2c
 8003c78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003c7c:	4598      	cmp	r8, r3
 8003c7e:	4682      	mov	sl, r0
 8003c80:	9502      	str	r5, [sp, #8]
 8003c82:	dc08      	bgt.n	8003c96 <__ieee754_rem_pio2+0x2e>
 8003c84:	2200      	movs	r2, #0
 8003c86:	2300      	movs	r3, #0
 8003c88:	ed80 0b00 	vstr	d0, [r0]
 8003c8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003c90:	f04f 0b00 	mov.w	fp, #0
 8003c94:	e028      	b.n	8003ce8 <__ieee754_rem_pio2+0x80>
 8003c96:	4bc3      	ldr	r3, [pc, #780]	; (8003fa4 <__ieee754_rem_pio2+0x33c>)
 8003c98:	4598      	cmp	r8, r3
 8003c9a:	dc78      	bgt.n	8003d8e <__ieee754_rem_pio2+0x126>
 8003c9c:	9b02      	ldr	r3, [sp, #8]
 8003c9e:	4ec2      	ldr	r6, [pc, #776]	; (8003fa8 <__ieee754_rem_pio2+0x340>)
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	ee10 0a10 	vmov	r0, s0
 8003ca6:	a3b0      	add	r3, pc, #704	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x300>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	4629      	mov	r1, r5
 8003cae:	dd39      	ble.n	8003d24 <__ieee754_rem_pio2+0xbc>
 8003cb0:	f7fc fa8e 	bl	80001d0 <__aeabi_dsub>
 8003cb4:	45b0      	cmp	r8, r6
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	460d      	mov	r5, r1
 8003cba:	d01b      	beq.n	8003cf4 <__ieee754_rem_pio2+0x8c>
 8003cbc:	a3ac      	add	r3, pc, #688	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x308>)
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f7fc fa85 	bl	80001d0 <__aeabi_dsub>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	e9ca 2300 	strd	r2, r3, [sl]
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7fc fa7d 	bl	80001d0 <__aeabi_dsub>
 8003cd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x308>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fa78 	bl	80001d0 <__aeabi_dsub>
 8003ce0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ce4:	f04f 0b01 	mov.w	fp, #1
 8003ce8:	4658      	mov	r0, fp
 8003cea:	b00b      	add	sp, #44	; 0x2c
 8003cec:	ecbd 8b02 	vpop	{d8}
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	a3a0      	add	r3, pc, #640	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x310>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fa69 	bl	80001d0 <__aeabi_dsub>
 8003cfe:	a3a0      	add	r3, pc, #640	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x318>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	4604      	mov	r4, r0
 8003d06:	460d      	mov	r5, r1
 8003d08:	f7fc fa62 	bl	80001d0 <__aeabi_dsub>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	e9ca 2300 	strd	r2, r3, [sl]
 8003d14:	4620      	mov	r0, r4
 8003d16:	4629      	mov	r1, r5
 8003d18:	f7fc fa5a 	bl	80001d0 <__aeabi_dsub>
 8003d1c:	a398      	add	r3, pc, #608	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x318>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	e7db      	b.n	8003cdc <__ieee754_rem_pio2+0x74>
 8003d24:	f7fc fa56 	bl	80001d4 <__adddf3>
 8003d28:	45b0      	cmp	r8, r6
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	d016      	beq.n	8003d5e <__ieee754_rem_pio2+0xf6>
 8003d30:	a38f      	add	r3, pc, #572	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x308>)
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f7fc fa4d 	bl	80001d4 <__adddf3>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	e9ca 2300 	strd	r2, r3, [sl]
 8003d42:	4620      	mov	r0, r4
 8003d44:	4629      	mov	r1, r5
 8003d46:	f7fc fa43 	bl	80001d0 <__aeabi_dsub>
 8003d4a:	a389      	add	r3, pc, #548	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x308>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fa40 	bl	80001d4 <__adddf3>
 8003d54:	f04f 3bff 	mov.w	fp, #4294967295
 8003d58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003d5c:	e7c4      	b.n	8003ce8 <__ieee754_rem_pio2+0x80>
 8003d5e:	a386      	add	r3, pc, #536	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x310>)
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f7fc fa36 	bl	80001d4 <__adddf3>
 8003d68:	a385      	add	r3, pc, #532	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x318>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	4604      	mov	r4, r0
 8003d70:	460d      	mov	r5, r1
 8003d72:	f7fc fa2f 	bl	80001d4 <__adddf3>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9ca 2300 	strd	r2, r3, [sl]
 8003d7e:	4620      	mov	r0, r4
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7fc fa25 	bl	80001d0 <__aeabi_dsub>
 8003d86:	a37e      	add	r3, pc, #504	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x318>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	e7e0      	b.n	8003d50 <__ieee754_rem_pio2+0xe8>
 8003d8e:	4b87      	ldr	r3, [pc, #540]	; (8003fac <__ieee754_rem_pio2+0x344>)
 8003d90:	4598      	cmp	r8, r3
 8003d92:	f300 80d8 	bgt.w	8003f46 <__ieee754_rem_pio2+0x2de>
 8003d96:	f000 f96d 	bl	8004074 <fabs>
 8003d9a:	ec55 4b10 	vmov	r4, r5, d0
 8003d9e:	ee10 0a10 	vmov	r0, s0
 8003da2:	a379      	add	r3, pc, #484	; (adr r3, 8003f88 <__ieee754_rem_pio2+0x320>)
 8003da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da8:	4629      	mov	r1, r5
 8003daa:	f7fc fbc9 	bl	8000540 <__aeabi_dmul>
 8003dae:	4b80      	ldr	r3, [pc, #512]	; (8003fb0 <__ieee754_rem_pio2+0x348>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	f7fc fa0f 	bl	80001d4 <__adddf3>
 8003db6:	f7fc fe5d 	bl	8000a74 <__aeabi_d2iz>
 8003dba:	4683      	mov	fp, r0
 8003dbc:	f7fc fb56 	bl	800046c <__aeabi_i2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	ec43 2b18 	vmov	d8, r2, r3
 8003dc8:	a367      	add	r3, pc, #412	; (adr r3, 8003f68 <__ieee754_rem_pio2+0x300>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fbb7 	bl	8000540 <__aeabi_dmul>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc f9f9 	bl	80001d0 <__aeabi_dsub>
 8003dde:	a364      	add	r3, pc, #400	; (adr r3, 8003f70 <__ieee754_rem_pio2+0x308>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	4606      	mov	r6, r0
 8003de6:	460f      	mov	r7, r1
 8003de8:	ec51 0b18 	vmov	r0, r1, d8
 8003dec:	f7fc fba8 	bl	8000540 <__aeabi_dmul>
 8003df0:	f1bb 0f1f 	cmp.w	fp, #31
 8003df4:	4604      	mov	r4, r0
 8003df6:	460d      	mov	r5, r1
 8003df8:	dc0d      	bgt.n	8003e16 <__ieee754_rem_pio2+0x1ae>
 8003dfa:	4b6e      	ldr	r3, [pc, #440]	; (8003fb4 <__ieee754_rem_pio2+0x34c>)
 8003dfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	4543      	cmp	r3, r8
 8003e06:	d006      	beq.n	8003e16 <__ieee754_rem_pio2+0x1ae>
 8003e08:	4622      	mov	r2, r4
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f7fc f9de 	bl	80001d0 <__aeabi_dsub>
 8003e14:	e00e      	b.n	8003e34 <__ieee754_rem_pio2+0x1cc>
 8003e16:	462b      	mov	r3, r5
 8003e18:	4622      	mov	r2, r4
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	4639      	mov	r1, r7
 8003e1e:	f7fc f9d7 	bl	80001d0 <__aeabi_dsub>
 8003e22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003e2c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	dc02      	bgt.n	8003e3a <__ieee754_rem_pio2+0x1d2>
 8003e34:	e9ca 0100 	strd	r0, r1, [sl]
 8003e38:	e039      	b.n	8003eae <__ieee754_rem_pio2+0x246>
 8003e3a:	a34f      	add	r3, pc, #316	; (adr r3, 8003f78 <__ieee754_rem_pio2+0x310>)
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	ec51 0b18 	vmov	r0, r1, d8
 8003e44:	f7fc fb7c 	bl	8000540 <__aeabi_dmul>
 8003e48:	4604      	mov	r4, r0
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	f7fc f9bc 	bl	80001d0 <__aeabi_dsub>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4680      	mov	r8, r0
 8003e5e:	4689      	mov	r9, r1
 8003e60:	4630      	mov	r0, r6
 8003e62:	4639      	mov	r1, r7
 8003e64:	f7fc f9b4 	bl	80001d0 <__aeabi_dsub>
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	f7fc f9b0 	bl	80001d0 <__aeabi_dsub>
 8003e70:	a343      	add	r3, pc, #268	; (adr r3, 8003f80 <__ieee754_rem_pio2+0x318>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	4604      	mov	r4, r0
 8003e78:	460d      	mov	r5, r1
 8003e7a:	ec51 0b18 	vmov	r0, r1, d8
 8003e7e:	f7fc fb5f 	bl	8000540 <__aeabi_dmul>
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	f7fc f9a3 	bl	80001d0 <__aeabi_dsub>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4604      	mov	r4, r0
 8003e90:	460d      	mov	r5, r1
 8003e92:	4640      	mov	r0, r8
 8003e94:	4649      	mov	r1, r9
 8003e96:	f7fc f99b 	bl	80001d0 <__aeabi_dsub>
 8003e9a:	9a03      	ldr	r2, [sp, #12]
 8003e9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b31      	cmp	r3, #49	; 0x31
 8003ea4:	dc24      	bgt.n	8003ef0 <__ieee754_rem_pio2+0x288>
 8003ea6:	e9ca 0100 	strd	r0, r1, [sl]
 8003eaa:	4646      	mov	r6, r8
 8003eac:	464f      	mov	r7, r9
 8003eae:	e9da 8900 	ldrd	r8, r9, [sl]
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	4639      	mov	r1, r7
 8003eba:	f7fc f989 	bl	80001d0 <__aeabi_dsub>
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	f7fc f985 	bl	80001d0 <__aeabi_dsub>
 8003ec6:	9b02      	ldr	r3, [sp, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003ece:	f6bf af0b 	bge.w	8003ce8 <__ieee754_rem_pio2+0x80>
 8003ed2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ed6:	f8ca 3004 	str.w	r3, [sl, #4]
 8003eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ede:	f8ca 8000 	str.w	r8, [sl]
 8003ee2:	f8ca 0008 	str.w	r0, [sl, #8]
 8003ee6:	f8ca 300c 	str.w	r3, [sl, #12]
 8003eea:	f1cb 0b00 	rsb	fp, fp, #0
 8003eee:	e6fb      	b.n	8003ce8 <__ieee754_rem_pio2+0x80>
 8003ef0:	a327      	add	r3, pc, #156	; (adr r3, 8003f90 <__ieee754_rem_pio2+0x328>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	ec51 0b18 	vmov	r0, r1, d8
 8003efa:	f7fc fb21 	bl	8000540 <__aeabi_dmul>
 8003efe:	4604      	mov	r4, r0
 8003f00:	460d      	mov	r5, r1
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	f7fc f961 	bl	80001d0 <__aeabi_dsub>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4606      	mov	r6, r0
 8003f14:	460f      	mov	r7, r1
 8003f16:	4640      	mov	r0, r8
 8003f18:	4649      	mov	r1, r9
 8003f1a:	f7fc f959 	bl	80001d0 <__aeabi_dsub>
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	f7fc f955 	bl	80001d0 <__aeabi_dsub>
 8003f26:	a31c      	add	r3, pc, #112	; (adr r3, 8003f98 <__ieee754_rem_pio2+0x330>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	460d      	mov	r5, r1
 8003f30:	ec51 0b18 	vmov	r0, r1, d8
 8003f34:	f7fc fb04 	bl	8000540 <__aeabi_dmul>
 8003f38:	4622      	mov	r2, r4
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	f7fc f948 	bl	80001d0 <__aeabi_dsub>
 8003f40:	4604      	mov	r4, r0
 8003f42:	460d      	mov	r5, r1
 8003f44:	e760      	b.n	8003e08 <__ieee754_rem_pio2+0x1a0>
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <__ieee754_rem_pio2+0x350>)
 8003f48:	4598      	cmp	r8, r3
 8003f4a:	dd37      	ble.n	8003fbc <__ieee754_rem_pio2+0x354>
 8003f4c:	ee10 2a10 	vmov	r2, s0
 8003f50:	462b      	mov	r3, r5
 8003f52:	4620      	mov	r0, r4
 8003f54:	4629      	mov	r1, r5
 8003f56:	f7fc f93b 	bl	80001d0 <__aeabi_dsub>
 8003f5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f5e:	e9ca 0100 	strd	r0, r1, [sl]
 8003f62:	e695      	b.n	8003c90 <__ieee754_rem_pio2+0x28>
 8003f64:	f3af 8000 	nop.w
 8003f68:	54400000 	.word	0x54400000
 8003f6c:	3ff921fb 	.word	0x3ff921fb
 8003f70:	1a626331 	.word	0x1a626331
 8003f74:	3dd0b461 	.word	0x3dd0b461
 8003f78:	1a600000 	.word	0x1a600000
 8003f7c:	3dd0b461 	.word	0x3dd0b461
 8003f80:	2e037073 	.word	0x2e037073
 8003f84:	3ba3198a 	.word	0x3ba3198a
 8003f88:	6dc9c883 	.word	0x6dc9c883
 8003f8c:	3fe45f30 	.word	0x3fe45f30
 8003f90:	2e000000 	.word	0x2e000000
 8003f94:	3ba3198a 	.word	0x3ba3198a
 8003f98:	252049c1 	.word	0x252049c1
 8003f9c:	397b839a 	.word	0x397b839a
 8003fa0:	3fe921fb 	.word	0x3fe921fb
 8003fa4:	4002d97b 	.word	0x4002d97b
 8003fa8:	3ff921fb 	.word	0x3ff921fb
 8003fac:	413921fb 	.word	0x413921fb
 8003fb0:	3fe00000 	.word	0x3fe00000
 8003fb4:	08004958 	.word	0x08004958
 8003fb8:	7fefffff 	.word	0x7fefffff
 8003fbc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003fc0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8003fc4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003fc8:	4620      	mov	r0, r4
 8003fca:	460d      	mov	r5, r1
 8003fcc:	f7fc fd52 	bl	8000a74 <__aeabi_d2iz>
 8003fd0:	f7fc fa4c 	bl	800046c <__aeabi_i2d>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4620      	mov	r0, r4
 8003fda:	4629      	mov	r1, r5
 8003fdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fe0:	f7fc f8f6 	bl	80001d0 <__aeabi_dsub>
 8003fe4:	4b21      	ldr	r3, [pc, #132]	; (800406c <__ieee754_rem_pio2+0x404>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f7fc faaa 	bl	8000540 <__aeabi_dmul>
 8003fec:	460d      	mov	r5, r1
 8003fee:	4604      	mov	r4, r0
 8003ff0:	f7fc fd40 	bl	8000a74 <__aeabi_d2iz>
 8003ff4:	f7fc fa3a 	bl	800046c <__aeabi_i2d>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	4629      	mov	r1, r5
 8004000:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004004:	f7fc f8e4 	bl	80001d0 <__aeabi_dsub>
 8004008:	4b18      	ldr	r3, [pc, #96]	; (800406c <__ieee754_rem_pio2+0x404>)
 800400a:	2200      	movs	r2, #0
 800400c:	f7fc fa98 	bl	8000540 <__aeabi_dmul>
 8004010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004014:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004018:	2703      	movs	r7, #3
 800401a:	2400      	movs	r4, #0
 800401c:	2500      	movs	r5, #0
 800401e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	46b9      	mov	r9, r7
 8004028:	3f01      	subs	r7, #1
 800402a:	f7fc fcf1 	bl	8000a10 <__aeabi_dcmpeq>
 800402e:	2800      	cmp	r0, #0
 8004030:	d1f5      	bne.n	800401e <__ieee754_rem_pio2+0x3b6>
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <__ieee754_rem_pio2+0x408>)
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	2302      	movs	r3, #2
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	4632      	mov	r2, r6
 800403c:	464b      	mov	r3, r9
 800403e:	4651      	mov	r1, sl
 8004040:	a804      	add	r0, sp, #16
 8004042:	f000 f821 	bl	8004088 <__kernel_rem_pio2>
 8004046:	9b02      	ldr	r3, [sp, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	4683      	mov	fp, r0
 800404c:	f6bf ae4c 	bge.w	8003ce8 <__ieee754_rem_pio2+0x80>
 8004050:	e9da 2100 	ldrd	r2, r1, [sl]
 8004054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004058:	e9ca 2300 	strd	r2, r3, [sl]
 800405c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004064:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004068:	e73f      	b.n	8003eea <__ieee754_rem_pio2+0x282>
 800406a:	bf00      	nop
 800406c:	41700000 	.word	0x41700000
 8004070:	080049d8 	.word	0x080049d8

08004074 <fabs>:
 8004074:	ec51 0b10 	vmov	r0, r1, d0
 8004078:	ee10 2a10 	vmov	r2, s0
 800407c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004080:	ec43 2b10 	vmov	d0, r2, r3
 8004084:	4770      	bx	lr
	...

08004088 <__kernel_rem_pio2>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	ed2d 8b02 	vpush	{d8}
 8004090:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004094:	f112 0f14 	cmn.w	r2, #20
 8004098:	9306      	str	r3, [sp, #24]
 800409a:	9104      	str	r1, [sp, #16]
 800409c:	4bc2      	ldr	r3, [pc, #776]	; (80043a8 <__kernel_rem_pio2+0x320>)
 800409e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80040a0:	9009      	str	r0, [sp, #36]	; 0x24
 80040a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	9b06      	ldr	r3, [sp, #24]
 80040aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80040ae:	bfa8      	it	ge
 80040b0:	1ed4      	subge	r4, r2, #3
 80040b2:	9305      	str	r3, [sp, #20]
 80040b4:	bfb2      	itee	lt
 80040b6:	2400      	movlt	r4, #0
 80040b8:	2318      	movge	r3, #24
 80040ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80040be:	f06f 0317 	mvn.w	r3, #23
 80040c2:	fb04 3303 	mla	r3, r4, r3, r3
 80040c6:	eb03 0a02 	add.w	sl, r3, r2
 80040ca:	9b00      	ldr	r3, [sp, #0]
 80040cc:	9a05      	ldr	r2, [sp, #20]
 80040ce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004398 <__kernel_rem_pio2+0x310>
 80040d2:	eb03 0802 	add.w	r8, r3, r2
 80040d6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80040d8:	1aa7      	subs	r7, r4, r2
 80040da:	ae20      	add	r6, sp, #128	; 0x80
 80040dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80040e0:	2500      	movs	r5, #0
 80040e2:	4545      	cmp	r5, r8
 80040e4:	dd13      	ble.n	800410e <__kernel_rem_pio2+0x86>
 80040e6:	9b06      	ldr	r3, [sp, #24]
 80040e8:	aa20      	add	r2, sp, #128	; 0x80
 80040ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80040ee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80040f2:	f04f 0800 	mov.w	r8, #0
 80040f6:	9b00      	ldr	r3, [sp, #0]
 80040f8:	4598      	cmp	r8, r3
 80040fa:	dc31      	bgt.n	8004160 <__kernel_rem_pio2+0xd8>
 80040fc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004398 <__kernel_rem_pio2+0x310>
 8004100:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004104:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004108:	462f      	mov	r7, r5
 800410a:	2600      	movs	r6, #0
 800410c:	e01b      	b.n	8004146 <__kernel_rem_pio2+0xbe>
 800410e:	42ef      	cmn	r7, r5
 8004110:	d407      	bmi.n	8004122 <__kernel_rem_pio2+0x9a>
 8004112:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004116:	f7fc f9a9 	bl	800046c <__aeabi_i2d>
 800411a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800411e:	3501      	adds	r5, #1
 8004120:	e7df      	b.n	80040e2 <__kernel_rem_pio2+0x5a>
 8004122:	ec51 0b18 	vmov	r0, r1, d8
 8004126:	e7f8      	b.n	800411a <__kernel_rem_pio2+0x92>
 8004128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800412c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004130:	f7fc fa06 	bl	8000540 <__aeabi_dmul>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800413c:	f7fc f84a 	bl	80001d4 <__adddf3>
 8004140:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004144:	3601      	adds	r6, #1
 8004146:	9b05      	ldr	r3, [sp, #20]
 8004148:	429e      	cmp	r6, r3
 800414a:	f1a7 0708 	sub.w	r7, r7, #8
 800414e:	ddeb      	ble.n	8004128 <__kernel_rem_pio2+0xa0>
 8004150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004154:	f108 0801 	add.w	r8, r8, #1
 8004158:	ecab 7b02 	vstmia	fp!, {d7}
 800415c:	3508      	adds	r5, #8
 800415e:	e7ca      	b.n	80040f6 <__kernel_rem_pio2+0x6e>
 8004160:	9b00      	ldr	r3, [sp, #0]
 8004162:	aa0c      	add	r2, sp, #48	; 0x30
 8004164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004168:	930b      	str	r3, [sp, #44]	; 0x2c
 800416a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800416c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004170:	9c00      	ldr	r4, [sp, #0]
 8004172:	930a      	str	r3, [sp, #40]	; 0x28
 8004174:	00e3      	lsls	r3, r4, #3
 8004176:	9308      	str	r3, [sp, #32]
 8004178:	ab98      	add	r3, sp, #608	; 0x260
 800417a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800417e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004182:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004186:	ab70      	add	r3, sp, #448	; 0x1c0
 8004188:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800418c:	46c3      	mov	fp, r8
 800418e:	46a1      	mov	r9, r4
 8004190:	f1b9 0f00 	cmp.w	r9, #0
 8004194:	f1a5 0508 	sub.w	r5, r5, #8
 8004198:	dc77      	bgt.n	800428a <__kernel_rem_pio2+0x202>
 800419a:	ec47 6b10 	vmov	d0, r6, r7
 800419e:	4650      	mov	r0, sl
 80041a0:	f000 fac2 	bl	8004728 <scalbn>
 80041a4:	ec57 6b10 	vmov	r6, r7, d0
 80041a8:	2200      	movs	r2, #0
 80041aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80041ae:	ee10 0a10 	vmov	r0, s0
 80041b2:	4639      	mov	r1, r7
 80041b4:	f7fc f9c4 	bl	8000540 <__aeabi_dmul>
 80041b8:	ec41 0b10 	vmov	d0, r0, r1
 80041bc:	f000 fb34 	bl	8004828 <floor>
 80041c0:	4b7a      	ldr	r3, [pc, #488]	; (80043ac <__kernel_rem_pio2+0x324>)
 80041c2:	ec51 0b10 	vmov	r0, r1, d0
 80041c6:	2200      	movs	r2, #0
 80041c8:	f7fc f9ba 	bl	8000540 <__aeabi_dmul>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fb fffc 	bl	80001d0 <__aeabi_dsub>
 80041d8:	460f      	mov	r7, r1
 80041da:	4606      	mov	r6, r0
 80041dc:	f7fc fc4a 	bl	8000a74 <__aeabi_d2iz>
 80041e0:	9002      	str	r0, [sp, #8]
 80041e2:	f7fc f943 	bl	800046c <__aeabi_i2d>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4630      	mov	r0, r6
 80041ec:	4639      	mov	r1, r7
 80041ee:	f7fb ffef 	bl	80001d0 <__aeabi_dsub>
 80041f2:	f1ba 0f00 	cmp.w	sl, #0
 80041f6:	4606      	mov	r6, r0
 80041f8:	460f      	mov	r7, r1
 80041fa:	dd6d      	ble.n	80042d8 <__kernel_rem_pio2+0x250>
 80041fc:	1e61      	subs	r1, r4, #1
 80041fe:	ab0c      	add	r3, sp, #48	; 0x30
 8004200:	9d02      	ldr	r5, [sp, #8]
 8004202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004206:	f1ca 0018 	rsb	r0, sl, #24
 800420a:	fa43 f200 	asr.w	r2, r3, r0
 800420e:	4415      	add	r5, r2
 8004210:	4082      	lsls	r2, r0
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	aa0c      	add	r2, sp, #48	; 0x30
 8004216:	9502      	str	r5, [sp, #8]
 8004218:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800421c:	f1ca 0217 	rsb	r2, sl, #23
 8004220:	fa43 fb02 	asr.w	fp, r3, r2
 8004224:	f1bb 0f00 	cmp.w	fp, #0
 8004228:	dd65      	ble.n	80042f6 <__kernel_rem_pio2+0x26e>
 800422a:	9b02      	ldr	r3, [sp, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	3301      	adds	r3, #1
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	4615      	mov	r5, r2
 8004234:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004238:	4294      	cmp	r4, r2
 800423a:	f300 809f 	bgt.w	800437c <__kernel_rem_pio2+0x2f4>
 800423e:	f1ba 0f00 	cmp.w	sl, #0
 8004242:	dd07      	ble.n	8004254 <__kernel_rem_pio2+0x1cc>
 8004244:	f1ba 0f01 	cmp.w	sl, #1
 8004248:	f000 80c1 	beq.w	80043ce <__kernel_rem_pio2+0x346>
 800424c:	f1ba 0f02 	cmp.w	sl, #2
 8004250:	f000 80c7 	beq.w	80043e2 <__kernel_rem_pio2+0x35a>
 8004254:	f1bb 0f02 	cmp.w	fp, #2
 8004258:	d14d      	bne.n	80042f6 <__kernel_rem_pio2+0x26e>
 800425a:	4632      	mov	r2, r6
 800425c:	463b      	mov	r3, r7
 800425e:	4954      	ldr	r1, [pc, #336]	; (80043b0 <__kernel_rem_pio2+0x328>)
 8004260:	2000      	movs	r0, #0
 8004262:	f7fb ffb5 	bl	80001d0 <__aeabi_dsub>
 8004266:	4606      	mov	r6, r0
 8004268:	460f      	mov	r7, r1
 800426a:	2d00      	cmp	r5, #0
 800426c:	d043      	beq.n	80042f6 <__kernel_rem_pio2+0x26e>
 800426e:	4650      	mov	r0, sl
 8004270:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80043a0 <__kernel_rem_pio2+0x318>
 8004274:	f000 fa58 	bl	8004728 <scalbn>
 8004278:	4630      	mov	r0, r6
 800427a:	4639      	mov	r1, r7
 800427c:	ec53 2b10 	vmov	r2, r3, d0
 8004280:	f7fb ffa6 	bl	80001d0 <__aeabi_dsub>
 8004284:	4606      	mov	r6, r0
 8004286:	460f      	mov	r7, r1
 8004288:	e035      	b.n	80042f6 <__kernel_rem_pio2+0x26e>
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <__kernel_rem_pio2+0x32c>)
 800428c:	2200      	movs	r2, #0
 800428e:	4630      	mov	r0, r6
 8004290:	4639      	mov	r1, r7
 8004292:	f7fc f955 	bl	8000540 <__aeabi_dmul>
 8004296:	f7fc fbed 	bl	8000a74 <__aeabi_d2iz>
 800429a:	f7fc f8e7 	bl	800046c <__aeabi_i2d>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	ec43 2b18 	vmov	d8, r2, r3
 80042a6:	4b44      	ldr	r3, [pc, #272]	; (80043b8 <__kernel_rem_pio2+0x330>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	f7fc f949 	bl	8000540 <__aeabi_dmul>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	f7fb ff8b 	bl	80001d0 <__aeabi_dsub>
 80042ba:	f7fc fbdb 	bl	8000a74 <__aeabi_d2iz>
 80042be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042c2:	f84b 0b04 	str.w	r0, [fp], #4
 80042c6:	ec51 0b18 	vmov	r0, r1, d8
 80042ca:	f7fb ff83 	bl	80001d4 <__adddf3>
 80042ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80042d2:	4606      	mov	r6, r0
 80042d4:	460f      	mov	r7, r1
 80042d6:	e75b      	b.n	8004190 <__kernel_rem_pio2+0x108>
 80042d8:	d106      	bne.n	80042e8 <__kernel_rem_pio2+0x260>
 80042da:	1e63      	subs	r3, r4, #1
 80042dc:	aa0c      	add	r2, sp, #48	; 0x30
 80042de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80042e6:	e79d      	b.n	8004224 <__kernel_rem_pio2+0x19c>
 80042e8:	4b34      	ldr	r3, [pc, #208]	; (80043bc <__kernel_rem_pio2+0x334>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	f7fc fbae 	bl	8000a4c <__aeabi_dcmpge>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d140      	bne.n	8004376 <__kernel_rem_pio2+0x2ee>
 80042f4:	4683      	mov	fp, r0
 80042f6:	2200      	movs	r2, #0
 80042f8:	2300      	movs	r3, #0
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fc fb87 	bl	8000a10 <__aeabi_dcmpeq>
 8004302:	2800      	cmp	r0, #0
 8004304:	f000 80c1 	beq.w	800448a <__kernel_rem_pio2+0x402>
 8004308:	1e65      	subs	r5, r4, #1
 800430a:	462b      	mov	r3, r5
 800430c:	2200      	movs	r2, #0
 800430e:	9900      	ldr	r1, [sp, #0]
 8004310:	428b      	cmp	r3, r1
 8004312:	da6d      	bge.n	80043f0 <__kernel_rem_pio2+0x368>
 8004314:	2a00      	cmp	r2, #0
 8004316:	f000 808a 	beq.w	800442e <__kernel_rem_pio2+0x3a6>
 800431a:	ab0c      	add	r3, sp, #48	; 0x30
 800431c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004320:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80ae 	beq.w	8004486 <__kernel_rem_pio2+0x3fe>
 800432a:	4650      	mov	r0, sl
 800432c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80043a0 <__kernel_rem_pio2+0x318>
 8004330:	f000 f9fa 	bl	8004728 <scalbn>
 8004334:	1c6b      	adds	r3, r5, #1
 8004336:	00da      	lsls	r2, r3, #3
 8004338:	9205      	str	r2, [sp, #20]
 800433a:	ec57 6b10 	vmov	r6, r7, d0
 800433e:	aa70      	add	r2, sp, #448	; 0x1c0
 8004340:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80043b4 <__kernel_rem_pio2+0x32c>
 8004344:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004348:	462c      	mov	r4, r5
 800434a:	f04f 0800 	mov.w	r8, #0
 800434e:	2c00      	cmp	r4, #0
 8004350:	f280 80d4 	bge.w	80044fc <__kernel_rem_pio2+0x474>
 8004354:	462c      	mov	r4, r5
 8004356:	2c00      	cmp	r4, #0
 8004358:	f2c0 8102 	blt.w	8004560 <__kernel_rem_pio2+0x4d8>
 800435c:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <__kernel_rem_pio2+0x338>)
 800435e:	461e      	mov	r6, r3
 8004360:	ab70      	add	r3, sp, #448	; 0x1c0
 8004362:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004366:	1b2b      	subs	r3, r5, r4
 8004368:	f04f 0900 	mov.w	r9, #0
 800436c:	f04f 0a00 	mov.w	sl, #0
 8004370:	2700      	movs	r7, #0
 8004372:	9306      	str	r3, [sp, #24]
 8004374:	e0e6      	b.n	8004544 <__kernel_rem_pio2+0x4bc>
 8004376:	f04f 0b02 	mov.w	fp, #2
 800437a:	e756      	b.n	800422a <__kernel_rem_pio2+0x1a2>
 800437c:	f8d8 3000 	ldr.w	r3, [r8]
 8004380:	bb05      	cbnz	r5, 80043c4 <__kernel_rem_pio2+0x33c>
 8004382:	b123      	cbz	r3, 800438e <__kernel_rem_pio2+0x306>
 8004384:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004388:	f8c8 3000 	str.w	r3, [r8]
 800438c:	2301      	movs	r3, #1
 800438e:	3201      	adds	r2, #1
 8004390:	f108 0804 	add.w	r8, r8, #4
 8004394:	461d      	mov	r5, r3
 8004396:	e74f      	b.n	8004238 <__kernel_rem_pio2+0x1b0>
	...
 80043a4:	3ff00000 	.word	0x3ff00000
 80043a8:	08004b20 	.word	0x08004b20
 80043ac:	40200000 	.word	0x40200000
 80043b0:	3ff00000 	.word	0x3ff00000
 80043b4:	3e700000 	.word	0x3e700000
 80043b8:	41700000 	.word	0x41700000
 80043bc:	3fe00000 	.word	0x3fe00000
 80043c0:	08004ae0 	.word	0x08004ae0
 80043c4:	1acb      	subs	r3, r1, r3
 80043c6:	f8c8 3000 	str.w	r3, [r8]
 80043ca:	462b      	mov	r3, r5
 80043cc:	e7df      	b.n	800438e <__kernel_rem_pio2+0x306>
 80043ce:	1e62      	subs	r2, r4, #1
 80043d0:	ab0c      	add	r3, sp, #48	; 0x30
 80043d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80043da:	a90c      	add	r1, sp, #48	; 0x30
 80043dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80043e0:	e738      	b.n	8004254 <__kernel_rem_pio2+0x1cc>
 80043e2:	1e62      	subs	r2, r4, #1
 80043e4:	ab0c      	add	r3, sp, #48	; 0x30
 80043e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80043ee:	e7f4      	b.n	80043da <__kernel_rem_pio2+0x352>
 80043f0:	a90c      	add	r1, sp, #48	; 0x30
 80043f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	430a      	orrs	r2, r1
 80043fa:	e788      	b.n	800430e <__kernel_rem_pio2+0x286>
 80043fc:	3301      	adds	r3, #1
 80043fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004402:	2900      	cmp	r1, #0
 8004404:	d0fa      	beq.n	80043fc <__kernel_rem_pio2+0x374>
 8004406:	9a08      	ldr	r2, [sp, #32]
 8004408:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800440c:	446a      	add	r2, sp
 800440e:	3a98      	subs	r2, #152	; 0x98
 8004410:	9208      	str	r2, [sp, #32]
 8004412:	9a06      	ldr	r2, [sp, #24]
 8004414:	a920      	add	r1, sp, #128	; 0x80
 8004416:	18a2      	adds	r2, r4, r2
 8004418:	18e3      	adds	r3, r4, r3
 800441a:	f104 0801 	add.w	r8, r4, #1
 800441e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004422:	9302      	str	r3, [sp, #8]
 8004424:	9b02      	ldr	r3, [sp, #8]
 8004426:	4543      	cmp	r3, r8
 8004428:	da04      	bge.n	8004434 <__kernel_rem_pio2+0x3ac>
 800442a:	461c      	mov	r4, r3
 800442c:	e6a2      	b.n	8004174 <__kernel_rem_pio2+0xec>
 800442e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004430:	2301      	movs	r3, #1
 8004432:	e7e4      	b.n	80043fe <__kernel_rem_pio2+0x376>
 8004434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004436:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800443a:	f7fc f817 	bl	800046c <__aeabi_i2d>
 800443e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004444:	46ab      	mov	fp, r5
 8004446:	461c      	mov	r4, r3
 8004448:	f04f 0900 	mov.w	r9, #0
 800444c:	2600      	movs	r6, #0
 800444e:	2700      	movs	r7, #0
 8004450:	9b05      	ldr	r3, [sp, #20]
 8004452:	4599      	cmp	r9, r3
 8004454:	dd06      	ble.n	8004464 <__kernel_rem_pio2+0x3dc>
 8004456:	9b08      	ldr	r3, [sp, #32]
 8004458:	e8e3 6702 	strd	r6, r7, [r3], #8
 800445c:	f108 0801 	add.w	r8, r8, #1
 8004460:	9308      	str	r3, [sp, #32]
 8004462:	e7df      	b.n	8004424 <__kernel_rem_pio2+0x39c>
 8004464:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004468:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800446c:	f7fc f868 	bl	8000540 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4630      	mov	r0, r6
 8004476:	4639      	mov	r1, r7
 8004478:	f7fb feac 	bl	80001d4 <__adddf3>
 800447c:	f109 0901 	add.w	r9, r9, #1
 8004480:	4606      	mov	r6, r0
 8004482:	460f      	mov	r7, r1
 8004484:	e7e4      	b.n	8004450 <__kernel_rem_pio2+0x3c8>
 8004486:	3d01      	subs	r5, #1
 8004488:	e747      	b.n	800431a <__kernel_rem_pio2+0x292>
 800448a:	ec47 6b10 	vmov	d0, r6, r7
 800448e:	f1ca 0000 	rsb	r0, sl, #0
 8004492:	f000 f949 	bl	8004728 <scalbn>
 8004496:	ec57 6b10 	vmov	r6, r7, d0
 800449a:	4ba0      	ldr	r3, [pc, #640]	; (800471c <__kernel_rem_pio2+0x694>)
 800449c:	ee10 0a10 	vmov	r0, s0
 80044a0:	2200      	movs	r2, #0
 80044a2:	4639      	mov	r1, r7
 80044a4:	f7fc fad2 	bl	8000a4c <__aeabi_dcmpge>
 80044a8:	b1f8      	cbz	r0, 80044ea <__kernel_rem_pio2+0x462>
 80044aa:	4b9d      	ldr	r3, [pc, #628]	; (8004720 <__kernel_rem_pio2+0x698>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	4630      	mov	r0, r6
 80044b0:	4639      	mov	r1, r7
 80044b2:	f7fc f845 	bl	8000540 <__aeabi_dmul>
 80044b6:	f7fc fadd 	bl	8000a74 <__aeabi_d2iz>
 80044ba:	4680      	mov	r8, r0
 80044bc:	f7fb ffd6 	bl	800046c <__aeabi_i2d>
 80044c0:	4b96      	ldr	r3, [pc, #600]	; (800471c <__kernel_rem_pio2+0x694>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	f7fc f83c 	bl	8000540 <__aeabi_dmul>
 80044c8:	460b      	mov	r3, r1
 80044ca:	4602      	mov	r2, r0
 80044cc:	4639      	mov	r1, r7
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7fb fe7e 	bl	80001d0 <__aeabi_dsub>
 80044d4:	f7fc face 	bl	8000a74 <__aeabi_d2iz>
 80044d8:	1c65      	adds	r5, r4, #1
 80044da:	ab0c      	add	r3, sp, #48	; 0x30
 80044dc:	f10a 0a18 	add.w	sl, sl, #24
 80044e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80044e8:	e71f      	b.n	800432a <__kernel_rem_pio2+0x2a2>
 80044ea:	4630      	mov	r0, r6
 80044ec:	4639      	mov	r1, r7
 80044ee:	f7fc fac1 	bl	8000a74 <__aeabi_d2iz>
 80044f2:	ab0c      	add	r3, sp, #48	; 0x30
 80044f4:	4625      	mov	r5, r4
 80044f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044fa:	e716      	b.n	800432a <__kernel_rem_pio2+0x2a2>
 80044fc:	ab0c      	add	r3, sp, #48	; 0x30
 80044fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004502:	f7fb ffb3 	bl	800046c <__aeabi_i2d>
 8004506:	4632      	mov	r2, r6
 8004508:	463b      	mov	r3, r7
 800450a:	f7fc f819 	bl	8000540 <__aeabi_dmul>
 800450e:	4642      	mov	r2, r8
 8004510:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004514:	464b      	mov	r3, r9
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	f7fc f811 	bl	8000540 <__aeabi_dmul>
 800451e:	3c01      	subs	r4, #1
 8004520:	4606      	mov	r6, r0
 8004522:	460f      	mov	r7, r1
 8004524:	e713      	b.n	800434e <__kernel_rem_pio2+0x2c6>
 8004526:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800452a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800452e:	f7fc f807 	bl	8000540 <__aeabi_dmul>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4648      	mov	r0, r9
 8004538:	4651      	mov	r1, sl
 800453a:	f7fb fe4b 	bl	80001d4 <__adddf3>
 800453e:	3701      	adds	r7, #1
 8004540:	4681      	mov	r9, r0
 8004542:	468a      	mov	sl, r1
 8004544:	9b00      	ldr	r3, [sp, #0]
 8004546:	429f      	cmp	r7, r3
 8004548:	dc02      	bgt.n	8004550 <__kernel_rem_pio2+0x4c8>
 800454a:	9b06      	ldr	r3, [sp, #24]
 800454c:	429f      	cmp	r7, r3
 800454e:	ddea      	ble.n	8004526 <__kernel_rem_pio2+0x49e>
 8004550:	9a06      	ldr	r2, [sp, #24]
 8004552:	ab48      	add	r3, sp, #288	; 0x120
 8004554:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004558:	e9c6 9a00 	strd	r9, sl, [r6]
 800455c:	3c01      	subs	r4, #1
 800455e:	e6fa      	b.n	8004356 <__kernel_rem_pio2+0x2ce>
 8004560:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004562:	2b02      	cmp	r3, #2
 8004564:	dc0b      	bgt.n	800457e <__kernel_rem_pio2+0x4f6>
 8004566:	2b00      	cmp	r3, #0
 8004568:	dc39      	bgt.n	80045de <__kernel_rem_pio2+0x556>
 800456a:	d05d      	beq.n	8004628 <__kernel_rem_pio2+0x5a0>
 800456c:	9b02      	ldr	r3, [sp, #8]
 800456e:	f003 0007 	and.w	r0, r3, #7
 8004572:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004576:	ecbd 8b02 	vpop	{d8}
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004580:	2b03      	cmp	r3, #3
 8004582:	d1f3      	bne.n	800456c <__kernel_rem_pio2+0x4e4>
 8004584:	9b05      	ldr	r3, [sp, #20]
 8004586:	9500      	str	r5, [sp, #0]
 8004588:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800458c:	eb0d 0403 	add.w	r4, sp, r3
 8004590:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004594:	46a2      	mov	sl, r4
 8004596:	9b00      	ldr	r3, [sp, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f1aa 0a08 	sub.w	sl, sl, #8
 800459e:	dc69      	bgt.n	8004674 <__kernel_rem_pio2+0x5ec>
 80045a0:	46aa      	mov	sl, r5
 80045a2:	f1ba 0f01 	cmp.w	sl, #1
 80045a6:	f1a4 0408 	sub.w	r4, r4, #8
 80045aa:	f300 8083 	bgt.w	80046b4 <__kernel_rem_pio2+0x62c>
 80045ae:	9c05      	ldr	r4, [sp, #20]
 80045b0:	ab48      	add	r3, sp, #288	; 0x120
 80045b2:	441c      	add	r4, r3
 80045b4:	2000      	movs	r0, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	2d01      	cmp	r5, #1
 80045ba:	f300 809a 	bgt.w	80046f2 <__kernel_rem_pio2+0x66a>
 80045be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80045c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80045c6:	f1bb 0f00 	cmp.w	fp, #0
 80045ca:	f040 8098 	bne.w	80046fe <__kernel_rem_pio2+0x676>
 80045ce:	9b04      	ldr	r3, [sp, #16]
 80045d0:	e9c3 7800 	strd	r7, r8, [r3]
 80045d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80045d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80045dc:	e7c6      	b.n	800456c <__kernel_rem_pio2+0x4e4>
 80045de:	9e05      	ldr	r6, [sp, #20]
 80045e0:	ab48      	add	r3, sp, #288	; 0x120
 80045e2:	441e      	add	r6, r3
 80045e4:	462c      	mov	r4, r5
 80045e6:	2000      	movs	r0, #0
 80045e8:	2100      	movs	r1, #0
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	da33      	bge.n	8004656 <__kernel_rem_pio2+0x5ce>
 80045ee:	f1bb 0f00 	cmp.w	fp, #0
 80045f2:	d036      	beq.n	8004662 <__kernel_rem_pio2+0x5da>
 80045f4:	4602      	mov	r2, r0
 80045f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045fa:	9c04      	ldr	r4, [sp, #16]
 80045fc:	e9c4 2300 	strd	r2, r3, [r4]
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004608:	f7fb fde2 	bl	80001d0 <__aeabi_dsub>
 800460c:	ae4a      	add	r6, sp, #296	; 0x128
 800460e:	2401      	movs	r4, #1
 8004610:	42a5      	cmp	r5, r4
 8004612:	da29      	bge.n	8004668 <__kernel_rem_pio2+0x5e0>
 8004614:	f1bb 0f00 	cmp.w	fp, #0
 8004618:	d002      	beq.n	8004620 <__kernel_rem_pio2+0x598>
 800461a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800461e:	4619      	mov	r1, r3
 8004620:	9b04      	ldr	r3, [sp, #16]
 8004622:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004626:	e7a1      	b.n	800456c <__kernel_rem_pio2+0x4e4>
 8004628:	9c05      	ldr	r4, [sp, #20]
 800462a:	ab48      	add	r3, sp, #288	; 0x120
 800462c:	441c      	add	r4, r3
 800462e:	2000      	movs	r0, #0
 8004630:	2100      	movs	r1, #0
 8004632:	2d00      	cmp	r5, #0
 8004634:	da09      	bge.n	800464a <__kernel_rem_pio2+0x5c2>
 8004636:	f1bb 0f00 	cmp.w	fp, #0
 800463a:	d002      	beq.n	8004642 <__kernel_rem_pio2+0x5ba>
 800463c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004640:	4619      	mov	r1, r3
 8004642:	9b04      	ldr	r3, [sp, #16]
 8004644:	e9c3 0100 	strd	r0, r1, [r3]
 8004648:	e790      	b.n	800456c <__kernel_rem_pio2+0x4e4>
 800464a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800464e:	f7fb fdc1 	bl	80001d4 <__adddf3>
 8004652:	3d01      	subs	r5, #1
 8004654:	e7ed      	b.n	8004632 <__kernel_rem_pio2+0x5aa>
 8004656:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800465a:	f7fb fdbb 	bl	80001d4 <__adddf3>
 800465e:	3c01      	subs	r4, #1
 8004660:	e7c3      	b.n	80045ea <__kernel_rem_pio2+0x562>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	e7c8      	b.n	80045fa <__kernel_rem_pio2+0x572>
 8004668:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800466c:	f7fb fdb2 	bl	80001d4 <__adddf3>
 8004670:	3401      	adds	r4, #1
 8004672:	e7cd      	b.n	8004610 <__kernel_rem_pio2+0x588>
 8004674:	e9da 8900 	ldrd	r8, r9, [sl]
 8004678:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800467c:	9b00      	ldr	r3, [sp, #0]
 800467e:	3b01      	subs	r3, #1
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4632      	mov	r2, r6
 8004684:	463b      	mov	r3, r7
 8004686:	4640      	mov	r0, r8
 8004688:	4649      	mov	r1, r9
 800468a:	f7fb fda3 	bl	80001d4 <__adddf3>
 800468e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4640      	mov	r0, r8
 8004698:	4649      	mov	r1, r9
 800469a:	f7fb fd99 	bl	80001d0 <__aeabi_dsub>
 800469e:	4632      	mov	r2, r6
 80046a0:	463b      	mov	r3, r7
 80046a2:	f7fb fd97 	bl	80001d4 <__adddf3>
 80046a6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80046aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80046ae:	ed8a 7b00 	vstr	d7, [sl]
 80046b2:	e770      	b.n	8004596 <__kernel_rem_pio2+0x50e>
 80046b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80046b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80046bc:	4640      	mov	r0, r8
 80046be:	4632      	mov	r2, r6
 80046c0:	463b      	mov	r3, r7
 80046c2:	4649      	mov	r1, r9
 80046c4:	f7fb fd86 	bl	80001d4 <__adddf3>
 80046c8:	e9cd 0100 	strd	r0, r1, [sp]
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	4640      	mov	r0, r8
 80046d2:	4649      	mov	r1, r9
 80046d4:	f7fb fd7c 	bl	80001d0 <__aeabi_dsub>
 80046d8:	4632      	mov	r2, r6
 80046da:	463b      	mov	r3, r7
 80046dc:	f7fb fd7a 	bl	80001d4 <__adddf3>
 80046e0:	ed9d 7b00 	vldr	d7, [sp]
 80046e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80046e8:	ed84 7b00 	vstr	d7, [r4]
 80046ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046f0:	e757      	b.n	80045a2 <__kernel_rem_pio2+0x51a>
 80046f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046f6:	f7fb fd6d 	bl	80001d4 <__adddf3>
 80046fa:	3d01      	subs	r5, #1
 80046fc:	e75c      	b.n	80045b8 <__kernel_rem_pio2+0x530>
 80046fe:	9b04      	ldr	r3, [sp, #16]
 8004700:	9a04      	ldr	r2, [sp, #16]
 8004702:	601f      	str	r7, [r3, #0]
 8004704:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004708:	605c      	str	r4, [r3, #4]
 800470a:	609d      	str	r5, [r3, #8]
 800470c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004710:	60d3      	str	r3, [r2, #12]
 8004712:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004716:	6110      	str	r0, [r2, #16]
 8004718:	6153      	str	r3, [r2, #20]
 800471a:	e727      	b.n	800456c <__kernel_rem_pio2+0x4e4>
 800471c:	41700000 	.word	0x41700000
 8004720:	3e700000 	.word	0x3e700000
 8004724:	00000000 	.word	0x00000000

08004728 <scalbn>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	ec55 4b10 	vmov	r4, r5, d0
 800472e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004732:	4606      	mov	r6, r0
 8004734:	462b      	mov	r3, r5
 8004736:	b999      	cbnz	r1, 8004760 <scalbn+0x38>
 8004738:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800473c:	4323      	orrs	r3, r4
 800473e:	d03f      	beq.n	80047c0 <scalbn+0x98>
 8004740:	4b35      	ldr	r3, [pc, #212]	; (8004818 <scalbn+0xf0>)
 8004742:	4629      	mov	r1, r5
 8004744:	ee10 0a10 	vmov	r0, s0
 8004748:	2200      	movs	r2, #0
 800474a:	f7fb fef9 	bl	8000540 <__aeabi_dmul>
 800474e:	4b33      	ldr	r3, [pc, #204]	; (800481c <scalbn+0xf4>)
 8004750:	429e      	cmp	r6, r3
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
 8004756:	da10      	bge.n	800477a <scalbn+0x52>
 8004758:	a327      	add	r3, pc, #156	; (adr r3, 80047f8 <scalbn+0xd0>)
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	e01f      	b.n	80047a0 <scalbn+0x78>
 8004760:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004764:	4291      	cmp	r1, r2
 8004766:	d10c      	bne.n	8004782 <scalbn+0x5a>
 8004768:	ee10 2a10 	vmov	r2, s0
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fd30 	bl	80001d4 <__adddf3>
 8004774:	4604      	mov	r4, r0
 8004776:	460d      	mov	r5, r1
 8004778:	e022      	b.n	80047c0 <scalbn+0x98>
 800477a:	460b      	mov	r3, r1
 800477c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004780:	3936      	subs	r1, #54	; 0x36
 8004782:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004786:	4296      	cmp	r6, r2
 8004788:	dd0d      	ble.n	80047a6 <scalbn+0x7e>
 800478a:	2d00      	cmp	r5, #0
 800478c:	a11c      	add	r1, pc, #112	; (adr r1, 8004800 <scalbn+0xd8>)
 800478e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004792:	da02      	bge.n	800479a <scalbn+0x72>
 8004794:	a11c      	add	r1, pc, #112	; (adr r1, 8004808 <scalbn+0xe0>)
 8004796:	e9d1 0100 	ldrd	r0, r1, [r1]
 800479a:	a319      	add	r3, pc, #100	; (adr r3, 8004800 <scalbn+0xd8>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fb fece 	bl	8000540 <__aeabi_dmul>
 80047a4:	e7e6      	b.n	8004774 <scalbn+0x4c>
 80047a6:	1872      	adds	r2, r6, r1
 80047a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80047ac:	428a      	cmp	r2, r1
 80047ae:	dcec      	bgt.n	800478a <scalbn+0x62>
 80047b0:	2a00      	cmp	r2, #0
 80047b2:	dd08      	ble.n	80047c6 <scalbn+0x9e>
 80047b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80047c0:	ec45 4b10 	vmov	d0, r4, r5
 80047c4:	bd70      	pop	{r4, r5, r6, pc}
 80047c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80047ca:	da08      	bge.n	80047de <scalbn+0xb6>
 80047cc:	2d00      	cmp	r5, #0
 80047ce:	a10a      	add	r1, pc, #40	; (adr r1, 80047f8 <scalbn+0xd0>)
 80047d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047d4:	dac0      	bge.n	8004758 <scalbn+0x30>
 80047d6:	a10e      	add	r1, pc, #56	; (adr r1, 8004810 <scalbn+0xe8>)
 80047d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047dc:	e7bc      	b.n	8004758 <scalbn+0x30>
 80047de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047e2:	3236      	adds	r2, #54	; 0x36
 80047e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80047ec:	4620      	mov	r0, r4
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <scalbn+0xf8>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	e7d5      	b.n	80047a0 <scalbn+0x78>
 80047f4:	f3af 8000 	nop.w
 80047f8:	c2f8f359 	.word	0xc2f8f359
 80047fc:	01a56e1f 	.word	0x01a56e1f
 8004800:	8800759c 	.word	0x8800759c
 8004804:	7e37e43c 	.word	0x7e37e43c
 8004808:	8800759c 	.word	0x8800759c
 800480c:	fe37e43c 	.word	0xfe37e43c
 8004810:	c2f8f359 	.word	0xc2f8f359
 8004814:	81a56e1f 	.word	0x81a56e1f
 8004818:	43500000 	.word	0x43500000
 800481c:	ffff3cb0 	.word	0xffff3cb0
 8004820:	3c900000 	.word	0x3c900000
 8004824:	00000000 	.word	0x00000000

08004828 <floor>:
 8004828:	ec51 0b10 	vmov	r0, r1, d0
 800482c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004834:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004838:	2e13      	cmp	r6, #19
 800483a:	ee10 5a10 	vmov	r5, s0
 800483e:	ee10 8a10 	vmov	r8, s0
 8004842:	460c      	mov	r4, r1
 8004844:	dc31      	bgt.n	80048aa <floor+0x82>
 8004846:	2e00      	cmp	r6, #0
 8004848:	da14      	bge.n	8004874 <floor+0x4c>
 800484a:	a333      	add	r3, pc, #204	; (adr r3, 8004918 <floor+0xf0>)
 800484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004850:	f7fb fcc0 	bl	80001d4 <__adddf3>
 8004854:	2200      	movs	r2, #0
 8004856:	2300      	movs	r3, #0
 8004858:	f7fc f902 	bl	8000a60 <__aeabi_dcmpgt>
 800485c:	b138      	cbz	r0, 800486e <floor+0x46>
 800485e:	2c00      	cmp	r4, #0
 8004860:	da53      	bge.n	800490a <floor+0xe2>
 8004862:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004866:	4325      	orrs	r5, r4
 8004868:	d052      	beq.n	8004910 <floor+0xe8>
 800486a:	4c2d      	ldr	r4, [pc, #180]	; (8004920 <floor+0xf8>)
 800486c:	2500      	movs	r5, #0
 800486e:	4621      	mov	r1, r4
 8004870:	4628      	mov	r0, r5
 8004872:	e024      	b.n	80048be <floor+0x96>
 8004874:	4f2b      	ldr	r7, [pc, #172]	; (8004924 <floor+0xfc>)
 8004876:	4137      	asrs	r7, r6
 8004878:	ea01 0307 	and.w	r3, r1, r7
 800487c:	4303      	orrs	r3, r0
 800487e:	d01e      	beq.n	80048be <floor+0x96>
 8004880:	a325      	add	r3, pc, #148	; (adr r3, 8004918 <floor+0xf0>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb fca5 	bl	80001d4 <__adddf3>
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	f7fc f8e7 	bl	8000a60 <__aeabi_dcmpgt>
 8004892:	2800      	cmp	r0, #0
 8004894:	d0eb      	beq.n	800486e <floor+0x46>
 8004896:	2c00      	cmp	r4, #0
 8004898:	bfbe      	ittt	lt
 800489a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800489e:	4133      	asrlt	r3, r6
 80048a0:	18e4      	addlt	r4, r4, r3
 80048a2:	ea24 0407 	bic.w	r4, r4, r7
 80048a6:	2500      	movs	r5, #0
 80048a8:	e7e1      	b.n	800486e <floor+0x46>
 80048aa:	2e33      	cmp	r6, #51	; 0x33
 80048ac:	dd0b      	ble.n	80048c6 <floor+0x9e>
 80048ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80048b2:	d104      	bne.n	80048be <floor+0x96>
 80048b4:	ee10 2a10 	vmov	r2, s0
 80048b8:	460b      	mov	r3, r1
 80048ba:	f7fb fc8b 	bl	80001d4 <__adddf3>
 80048be:	ec41 0b10 	vmov	d0, r0, r1
 80048c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80048ca:	f04f 37ff 	mov.w	r7, #4294967295
 80048ce:	40df      	lsrs	r7, r3
 80048d0:	4238      	tst	r0, r7
 80048d2:	d0f4      	beq.n	80048be <floor+0x96>
 80048d4:	a310      	add	r3, pc, #64	; (adr r3, 8004918 <floor+0xf0>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f7fb fc7b 	bl	80001d4 <__adddf3>
 80048de:	2200      	movs	r2, #0
 80048e0:	2300      	movs	r3, #0
 80048e2:	f7fc f8bd 	bl	8000a60 <__aeabi_dcmpgt>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d0c1      	beq.n	800486e <floor+0x46>
 80048ea:	2c00      	cmp	r4, #0
 80048ec:	da0a      	bge.n	8004904 <floor+0xdc>
 80048ee:	2e14      	cmp	r6, #20
 80048f0:	d101      	bne.n	80048f6 <floor+0xce>
 80048f2:	3401      	adds	r4, #1
 80048f4:	e006      	b.n	8004904 <floor+0xdc>
 80048f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80048fa:	2301      	movs	r3, #1
 80048fc:	40b3      	lsls	r3, r6
 80048fe:	441d      	add	r5, r3
 8004900:	45a8      	cmp	r8, r5
 8004902:	d8f6      	bhi.n	80048f2 <floor+0xca>
 8004904:	ea25 0507 	bic.w	r5, r5, r7
 8004908:	e7b1      	b.n	800486e <floor+0x46>
 800490a:	2500      	movs	r5, #0
 800490c:	462c      	mov	r4, r5
 800490e:	e7ae      	b.n	800486e <floor+0x46>
 8004910:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004914:	e7ab      	b.n	800486e <floor+0x46>
 8004916:	bf00      	nop
 8004918:	8800759c 	.word	0x8800759c
 800491c:	7e37e43c 	.word	0x7e37e43c
 8004920:	bff00000 	.word	0xbff00000
 8004924:	000fffff 	.word	0x000fffff

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
