
DTMF_Generate_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002be0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d68  08002d68  00012d68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  20000000  08002d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
  8 .bss          00000578  20000060  20000060  00020060  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200005d8  200005d8  00020060  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014144  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003111  00000000  00000000  00034217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000076a3  00000000  00000000  00037328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0003e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf1  00000000  00000000  0003f670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022de6  00000000  00000000  00040361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000187f5  00000000  00000000  00063147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2118  00000000  00000000  0007b93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029fc  00000000  00000000  0014da54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00150450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d50 	.word	0x08002d50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08002d50 	.word	0x08002d50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_InitTick+0x3c>)
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <HAL_InitTick+0x40>)
{
 80004d4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d6:	6810      	ldr	r0, [r2, #0]
 80004d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004dc:	f000 fadc 	bl	8000a98 <HAL_SYSTICK_Config>
 80004e0:	4604      	mov	r4, r0
 80004e2:	b958      	cbnz	r0, 80004fc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e4:	2d0f      	cmp	r5, #15
 80004e6:	d809      	bhi.n	80004fc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e8:	4602      	mov	r2, r0
 80004ea:	4629      	mov	r1, r5
 80004ec:	f04f 30ff 	mov.w	r0, #4294967295
 80004f0:	f000 fa92 	bl	8000a18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <HAL_InitTick+0x44>)
 80004f6:	4620      	mov	r0, r4
 80004f8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004fc:	2001      	movs	r0, #1
 80004fe:	e7fc      	b.n	80004fa <HAL_InitTick+0x36>
 8000500:	20000000 	.word	0x20000000
 8000504:	2000000c 	.word	0x2000000c
 8000508:	20000004 	.word	0x20000004

0800050c <HAL_Init>:
{
 800050c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x30>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000516:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800051e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000526:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 fa63 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f7ff ffc8 	bl	80004c4 <HAL_InitTick>
  HAL_MspInit();
 8000534:	f002 f9a2 	bl	800287c <HAL_MspInit>
}
 8000538:	2000      	movs	r0, #0
 800053a:	bd08      	pop	{r3, pc}
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <HAL_IncTick+0x10>)
 8000542:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_IncTick+0x14>)
 8000544:	6811      	ldr	r1, [r2, #0]
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	440b      	add	r3, r1
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000007c 	.word	0x2000007c
 8000554:	20000000 	.word	0x20000000

08000558 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000558:	4b01      	ldr	r3, [pc, #4]	; (8000560 <HAL_GetTick+0x8>)
 800055a:	6818      	ldr	r0, [r3, #0]
}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000007c 	.word	0x2000007c

08000564 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000564:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000566:	4604      	mov	r4, r0
 8000568:	2800      	cmp	r0, #0
 800056a:	f000 809b 	beq.w	80006a4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800056e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000570:	b925      	cbnz	r5, 800057c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000572:	f002 f99f 	bl	80028b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000576:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000578:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800057c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800057e:	06db      	lsls	r3, r3, #27
 8000580:	f100 808e 	bmi.w	80006a0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800058a:	f023 0302 	bic.w	r3, r3, #2
 800058e:	f043 0302 	orr.w	r3, r3, #2
 8000592:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000594:	4b44      	ldr	r3, [pc, #272]	; (80006a8 <HAL_ADC_Init+0x144>)
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800059c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	6861      	ldr	r1, [r4, #4]
 80005a2:	430a      	orrs	r2, r1
 80005a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005a6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005a8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005ba:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005bc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005be:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005c4:	685a      	ldr	r2, [r3, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ca:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005cc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005da:	4934      	ldr	r1, [pc, #208]	; (80006ac <HAL_ADC_Init+0x148>)
 80005dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005de:	428a      	cmp	r2, r1
 80005e0:	d052      	beq.n	8000688 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005e2:	6899      	ldr	r1, [r3, #8]
 80005e4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80005e8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005ea:	6899      	ldr	r1, [r3, #8]
 80005ec:	430a      	orrs	r2, r1
 80005ee:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005f0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80005f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80005f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80005fa:	689a      	ldr	r2, [r3, #8]
 80005fc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005fe:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	f022 0202 	bic.w	r2, r2, #2
 8000606:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	7e21      	ldrb	r1, [r4, #24]
 800060c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000610:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000612:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000616:	2a00      	cmp	r2, #0
 8000618:	d03e      	beq.n	8000698 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800061a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800061c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800061e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000622:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800062a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	3901      	subs	r1, #1
 8000630:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000634:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000638:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800063a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000642:	3901      	subs	r1, #1
 8000644:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8000658:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800065c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800065e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000660:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000668:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800066a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800066c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000670:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000672:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000676:	f023 0303 	bic.w	r3, r3, #3
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000680:	2300      	movs	r3, #0
 8000682:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000686:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800068e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000696:	e7b2      	b.n	80005fe <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800069e:	e7c9      	b.n	8000634 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006a0:	2001      	movs	r0, #1
 80006a2:	e7ed      	b.n	8000680 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006a4:	2001      	movs	r0, #1
 80006a6:	e7ee      	b.n	8000686 <HAL_ADC_Init+0x122>
 80006a8:	40012300 	.word	0x40012300
 80006ac:	0f000001 	.word	0x0f000001

080006b0 <HAL_ADC_Start_IT>:
{
 80006b0:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006b2:	2300      	movs	r3, #0
 80006b4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d066      	beq.n	800078c <HAL_ADC_Start_IT+0xdc>
 80006be:	2301      	movs	r3, #1
 80006c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	689a      	ldr	r2, [r3, #8]
 80006c8:	07d2      	lsls	r2, r2, #31
 80006ca:	d505      	bpl.n	80006d8 <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	07d1      	lsls	r1, r2, #31
 80006d0:	d414      	bmi.n	80006fc <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 80006d2:	2000      	movs	r0, #0
}
 80006d4:	b002      	add	sp, #8
 80006d6:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006d8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006da:	492d      	ldr	r1, [pc, #180]	; (8000790 <HAL_ADC_Start_IT+0xe0>)
    __HAL_ADC_ENABLE(hadc);
 80006dc:	f042 0201 	orr.w	r2, r2, #1
 80006e0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_Start_IT+0xe4>)
 80006e4:	6812      	ldr	r2, [r2, #0]
 80006e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80006ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80006ee:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80006f0:	9a01      	ldr	r2, [sp, #4]
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d0ea      	beq.n	80006cc <HAL_ADC_Start_IT+0x1c>
      counter--;
 80006f6:	9a01      	ldr	r2, [sp, #4]
 80006f8:	3a01      	subs	r2, #1
 80006fa:	e7f8      	b.n	80006ee <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80006fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80006fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000702:	f022 0201 	bic.w	r2, r2, #1
 8000706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800070a:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000710:	bf41      	itttt	mi
 8000712:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000714:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000718:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800071c:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800071e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000720:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000724:	bf1c      	itt	ne
 8000726:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000728:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800072c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 800072e:	2200      	movs	r2, #0
 8000730:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000734:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000738:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000740:	f042 0220 	orr.w	r2, r2, #32
 8000744:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_ADC_Start_IT+0xe8>)
 8000748:	6851      	ldr	r1, [r2, #4]
 800074a:	f011 0f1f 	tst.w	r1, #31
 800074e:	4913      	ldr	r1, [pc, #76]	; (800079c <HAL_ADC_Start_IT+0xec>)
 8000750:	d119      	bne.n	8000786 <HAL_ADC_Start_IT+0xd6>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000752:	428b      	cmp	r3, r1
 8000754:	d007      	beq.n	8000766 <HAL_ADC_Start_IT+0xb6>
 8000756:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800075a:	428b      	cmp	r3, r1
 800075c:	d10c      	bne.n	8000778 <HAL_ADC_Start_IT+0xc8>
 800075e:	6852      	ldr	r2, [r2, #4]
 8000760:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000764:	d1b5      	bne.n	80006d2 <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000766:	6898      	ldr	r0, [r3, #8]
 8000768:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800076c:	d1b1      	bne.n	80006d2 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	e7ad      	b.n	80006d4 <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000778:	4909      	ldr	r1, [pc, #36]	; (80007a0 <HAL_ADC_Start_IT+0xf0>)
 800077a:	428b      	cmp	r3, r1
 800077c:	d1a9      	bne.n	80006d2 <HAL_ADC_Start_IT+0x22>
 800077e:	6852      	ldr	r2, [r2, #4]
 8000780:	f012 0f10 	tst.w	r2, #16
 8000784:	e7ee      	b.n	8000764 <HAL_ADC_Start_IT+0xb4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000786:	428b      	cmp	r3, r1
 8000788:	d1a3      	bne.n	80006d2 <HAL_ADC_Start_IT+0x22>
 800078a:	e7ec      	b.n	8000766 <HAL_ADC_Start_IT+0xb6>
  __HAL_LOCK(hadc);
 800078c:	2002      	movs	r0, #2
 800078e:	e7a1      	b.n	80006d4 <HAL_ADC_Start_IT+0x24>
 8000790:	000f4240 	.word	0x000f4240
 8000794:	2000000c 	.word	0x2000000c
 8000798:	40012300 	.word	0x40012300
 800079c:	40012000 	.word	0x40012000
 80007a0:	40012200 	.word	0x40012200

080007a4 <HAL_ADC_LevelOutOfWindowCallback>:
 80007a4:	4770      	bx	lr

080007a6 <HAL_ADC_ErrorCallback>:
 80007a6:	4770      	bx	lr

080007a8 <HAL_ADC_IRQHandler>:
{
 80007a8:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80007aa:	6803      	ldr	r3, [r0, #0]
 80007ac:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80007ae:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80007b0:	078d      	lsls	r5, r1, #30
{
 80007b2:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80007b4:	d52b      	bpl.n	800080e <HAL_ADC_IRQHandler+0x66>
 80007b6:	0690      	lsls	r0, r2, #26
 80007b8:	d529      	bpl.n	800080e <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007bc:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007be:	bf5e      	ittt	pl
 80007c0:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80007c2:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80007c6:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007ce:	d117      	bne.n	8000800 <HAL_ADC_IRQHandler+0x58>
 80007d0:	7e22      	ldrb	r2, [r4, #24]
 80007d2:	b9aa      	cbnz	r2, 8000800 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007d6:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80007da:	d002      	beq.n	80007e2 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007dc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007de:	0552      	lsls	r2, r2, #21
 80007e0:	d40e      	bmi.n	8000800 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	f022 0220 	bic.w	r2, r2, #32
 80007e8:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007f0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007f4:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007f6:	bf5e      	ittt	pl
 80007f8:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80007fa:	f043 0301 	orrpl.w	r3, r3, #1
 80007fe:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000800:	4620      	mov	r0, r4
 8000802:	f001 fe15 	bl	8002430 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	f06f 0212 	mvn.w	r2, #18
 800080c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000812:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000814:	074d      	lsls	r5, r1, #29
 8000816:	d532      	bpl.n	800087e <HAL_ADC_IRQHandler+0xd6>
 8000818:	0610      	lsls	r0, r2, #24
 800081a:	d530      	bpl.n	800087e <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800081c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800081e:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000820:	bf5e      	ittt	pl
 8000822:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000824:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000828:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000830:	d11e      	bne.n	8000870 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000834:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000838:	d002      	beq.n	8000840 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800083a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800083c:	0552      	lsls	r2, r2, #21
 800083e:	d417      	bmi.n	8000870 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000840:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000842:	0555      	lsls	r5, r2, #21
 8000844:	d414      	bmi.n	8000870 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000846:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000848:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800084c:	d110      	bne.n	8000870 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800084e:	7e22      	ldrb	r2, [r4, #24]
 8000850:	b972      	cbnz	r2, 8000870 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000858:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800085a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800085c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000860:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000862:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000864:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000866:	bf5e      	ittt	pl
 8000868:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 800086a:	f043 0301 	orrpl.w	r3, r3, #1
 800086e:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000870:	4620      	mov	r0, r4
 8000872:	f000 f8bd 	bl	80009f0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	f06f 020c 	mvn.w	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800087e:	6823      	ldr	r3, [r4, #0]
 8000880:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000882:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000884:	07c9      	lsls	r1, r1, #31
 8000886:	d50f      	bpl.n	80008a8 <HAL_ADC_IRQHandler+0x100>
 8000888:	0655      	lsls	r5, r2, #25
 800088a:	d50d      	bpl.n	80008a8 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	07d8      	lsls	r0, r3, #31
 8000890:	d50a      	bpl.n	80008a8 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000898:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800089a:	4620      	mov	r0, r4
 800089c:	f7ff ff82 	bl	80007a4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	f06f 0201 	mvn.w	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80008ac:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80008ae:	0689      	lsls	r1, r1, #26
 80008b0:	d50d      	bpl.n	80008ce <HAL_ADC_IRQHandler+0x126>
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	d50b      	bpl.n	80008ce <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008b8:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008bc:	f042 0202 	orr.w	r2, r2, #2
 80008c0:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80008c2:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008c4:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80008c6:	f7ff ff6e 	bl	80007a6 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	601d      	str	r5, [r3, #0]
}
 80008ce:	bd38      	pop	{r3, r4, r5, pc}

080008d0 <HAL_ADC_ConfigChannel>:
{
 80008d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008d2:	2300      	movs	r3, #0
 80008d4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d064      	beq.n	80009a8 <HAL_ADC_ConfigChannel+0xd8>
 80008de:	2301      	movs	r3, #1
 80008e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008e4:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008e6:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008e8:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008ea:	2d09      	cmp	r5, #9
 80008ec:	b2ac      	uxth	r4, r5
 80008ee:	d931      	bls.n	8000954 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008f0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80008f4:	68df      	ldr	r7, [r3, #12]
 80008f6:	3a1e      	subs	r2, #30
 80008f8:	f04f 0c07 	mov.w	ip, #7
 80008fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000900:	ea27 070c 	bic.w	r7, r7, ip
 8000904:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000906:	68df      	ldr	r7, [r3, #12]
 8000908:	fa06 f202 	lsl.w	r2, r6, r2
 800090c:	433a      	orrs	r2, r7
 800090e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8000910:	6849      	ldr	r1, [r1, #4]
 8000912:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000914:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8000918:	d82b      	bhi.n	8000972 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800091a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800091c:	3a05      	subs	r2, #5
 800091e:	261f      	movs	r6, #31
 8000920:	4096      	lsls	r6, r2
 8000922:	ea21 0106 	bic.w	r1, r1, r6
 8000926:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800092a:	fa04 f202 	lsl.w	r2, r4, r2
 800092e:	430a      	orrs	r2, r1
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000932:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <HAL_ADC_ConfigChannel+0x110>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d107      	bne.n	8000948 <HAL_ADC_ConfigChannel+0x78>
 8000938:	2d12      	cmp	r5, #18
 800093a:	d137      	bne.n	80009ac <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800093c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8000940:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000944:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8000948:	2300      	movs	r3, #0
 800094a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800094e:	4618      	mov	r0, r3
}
 8000950:	b003      	add	sp, #12
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800095a:	2707      	movs	r7, #7
 800095c:	fa07 f70c 	lsl.w	r7, r7, ip
 8000960:	ea22 0207 	bic.w	r2, r2, r7
 8000964:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	fa06 f60c 	lsl.w	r6, r6, ip
 800096c:	4316      	orrs	r6, r2
 800096e:	611e      	str	r6, [r3, #16]
 8000970:	e7ce      	b.n	8000910 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8000972:	290c      	cmp	r1, #12
 8000974:	f04f 011f 	mov.w	r1, #31
 8000978:	d80b      	bhi.n	8000992 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800097a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800097c:	3a23      	subs	r2, #35	; 0x23
 800097e:	4091      	lsls	r1, r2
 8000980:	ea26 0101 	bic.w	r1, r6, r1
 8000984:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000988:	fa04 f202 	lsl.w	r2, r4, r2
 800098c:	430a      	orrs	r2, r1
 800098e:	631a      	str	r2, [r3, #48]	; 0x30
 8000990:	e7cf      	b.n	8000932 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000992:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8000994:	3a41      	subs	r2, #65	; 0x41
 8000996:	4091      	lsls	r1, r2
 8000998:	ea26 0101 	bic.w	r1, r6, r1
 800099c:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800099e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009a0:	4094      	lsls	r4, r2
 80009a2:	430c      	orrs	r4, r1
 80009a4:	62dc      	str	r4, [r3, #44]	; 0x2c
 80009a6:	e7c4      	b.n	8000932 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80009a8:	2002      	movs	r0, #2
 80009aa:	e7d1      	b.n	8000950 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009ac:	f1a5 0310 	sub.w	r3, r5, #16
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d8c9      	bhi.n	8000948 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_ADC_ConfigChannel+0x114>)
 80009b6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009b8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009be:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009c0:	d1c2      	bne.n	8000948 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_ADC_ConfigChannel+0x118>)
 80009c4:	4a09      	ldr	r2, [pc, #36]	; (80009ec <HAL_ADC_ConfigChannel+0x11c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80009cc:	220a      	movs	r2, #10
 80009ce:	4353      	muls	r3, r2
        counter--;
 80009d0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009d2:	9b01      	ldr	r3, [sp, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0b7      	beq.n	8000948 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 80009d8:	9b01      	ldr	r3, [sp, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	e7f8      	b.n	80009d0 <HAL_ADC_ConfigChannel+0x100>
 80009de:	bf00      	nop
 80009e0:	40012000 	.word	0x40012000
 80009e4:	40012300 	.word	0x40012300
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	000f4240 	.word	0x000f4240

080009f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80009f0:	4770      	bx	lr
	...

080009f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009f6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a04:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000a10:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1a:	b530      	push	{r4, r5, lr}
 8000a1c:	68dc      	ldr	r4, [r3, #12]
 8000a1e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a22:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	bf28      	it	cs
 8000a2c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a34:	bf8c      	ite	hi
 8000a36:	3c03      	subhi	r4, #3
 8000a38:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3a:	fa05 f303 	lsl.w	r3, r5, r3
 8000a3e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a42:	40a5      	lsls	r5, r4
 8000a44:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	bfac      	ite	ge
 8000a52:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	4a08      	ldrlt	r2, [pc, #32]	; (8000a78 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	bfb8      	it	lt
 8000a5e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	bfaa      	itet	ge
 8000a66:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a70:	bd30      	pop	{r4, r5, pc}
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00
 8000a78:	e000ed14 	.word	0xe000ed14

08000a7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	db07      	blt.n	8000a90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a80:	0941      	lsrs	r1, r0, #5
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_NVIC_EnableIRQ+0x18>)
 8000a84:	f000 001f 	and.w	r0, r0, #31
 8000a88:	2301      	movs	r3, #1
 8000a8a:	4083      	lsls	r3, r0
 8000a8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	3801      	subs	r0, #1
 8000a9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a9e:	d20b      	bcs.n	8000ab8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	21f0      	movs	r1, #240	; 0xf0
 8000aaa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aae:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ab8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac4:	4a6d      	ldr	r2, [pc, #436]	; (8000c7c <HAL_GPIO_Init+0x1bc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000c84 <HAL_GPIO_Init+0x1c4>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aca:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000c88 <HAL_GPIO_Init+0x1c8>
{
 8000ace:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad0:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad2:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 8000ad4:	2701      	movs	r7, #1
 8000ad6:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad8:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000adc:	ea37 0404 	bics.w	r4, r7, r4
 8000ae0:	f040 80b7 	bne.w	8000c52 <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae4:	684c      	ldr	r4, [r1, #4]
 8000ae6:	f024 0a10 	bic.w	sl, r4, #16
 8000aea:	f1ba 0f02 	cmp.w	sl, #2
 8000aee:	d116      	bne.n	8000b1e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3U];
 8000af0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000af4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000af8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000afc:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b04:	f04f 0c0f 	mov.w	ip, #15
 8000b08:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b0c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b10:	690e      	ldr	r6, [r1, #16]
 8000b12:	fa06 f60b 	lsl.w	r6, r6, fp
 8000b16:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b1a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000b1e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b22:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000b26:	f04f 0c03 	mov.w	ip, #3
 8000b2a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000b2e:	ea6f 060c 	mvn.w	r6, ip
 8000b32:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b36:	f004 0c03 	and.w	ip, r4, #3
 8000b3a:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b42:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b46:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b4a:	9601      	str	r6, [sp, #4]
      GPIOx->MODER = temp;
 8000b4c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b50:	d813      	bhi.n	8000b7a <HAL_GPIO_Init+0xba>
        temp = GPIOx->OSPEEDR; 
 8000b52:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b56:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b5a:	68ce      	ldr	r6, [r1, #12]
 8000b5c:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000b60:	ea4a 0a0c 	orr.w	sl, sl, ip
        GPIOx->OSPEEDR = temp;
 8000b64:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b68:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6c:	ea2c 0c07 	bic.w	ip, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b70:	0927      	lsrs	r7, r4, #4
 8000b72:	409f      	lsls	r7, r3
 8000b74:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000b78:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b7a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7c:	9e01      	ldr	r6, [sp, #4]
 8000b7e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b80:	688e      	ldr	r6, [r1, #8]
 8000b82:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b86:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000b88:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8a:	00e6      	lsls	r6, r4, #3
 8000b8c:	d561      	bpl.n	8000c52 <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	f04f 0b00 	mov.w	fp, #0
 8000b92:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b96:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b9a:	4e39      	ldr	r6, [pc, #228]	; (8000c80 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ba0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ba4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ba8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000bac:	9703      	str	r7, [sp, #12]
 8000bae:	9f03      	ldr	r7, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bb0:	f023 0703 	bic.w	r7, r3, #3
 8000bb4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bb8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bbc:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bc4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000bc8:	f04f 0c0f 	mov.w	ip, #15
 8000bcc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd0:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bd2:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bd6:	d043      	beq.n	8000c60 <HAL_GPIO_Init+0x1a0>
 8000bd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	d041      	beq.n	8000c64 <HAL_GPIO_Init+0x1a4>
 8000be0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000be4:	42b0      	cmp	r0, r6
 8000be6:	d03f      	beq.n	8000c68 <HAL_GPIO_Init+0x1a8>
 8000be8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bec:	42b0      	cmp	r0, r6
 8000bee:	d03d      	beq.n	8000c6c <HAL_GPIO_Init+0x1ac>
 8000bf0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bf4:	42b0      	cmp	r0, r6
 8000bf6:	d03b      	beq.n	8000c70 <HAL_GPIO_Init+0x1b0>
 8000bf8:	4548      	cmp	r0, r9
 8000bfa:	d03b      	beq.n	8000c74 <HAL_GPIO_Init+0x1b4>
 8000bfc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000c00:	42b0      	cmp	r0, r6
 8000c02:	d039      	beq.n	8000c78 <HAL_GPIO_Init+0x1b8>
 8000c04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c08:	42b0      	cmp	r0, r6
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2607      	moveq	r6, #7
 8000c0e:	2608      	movne	r6, #8
 8000c10:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c14:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c18:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000c1a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c1c:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c22:	bf0c      	ite	eq
 8000c24:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c26:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000c28:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000c2a:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c30:	bf0c      	ite	eq
 8000c32:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c34:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000c36:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c38:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c3e:	bf0c      	ite	eq
 8000c40:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c42:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000c44:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000c46:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c48:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c4a:	bf54      	ite	pl
 8000c4c:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c4e:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c50:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	3301      	adds	r3, #1
 8000c54:	2b10      	cmp	r3, #16
 8000c56:	f47f af3c 	bne.w	8000ad2 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000c5a:	b005      	add	sp, #20
 8000c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c60:	465e      	mov	r6, fp
 8000c62:	e7d5      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c64:	2601      	movs	r6, #1
 8000c66:	e7d3      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c68:	2602      	movs	r6, #2
 8000c6a:	e7d1      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c6c:	2603      	movs	r6, #3
 8000c6e:	e7cf      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c70:	2604      	movs	r6, #4
 8000c72:	e7cd      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c74:	2605      	movs	r6, #5
 8000c76:	e7cb      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c78:	2606      	movs	r6, #6
 8000c7a:	e7c9      	b.n	8000c10 <HAL_GPIO_Init+0x150>
 8000c7c:	40013c00 	.word	0x40013c00
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40021400 	.word	0x40021400

08000c8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c8c:	b10a      	cbz	r2, 8000c92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c8e:	6181      	str	r1, [r0, #24]
  }
}
 8000c90:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c92:	0409      	lsls	r1, r1, #16
 8000c94:	e7fb      	b.n	8000c8e <HAL_GPIO_WritePin+0x2>

08000c96 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c96:	6801      	ldr	r1, [r0, #0]
 8000c98:	694b      	ldr	r3, [r1, #20]
 8000c9a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	d010      	beq.n	8000cc6 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ca4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000ca8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000caa:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000cac:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000cae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cb2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cb6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4770      	bx	lr
  }
  return HAL_OK;
 8000cc6:	4618      	mov	r0, r3
}
 8000cc8:	4770      	bx	lr

08000cca <I2C_WaitOnFlagUntilTimeout>:
{
 8000cca:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000cd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8000cda:	6833      	ldr	r3, [r6, #0]
 8000cdc:	f1ba 0f01 	cmp.w	sl, #1
 8000ce0:	bf0c      	ite	eq
 8000ce2:	695c      	ldreq	r4, [r3, #20]
 8000ce4:	699c      	ldrne	r4, [r3, #24]
 8000ce6:	ea27 0404 	bic.w	r4, r7, r4
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fab4 f484 	clz	r4, r4
 8000cf0:	0964      	lsrs	r4, r4, #5
 8000cf2:	45a1      	cmp	r9, r4
 8000cf4:	d001      	beq.n	8000cfa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e017      	b.n	8000d2a <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8000cfa:	1c6a      	adds	r2, r5, #1
 8000cfc:	d0ee      	beq.n	8000cdc <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000cfe:	f7ff fc2b 	bl	8000558 <HAL_GetTick>
 8000d02:	9b08      	ldr	r3, [sp, #32]
 8000d04:	1ac0      	subs	r0, r0, r3
 8000d06:	42a8      	cmp	r0, r5
 8000d08:	d801      	bhi.n	8000d0e <I2C_WaitOnFlagUntilTimeout+0x44>
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d1e5      	bne.n	8000cda <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d0e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d10:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000d12:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000d14:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000d18:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d1c:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d1e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000d22:	f042 0220 	orr.w	r2, r2, #32
 8000d26:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8000d28:	2001      	movs	r0, #1
}
 8000d2a:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08000d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	4616      	mov	r6, r2
 8000d38:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000d3a:	6825      	ldr	r5, [r4, #0]
 8000d3c:	6968      	ldr	r0, [r5, #20]
 8000d3e:	ea27 0000 	bic.w	r0, r7, r0
 8000d42:	b280      	uxth	r0, r0
 8000d44:	b1b8      	cbz	r0, 8000d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d46:	696b      	ldr	r3, [r5, #20]
 8000d48:	055a      	lsls	r2, r3, #21
 8000d4a:	d516      	bpl.n	8000d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d4c:	682b      	ldr	r3, [r5, #0]
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d54:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000d58:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d5a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000d68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d6a:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d6e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
}
 8000d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d7a:	1c73      	adds	r3, r6, #1
 8000d7c:	d0de      	beq.n	8000d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d7e:	f7ff fbeb 	bl	8000558 <HAL_GetTick>
 8000d82:	eba0 0008 	sub.w	r0, r0, r8
 8000d86:	42b0      	cmp	r0, r6
 8000d88:	d801      	bhi.n	8000d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d1d5      	bne.n	8000d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d8e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d90:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d92:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d94:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d9e:	f042 0220 	orr.w	r2, r2, #32
 8000da2:	e7e4      	b.n	8000d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08000da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	4604      	mov	r4, r0
 8000da8:	460d      	mov	r5, r1
 8000daa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000dac:	6821      	ldr	r1, [r4, #0]
 8000dae:	694b      	ldr	r3, [r1, #20]
 8000db0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000db4:	d001      	beq.n	8000dba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000db6:	2000      	movs	r0, #0
 8000db8:	e010      	b.n	8000ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000dba:	694a      	ldr	r2, [r1, #20]
 8000dbc:	06d2      	lsls	r2, r2, #27
 8000dbe:	d50e      	bpl.n	8000dde <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000dc0:	f06f 0210 	mvn.w	r2, #16
 8000dc4:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dc6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dc8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000dd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dd4:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000dd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000dda:	2001      	movs	r0, #1
}
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dde:	f7ff fbbb 	bl	8000558 <HAL_GetTick>
 8000de2:	1b80      	subs	r0, r0, r6
 8000de4:	42a8      	cmp	r0, r5
 8000de6:	d801      	bhi.n	8000dec <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d1df      	bne.n	8000dac <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000dec:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000dee:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000df0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000df2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000df6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000dfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	e7e8      	b.n	8000dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000e02 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000e02:	b570      	push	{r4, r5, r6, lr}
 8000e04:	4604      	mov	r4, r0
 8000e06:	460d      	mov	r5, r1
 8000e08:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	075b      	lsls	r3, r3, #29
 8000e10:	d501      	bpl.n	8000e16 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e12:	2000      	movs	r0, #0
}
 8000e14:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff ff3d 	bl	8000c96 <I2C_IsAcknowledgeFailed>
 8000e1c:	b9a8      	cbnz	r0, 8000e4a <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000e1e:	1c6a      	adds	r2, r5, #1
 8000e20:	d0f3      	beq.n	8000e0a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e22:	f7ff fb99 	bl	8000558 <HAL_GetTick>
 8000e26:	1b80      	subs	r0, r0, r6
 8000e28:	42a8      	cmp	r0, r5
 8000e2a:	d801      	bhi.n	8000e30 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d1ec      	bne.n	8000e0a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e30:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e32:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e34:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000e40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e44:	f042 0220 	orr.w	r2, r2, #32
 8000e48:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	e7e2      	b.n	8000e14 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08000e4e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000e4e:	b570      	push	{r4, r5, r6, lr}
 8000e50:	4604      	mov	r4, r0
 8000e52:	460d      	mov	r5, r1
 8000e54:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	061b      	lsls	r3, r3, #24
 8000e5c:	d501      	bpl.n	8000e62 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e5e:	2000      	movs	r0, #0
}
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff ff17 	bl	8000c96 <I2C_IsAcknowledgeFailed>
 8000e68:	b9a8      	cbnz	r0, 8000e96 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000e6a:	1c6a      	adds	r2, r5, #1
 8000e6c:	d0f3      	beq.n	8000e56 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e6e:	f7ff fb73 	bl	8000558 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	42a8      	cmp	r0, r5
 8000e76:	d801      	bhi.n	8000e7c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d1ec      	bne.n	8000e56 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e7c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e7e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000e80:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000e82:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000e8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e90:	f042 0220 	orr.w	r2, r2, #32
 8000e94:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
 8000e98:	e7e2      	b.n	8000e60 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08000e9c <HAL_I2C_Init>:
{
 8000e9c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	b908      	cbnz	r0, 8000ea6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000ea2:	2001      	movs	r0, #1
}
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000eaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eae:	b91b      	cbnz	r3, 8000eb8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000eb0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000eb4:	f001 fd38 	bl	8002928 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000eb8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eba:	2324      	movs	r3, #36	; 0x24
 8000ebc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000ec0:	6813      	ldr	r3, [r2, #0]
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ec8:	f000 ff90 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <HAL_I2C_Init+0x130>)
 8000ece:	6865      	ldr	r5, [r4, #4]
 8000ed0:	429d      	cmp	r5, r3
 8000ed2:	bf94      	ite	ls
 8000ed4:	4b3e      	ldrls	r3, [pc, #248]	; (8000fd0 <HAL_I2C_Init+0x134>)
 8000ed6:	4b3f      	ldrhi	r3, [pc, #252]	; (8000fd4 <HAL_I2C_Init+0x138>)
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	bf8c      	ite	hi
 8000edc:	2300      	movhi	r3, #0
 8000ede:	2301      	movls	r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1de      	bne.n	8000ea2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ee4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ee6:	4e39      	ldr	r6, [pc, #228]	; (8000fcc <HAL_I2C_Init+0x130>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ee8:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_I2C_Init+0x13c>)
 8000eec:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ef0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000ef4:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ef6:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ef8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000efa:	bf88      	it	hi
 8000efc:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8000f00:	6a11      	ldr	r1, [r2, #32]
 8000f02:	bf88      	it	hi
 8000f04:	4373      	mulhi	r3, r6
 8000f06:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000f0a:	bf84      	itt	hi
 8000f0c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8000f10:	fbb3 f3f6 	udivhi	r3, r3, r6
 8000f14:	3301      	adds	r3, #1
 8000f16:	430b      	orrs	r3, r1
 8000f18:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f1a:	69d1      	ldr	r1, [r2, #28]
 8000f1c:	1e43      	subs	r3, r0, #1
 8000f1e:	482b      	ldr	r0, [pc, #172]	; (8000fcc <HAL_I2C_Init+0x130>)
 8000f20:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000f24:	4285      	cmp	r5, r0
 8000f26:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f2a:	d832      	bhi.n	8000f92 <HAL_I2C_Init+0xf6>
 8000f2c:	006d      	lsls	r5, r5, #1
 8000f2e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8000f32:	fbb3 f3f5 	udiv	r3, r3, r5
 8000f36:	3301      	adds	r3, #1
 8000f38:	4203      	tst	r3, r0
 8000f3a:	d042      	beq.n	8000fc2 <HAL_I2C_Init+0x126>
 8000f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f40:	4319      	orrs	r1, r3
 8000f42:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f44:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000f48:	6811      	ldr	r1, [r2, #0]
 8000f4a:	4303      	orrs	r3, r0
 8000f4c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f54:	6891      	ldr	r1, [r2, #8]
 8000f56:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000f5a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000f5e:	4303      	orrs	r3, r0
 8000f60:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f68:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000f6c:	68d1      	ldr	r1, [r2, #12]
 8000f6e:	4303      	orrs	r3, r0
 8000f70:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f74:	430b      	orrs	r3, r1
 8000f76:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000f78:	6813      	ldr	r3, [r2, #0]
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f80:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000f82:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f84:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f8a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f8c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000f90:	e788      	b.n	8000ea4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f92:	68a0      	ldr	r0, [r4, #8]
 8000f94:	b950      	cbnz	r0, 8000fac <HAL_I2C_Init+0x110>
 8000f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f9a:	fbb3 f3f5 	udiv	r3, r3, r5
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	b17b      	cbz	r3, 8000fc6 <HAL_I2C_Init+0x12a>
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	e7c9      	b.n	8000f40 <HAL_I2C_Init+0xa4>
 8000fac:	2019      	movs	r0, #25
 8000fae:	4368      	muls	r0, r5
 8000fb0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fba:	b123      	cbz	r3, 8000fc6 <HAL_I2C_Init+0x12a>
 8000fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc0:	e7be      	b.n	8000f40 <HAL_I2C_Init+0xa4>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e7bc      	b.n	8000f40 <HAL_I2C_Init+0xa4>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e7ba      	b.n	8000f40 <HAL_I2C_Init+0xa4>
 8000fca:	bf00      	nop
 8000fcc:	000186a0 	.word	0x000186a0
 8000fd0:	001e847f 	.word	0x001e847f
 8000fd4:	003d08ff 	.word	0x003d08ff
 8000fd8:	000f4240 	.word	0x000f4240

08000fdc <HAL_I2C_Master_Transmit>:
{
 8000fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	4698      	mov	r8, r3
 8000fe6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8000fe8:	460d      	mov	r5, r1
 8000fea:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff fab4 	bl	8000558 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ff0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000ff4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000ff6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ff8:	d004      	beq.n	8001004 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8000ffa:	2502      	movs	r5, #2
}
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	b005      	add	sp, #20
 8001000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001004:	9000      	str	r0, [sp, #0]
 8001006:	495a      	ldr	r1, [pc, #360]	; (8001170 <HAL_I2C_Master_Transmit+0x194>)
 8001008:	2319      	movs	r3, #25
 800100a:	2201      	movs	r2, #1
 800100c:	4620      	mov	r0, r4
 800100e:	f7ff fe5c 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 8001012:	2800      	cmp	r0, #0
 8001014:	d1f1      	bne.n	8000ffa <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001016:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800101a:	2b01      	cmp	r3, #1
 800101c:	d0ed      	beq.n	8000ffa <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800101e:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8001020:	2301      	movs	r3, #1
 8001022:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001026:	680b      	ldr	r3, [r1, #0]
 8001028:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800102a:	bf5e      	ittt	pl
 800102c:	680b      	ldrpl	r3, [r1, #0]
 800102e:	f043 0301 	orrpl.w	r3, r3, #1
 8001032:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001034:	680b      	ldr	r3, [r1, #0]
 8001036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800103a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800103c:	2321      	movs	r3, #33	; 0x21
 800103e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001042:	2310      	movs	r3, #16
 8001044:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800104c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001050:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001052:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001054:	4b47      	ldr	r3, [pc, #284]	; (8001174 <HAL_I2C_Master_Transmit+0x198>)
 8001056:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 800105a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800105e:	2b08      	cmp	r3, #8
 8001060:	d004      	beq.n	800106c <HAL_I2C_Master_Transmit+0x90>
 8001062:	2b01      	cmp	r3, #1
 8001064:	d002      	beq.n	800106c <HAL_I2C_Master_Transmit+0x90>
 8001066:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800106a:	d104      	bne.n	8001076 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800106c:	680b      	ldr	r3, [r1, #0]
 800106e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001072:	600b      	str	r3, [r1, #0]
 8001074:	e002      	b.n	800107c <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001076:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001078:	2b12      	cmp	r3, #18
 800107a:	d0f7      	beq.n	800106c <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800107c:	9600      	str	r6, [sp, #0]
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001086:	4620      	mov	r0, r4
 8001088:	f7ff fe1f 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 800108c:	b108      	cbz	r0, 8001092 <HAL_I2C_Master_Transmit+0xb6>
        return HAL_ERROR;
 800108e:	2501      	movs	r5, #1
 8001090:	e7b4      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001092:	6923      	ldr	r3, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001094:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800109a:	d121      	bne.n	80010e0 <HAL_I2C_Master_Transmit+0x104>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800109c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80010a0:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010a2:	4935      	ldr	r1, [pc, #212]	; (8001178 <HAL_I2C_Master_Transmit+0x19c>)
 80010a4:	4633      	mov	r3, r6
 80010a6:	463a      	mov	r2, r7
 80010a8:	4620      	mov	r0, r4
 80010aa:	f7ff fe40 	bl	8000d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010ae:	4605      	mov	r5, r0
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d1ec      	bne.n	800108e <HAL_I2C_Master_Transmit+0xb2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	9003      	str	r0, [sp, #12]
 80010b8:	695a      	ldr	r2, [r3, #20]
 80010ba:	9203      	str	r2, [sp, #12]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	9303      	str	r3, [sp, #12]
 80010c0:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80010c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010c4:	b9f3      	cbnz	r3, 8001104 <HAL_I2C_Master_Transmit+0x128>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c6:	6821      	ldr	r1, [r4, #0]
 80010c8:	680a      	ldr	r2, [r1, #0]
 80010ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ce:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80010d0:	2220      	movs	r2, #32
 80010d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80010d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80010de:	e78d      	b.n	8000ffc <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010e0:	11eb      	asrs	r3, r5, #7
 80010e2:	f003 0306 	and.w	r3, r3, #6
 80010e6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80010ea:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80010ec:	4923      	ldr	r1, [pc, #140]	; (800117c <HAL_I2C_Master_Transmit+0x1a0>)
 80010ee:	4633      	mov	r3, r6
 80010f0:	463a      	mov	r2, r7
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff fe1b 	bl	8000d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010f8:	2800      	cmp	r0, #0
 80010fa:	d1c8      	bne.n	800108e <HAL_I2C_Master_Transmit+0xb2>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	b2ed      	uxtb	r5, r5
 8001100:	611d      	str	r5, [r3, #16]
 8001102:	e7ce      	b.n	80010a2 <HAL_I2C_Master_Transmit+0xc6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001104:	4632      	mov	r2, r6
 8001106:	4639      	mov	r1, r7
 8001108:	4620      	mov	r0, r4
 800110a:	f7ff fea0 	bl	8000e4e <I2C_WaitOnTXEFlagUntilTimeout>
 800110e:	b140      	cbz	r0, 8001122 <HAL_I2C_Master_Transmit+0x146>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001112:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001114:	bf01      	itttt	eq
 8001116:	6822      	ldreq	r2, [r4, #0]
 8001118:	6813      	ldreq	r3, [r2, #0]
 800111a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800111e:	6013      	streq	r3, [r2, #0]
 8001120:	e7b5      	b.n	800108e <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001124:	6820      	ldr	r0, [r4, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	f812 1b01 	ldrb.w	r1, [r2], #1
 800112c:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800112e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001130:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001132:	3a01      	subs	r2, #1
 8001134:	b292      	uxth	r2, r2
 8001136:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001138:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800113a:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 800113e:	1e51      	subs	r1, r2, #1
 8001140:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001142:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8001146:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001148:	d00a      	beq.n	8001160 <HAL_I2C_Master_Transmit+0x184>
 800114a:	b149      	cbz	r1, 8001160 <HAL_I2C_Master_Transmit+0x184>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800114c:	7859      	ldrb	r1, [r3, #1]
 800114e:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001150:	3302      	adds	r3, #2
 8001152:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001154:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001156:	3b01      	subs	r3, #1
 8001158:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800115a:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800115c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800115e:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001160:	4632      	mov	r2, r6
 8001162:	4639      	mov	r1, r7
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff fe4c 	bl	8000e02 <I2C_WaitOnBTFFlagUntilTimeout>
 800116a:	2800      	cmp	r0, #0
 800116c:	d0a9      	beq.n	80010c2 <HAL_I2C_Master_Transmit+0xe6>
 800116e:	e7cf      	b.n	8001110 <HAL_I2C_Master_Transmit+0x134>
 8001170:	00100002 	.word	0x00100002
 8001174:	ffff0000 	.word	0xffff0000
 8001178:	00010002 	.word	0x00010002
 800117c:	00010008 	.word	0x00010008

08001180 <HAL_I2C_Master_Receive>:
{
 8001180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001184:	4604      	mov	r4, r0
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	4698      	mov	r8, r3
 800118a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800118c:	460e      	mov	r6, r1
 800118e:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff f9e2 	bl	8000558 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001194:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001198:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800119a:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800119c:	d004      	beq.n	80011a8 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800119e:	2602      	movs	r6, #2
}
 80011a0:	4630      	mov	r0, r6
 80011a2:	b009      	add	sp, #36	; 0x24
 80011a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011a8:	9000      	str	r0, [sp, #0]
 80011aa:	4997      	ldr	r1, [pc, #604]	; (8001408 <HAL_I2C_Master_Receive+0x288>)
 80011ac:	2319      	movs	r3, #25
 80011ae:	2201      	movs	r2, #1
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fd8a 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d1f1      	bne.n	800119e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80011ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d0ed      	beq.n	800119e <HAL_I2C_Master_Receive+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011c2:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80011c4:	2301      	movs	r3, #1
 80011c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011ca:	680b      	ldr	r3, [r1, #0]
 80011cc:	07d8      	lsls	r0, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80011ce:	bf5e      	ittt	pl
 80011d0:	680b      	ldrpl	r3, [r1, #0]
 80011d2:	f043 0301 	orrpl.w	r3, r3, #1
 80011d6:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011de:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80011e0:	2322      	movs	r3, #34	; 0x22
 80011e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011e6:	2310      	movs	r3, #16
 80011e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80011f0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011f6:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <HAL_I2C_Master_Receive+0x28c>)
 80011fa:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011fe:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 8001200:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001204:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001208:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800120a:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800120c:	d004      	beq.n	8001218 <HAL_I2C_Master_Receive+0x98>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d002      	beq.n	8001218 <HAL_I2C_Master_Receive+0x98>
 8001212:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001216:	d104      	bne.n	8001222 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001218:	680b      	ldr	r3, [r1, #0]
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e002      	b.n	8001228 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001222:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001224:	2b11      	cmp	r3, #17
 8001226:	d0f7      	beq.n	8001218 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001228:	9500      	str	r5, [sp, #0]
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff fd49 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 8001238:	b108      	cbz	r0, 800123e <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 800123a:	2601      	movs	r6, #1
 800123c:	e7b0      	b.n	80011a0 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800123e:	6922      	ldr	r2, [r4, #16]
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001240:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001242:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001246:	d127      	bne.n	8001298 <HAL_I2C_Master_Receive+0x118>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001248:	f046 0601 	orr.w	r6, r6, #1
 800124c:	b2f6      	uxtb	r6, r6
 800124e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001250:	496f      	ldr	r1, [pc, #444]	; (8001410 <HAL_I2C_Master_Receive+0x290>)
 8001252:	462b      	mov	r3, r5
 8001254:	463a      	mov	r2, r7
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fd69 	bl	8000d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800125c:	4606      	mov	r6, r0
 800125e:	2800      	cmp	r0, #0
 8001260:	d1eb      	bne.n	800123a <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001262:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001264:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 8001266:	2b00      	cmp	r3, #0
 8001268:	d14a      	bne.n	8001300 <HAL_I2C_Master_Receive+0x180>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800126a:	9003      	str	r0, [sp, #12]
 800126c:	694b      	ldr	r3, [r1, #20]
 800126e:	9303      	str	r3, [sp, #12]
 8001270:	698b      	ldr	r3, [r1, #24]
 8001272:	9303      	str	r3, [sp, #12]
 8001274:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001276:	680b      	ldr	r3, [r1, #0]
 8001278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127c:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800127e:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8001418 <HAL_I2C_Master_Receive+0x298>
    while (hi2c->XferSize > 0U)
 8001282:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	d163      	bne.n	8001350 <HAL_I2C_Master_Receive+0x1d0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001288:	2220      	movs	r2, #32
 800128a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800128e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001292:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001296:	e783      	b.n	80011a0 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001298:	ea4f 18e6 	mov.w	r8, r6, asr #7
 800129c:	f008 0806 	and.w	r8, r8, #6
 80012a0:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80012a4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80012a6:	495b      	ldr	r1, [pc, #364]	; (8001414 <HAL_I2C_Master_Receive+0x294>)
 80012a8:	462b      	mov	r3, r5
 80012aa:	463a      	mov	r2, r7
 80012ac:	4620      	mov	r0, r4
 80012ae:	f7ff fd3e 	bl	8000d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012b2:	2800      	cmp	r0, #0
 80012b4:	d1c1      	bne.n	800123a <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012b6:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012b8:	4955      	ldr	r1, [pc, #340]	; (8001410 <HAL_I2C_Master_Receive+0x290>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012ba:	b2f6      	uxtb	r6, r6
 80012bc:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012be:	463a      	mov	r2, r7
 80012c0:	462b      	mov	r3, r5
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff fd33 	bl	8000d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012c8:	4602      	mov	r2, r0
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1b5      	bne.n	800123a <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	9007      	str	r0, [sp, #28]
 80012d2:	6959      	ldr	r1, [r3, #20]
 80012d4:	9107      	str	r1, [sp, #28]
 80012d6:	6999      	ldr	r1, [r3, #24]
 80012d8:	9107      	str	r1, [sp, #28]
 80012da:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012dc:	6819      	ldr	r1, [r3, #0]
 80012de:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80012e2:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012e4:	4620      	mov	r0, r4
 80012e6:	9500      	str	r5, [sp, #0]
 80012e8:	463b      	mov	r3, r7
 80012ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012ee:	f7ff fcec 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d1a1      	bne.n	800123a <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80012f6:	6822      	ldr	r2, [r4, #0]
 80012f8:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80012fc:	6113      	str	r3, [r2, #16]
 80012fe:	e7a7      	b.n	8001250 <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10a      	bne.n	800131a <HAL_I2C_Master_Receive+0x19a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001304:	680b      	ldr	r3, [r1, #0]
 8001306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800130a:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800130c:	9004      	str	r0, [sp, #16]
 800130e:	694b      	ldr	r3, [r1, #20]
 8001310:	9304      	str	r3, [sp, #16]
 8001312:	698b      	ldr	r3, [r1, #24]
 8001314:	9304      	str	r3, [sp, #16]
 8001316:	9b04      	ldr	r3, [sp, #16]
 8001318:	e7ad      	b.n	8001276 <HAL_I2C_Master_Receive+0xf6>
    else if (hi2c->XferSize == 2U)
 800131a:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800131c:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 800131e:	d10d      	bne.n	800133c <HAL_I2C_Master_Receive+0x1bc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001320:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001324:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001326:	680b      	ldr	r3, [r1, #0]
 8001328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800132c:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800132e:	9005      	str	r0, [sp, #20]
 8001330:	694b      	ldr	r3, [r1, #20]
 8001332:	9305      	str	r3, [sp, #20]
 8001334:	698b      	ldr	r3, [r1, #24]
 8001336:	9305      	str	r3, [sp, #20]
 8001338:	9b05      	ldr	r3, [sp, #20]
 800133a:	e7a0      	b.n	800127e <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800133c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001340:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001342:	9006      	str	r0, [sp, #24]
 8001344:	694b      	ldr	r3, [r1, #20]
 8001346:	9306      	str	r3, [sp, #24]
 8001348:	698b      	ldr	r3, [r1, #24]
 800134a:	9306      	str	r3, [sp, #24]
 800134c:	9b06      	ldr	r3, [sp, #24]
 800134e:	e796      	b.n	800127e <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 8001350:	2b03      	cmp	r3, #3
 8001352:	d863      	bhi.n	800141c <HAL_I2C_Master_Receive+0x29c>
        if (hi2c->XferSize == 1U)
 8001354:	2b01      	cmp	r3, #1
 8001356:	d116      	bne.n	8001386 <HAL_I2C_Master_Receive+0x206>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	462a      	mov	r2, r5
 800135a:	4639      	mov	r1, r7
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fd21 	bl	8000da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001362:	2800      	cmp	r0, #0
 8001364:	f47f af69 	bne.w	800123a <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800136e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001372:	3301      	adds	r3, #1
 8001374:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001376:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001378:	3b01      	subs	r3, #1
 800137a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800137c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800137e:	3b01      	subs	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001384:	e77d      	b.n	8001282 <HAL_I2C_Master_Receive+0x102>
        else if (hi2c->XferSize == 2U)
 8001386:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001388:	9500      	str	r5, [sp, #0]
 800138a:	463b      	mov	r3, r7
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4641      	mov	r1, r8
 8001392:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001394:	d11a      	bne.n	80013cc <HAL_I2C_Master_Receive+0x24c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001396:	f7ff fc98 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 800139a:	2800      	cmp	r0, #0
 800139c:	f47f af4d 	bne.w	800123a <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ae:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80013b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013b2:	1c53      	adds	r3, r2, #1
 80013b4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80013b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013b8:	3b01      	subs	r3, #1
 80013ba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80013bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013c4:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	7053      	strb	r3, [r2, #1]
 80013ca:	e7d1      	b.n	8001370 <HAL_I2C_Master_Receive+0x1f0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013cc:	f7ff fc7d 	bl	8000cca <I2C_WaitOnFlagUntilTimeout>
 80013d0:	4602      	mov	r2, r0
 80013d2:	2800      	cmp	r0, #0
 80013d4:	f47f af31 	bne.w	800123a <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80013e0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013e2:	6919      	ldr	r1, [r3, #16]
 80013e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013e6:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80013e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ea:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 80013ec:	3301      	adds	r3, #1
 80013ee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80013f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013f2:	3b01      	subs	r3, #1
 80013f4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80013f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013fe:	4641      	mov	r1, r8
 8001400:	463b      	mov	r3, r7
 8001402:	4620      	mov	r0, r4
 8001404:	e7c7      	b.n	8001396 <HAL_I2C_Master_Receive+0x216>
 8001406:	bf00      	nop
 8001408:	00100002 	.word	0x00100002
 800140c:	ffff0000 	.word	0xffff0000
 8001410:	00010002 	.word	0x00010002
 8001414:	00010008 	.word	0x00010008
 8001418:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141c:	462a      	mov	r2, r5
 800141e:	4639      	mov	r1, r7
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff fcbf 	bl	8000da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001426:	2800      	cmp	r0, #0
 8001428:	f47f af07 	bne.w	800123a <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001432:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001434:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001436:	1c53      	adds	r3, r2, #1
 8001438:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800143a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800143c:	3b01      	subs	r3, #1
 800143e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001440:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001442:	3b01      	subs	r3, #1
 8001444:	b29b      	uxth	r3, r3
 8001446:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	6959      	ldr	r1, [r3, #20]
 800144c:	0749      	lsls	r1, r1, #29
 800144e:	f57f af18 	bpl.w	8001282 <HAL_I2C_Master_Receive+0x102>
 8001452:	e7b8      	b.n	80013c6 <HAL_I2C_Master_Receive+0x246>

08001454 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001456:	4604      	mov	r4, r0
 8001458:	2800      	cmp	r0, #0
 800145a:	f000 808c 	beq.w	8001576 <HAL_I2S_Init+0x122>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800145e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001466:	b92b      	cbnz	r3, 8001474 <HAL_I2S_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001468:	4b45      	ldr	r3, [pc, #276]	; (8001580 <HAL_I2S_Init+0x12c>)
    hi2s->Lock = HAL_UNLOCKED;
 800146a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800146e:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001470:	f001 fa92 	bl	8002998 <HAL_I2S_MspInit>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001474:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001476:	2102      	movs	r1, #2
 8001478:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800147c:	69d3      	ldr	r3, [r2, #28]
 800147e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001482:	f023 030f 	bic.w	r3, r3, #15
 8001486:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001488:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 800148a:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800148c:	428b      	cmp	r3, r1
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800148e:	68e2      	ldr	r2, [r4, #12]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001490:	d073      	beq.n	800157a <HAL_I2S_Init+0x126>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001492:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001494:	2a00      	cmp	r2, #0
 8001496:	bf0c      	ite	eq
 8001498:	2510      	moveq	r5, #16
 800149a:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800149c:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800149e:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80014a0:	bf98      	it	ls
 80014a2:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80014a4:	f000 fd4a 	bl	8001f3c <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	6962      	ldr	r2, [r4, #20]
 80014ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014b0:	d159      	bne.n	8001566 <HAL_I2S_Init+0x112>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80014b2:	68e3      	ldr	r3, [r4, #12]
 80014b4:	210a      	movs	r1, #10
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d053      	beq.n	8001562 <HAL_I2S_Init+0x10e>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014ba:	00ad      	lsls	r5, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014bc:	fbb0 f3f5 	udiv	r3, r0, r5
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014c0:	434b      	muls	r3, r1
 80014c2:	fbb3 f3f2 	udiv	r3, r3, r2
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80014c6:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014c8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80014ca:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80014ce:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80014d2:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80014d4:	1e99      	subs	r1, r3, #2
 80014d6:	29fd      	cmp	r1, #253	; 0xfd
 80014d8:	d849      	bhi.n	800156e <HAL_I2S_Init+0x11a>
    i2sodd = (uint32_t)(i2sodd << 8U);
 80014da:	0212      	lsls	r2, r2, #8
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80014dc:	4313      	orrs	r3, r2
 80014de:	6922      	ldr	r2, [r4, #16]
 80014e0:	6820      	ldr	r0, [r4, #0]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80014e2:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8001590 <HAL_I2S_Init+0x13c>
 80014e6:	68e6      	ldr	r6, [r4, #12]
 80014e8:	69a5      	ldr	r5, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6203      	str	r3, [r0, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80014ee:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80014f2:	69c3      	ldr	r3, [r0, #28]
 80014f4:	ea42 0701 	orr.w	r7, r2, r1
 80014f8:	ea03 030c 	and.w	r3, r3, ip
 80014fc:	433b      	orrs	r3, r7
 80014fe:	4333      	orrs	r3, r6
 8001500:	432b      	orrs	r3, r5
 8001502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001506:	61c3      	str	r3, [r0, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001508:	6a23      	ldr	r3, [r4, #32]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d123      	bne.n	8001556 <HAL_I2S_Init+0x102>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_I2S_Init+0x130>)
 8001510:	6363      	str	r3, [r4, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001512:	4f1d      	ldr	r7, [pc, #116]	; (8001588 <HAL_I2S_Init+0x134>)
 8001514:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_I2S_Init+0x138>)
 8001516:	4298      	cmp	r0, r3
 8001518:	bf18      	it	ne
 800151a:	f04f 2740 	movne.w	r7, #1073758208	; 0x40004000

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800151e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	ea03 030c 	and.w	r3, r3, ip
 8001528:	61fb      	str	r3, [r7, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800152a:	f04f 0302 	mov.w	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001530:	bf1c      	itt	ne
 8001532:	fab2 f382 	clzne	r3, r2
 8001536:	095b      	lsrne	r3, r3, #5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001538:	69f8      	ldr	r0, [r7, #28]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800153a:	bf14      	ite	ne
 800153c:	021b      	lslne	r3, r3, #8
    {
      tmp = I2S_MODE_SLAVE_RX;
 800153e:	f44f 7380 	moveq.w	r3, #256	; 0x100
    {
      tmp = I2S_MODE_SLAVE_TX;
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001542:	4331      	orrs	r1, r6
 8001544:	4319      	orrs	r1, r3
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001546:	b280      	uxth	r0, r0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001548:	4329      	orrs	r1, r5
 800154a:	ea40 0301 	orr.w	r3, r0, r1
 800154e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
                                    (uint16_t)hi2s->Init.CPOL))));

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001554:	61fb      	str	r3, [r7, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001556:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001558:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800155a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800155c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8001560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001562:	00ed      	lsls	r5, r5, #3
 8001564:	e7aa      	b.n	80014bc <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001566:	210a      	movs	r1, #10
 8001568:	fbb0 f3f5 	udiv	r3, r0, r5
 800156c:	e7a8      	b.n	80014c0 <HAL_I2S_Init+0x6c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800156e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
 8001578:	e7f2      	b.n	8001560 <HAL_I2S_Init+0x10c>
    i2sodd = 0U;
 800157a:	2200      	movs	r2, #0
 800157c:	e7ae      	b.n	80014dc <HAL_I2S_Init+0x88>
 800157e:	bf00      	nop
 8001580:	0800160f 	.word	0x0800160f
 8001584:	0800170d 	.word	0x0800170d
 8001588:	40003400 	.word	0x40003400
 800158c:	40003800 	.word	0x40003800
 8001590:	fffff040 	.word	0xfffff040

08001594 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001594:	b510      	push	{r4, lr}
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001596:	2900      	cmp	r1, #0
 8001598:	d033      	beq.n	8001602 <HAL_I2S_Transmit_IT+0x6e>
 800159a:	2a00      	cmp	r2, #0
 800159c:	d031      	beq.n	8001602 <HAL_I2S_Transmit_IT+0x6e>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800159e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d00a      	beq.n	80015bc <HAL_I2S_Transmit_IT+0x28>
 80015a6:	2301      	movs	r3, #1
 80015a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80015ac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_I2S_Transmit_IT+0x2c>
  {
    __HAL_UNLOCK(hi2s);
 80015b8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 80015bc:	2002      	movs	r0, #2
 80015be:	e01f      	b.n	8001600 <HAL_I2S_Transmit_IT+0x6c>
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80015c0:	2403      	movs	r4, #3
 80015c2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015c6:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015c8:	6803      	ldr	r3, [r0, #0]
  hi2s->pTxBuffPtr = pData;
 80015ca:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015cc:	69dc      	ldr	r4, [r3, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80015ce:	2128      	movs	r1, #40	; 0x28
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015d0:	f004 0407 	and.w	r4, r4, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80015d4:	40e1      	lsrs	r1, r4
 80015d6:	07c9      	lsls	r1, r1, #31
  {
    hi2s->TxXferSize = (Size << 1U);
 80015d8:	bf44      	itt	mi
 80015da:	0052      	lslmi	r2, r2, #1
 80015dc:	b292      	uxthmi	r2, r2
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 80015de:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80015e0:	8542      	strh	r2, [r0, #42]	; 0x2a
  }

  /* Enable TXE and ERR interrupt */
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80015e8:	605a      	str	r2, [r3, #4]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	0552      	lsls	r2, r2, #21
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80015ee:	bf5e      	ittt	pl
 80015f0:	69da      	ldrpl	r2, [r3, #28]
 80015f2:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 80015f6:	61da      	strpl	r2, [r3, #28]
  }

  __HAL_UNLOCK(hi2s);
 80015f8:	2300      	movs	r3, #0
 80015fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 80015fe:	4618      	mov	r0, r3
}
 8001600:	bd10      	pop	{r4, pc}
    return  HAL_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	e7fc      	b.n	8001600 <HAL_I2S_Transmit_IT+0x6c>

08001606 <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001606:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001608:	4718      	bx	r3

0800160a <HAL_I2S_RxCpltCallback>:
 800160a:	4770      	bx	lr

0800160c <HAL_I2S_ErrorCallback>:
 800160c:	4770      	bx	lr

0800160e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800160e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001610:	6803      	ldr	r3, [r0, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001616:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800161a:	2a04      	cmp	r2, #4
{
 800161c:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800161e:	d136      	bne.n	800168e <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001620:	9a01      	ldr	r2, [sp, #4]
 8001622:	07d1      	lsls	r1, r2, #31
 8001624:	d517      	bpl.n	8001656 <I2S_IRQHandler+0x48>
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	0652      	lsls	r2, r2, #25
 800162a:	d514      	bpl.n	8001656 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800162c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800162e:	68d9      	ldr	r1, [r3, #12]
 8001630:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8001634:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001636:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001638:	3a01      	subs	r2, #1
 800163a:	b292      	uxth	r2, r2
 800163c:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800163e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001640:	b292      	uxth	r2, r2
 8001642:	b942      	cbnz	r2, 8001656 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800164a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800164c:	2301      	movs	r3, #1
 800164e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001652:	f7ff ffda 	bl	800160a <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001656:	9b01      	ldr	r3, [sp, #4]
 8001658:	0659      	lsls	r1, r3, #25
 800165a:	d518      	bpl.n	800168e <I2S_IRQHandler+0x80>
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	0692      	lsls	r2, r2, #26
 8001662:	d514      	bpl.n	800168e <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800166a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800166c:	2200      	movs	r2, #0
 800166e:	9202      	str	r2, [sp, #8]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	9202      	str	r2, [sp, #8]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800167a:	2301      	movs	r3, #1
 800167c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001680:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff ffbf 	bl	800160c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800168e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001692:	2b03      	cmp	r3, #3
 8001694:	d136      	bne.n	8001704 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001696:	9b01      	ldr	r3, [sp, #4]
 8001698:	079b      	lsls	r3, r3, #30
 800169a:	d519      	bpl.n	80016d0 <I2S_IRQHandler+0xc2>
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	6853      	ldr	r3, [r2, #4]
 80016a0:	0618      	lsls	r0, r3, #24
 80016a2:	d515      	bpl.n	80016d0 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80016a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016a6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80016aa:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 80016ac:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80016ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80016b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b94b      	cbnz	r3, 80016d0 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016bc:	6853      	ldr	r3, [r2, #4]
 80016be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016c2:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80016c4:	2301      	movs	r3, #1
 80016c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 feaa 	bl	8002424 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80016d0:	9b01      	ldr	r3, [sp, #4]
 80016d2:	0719      	lsls	r1, r3, #28
 80016d4:	d516      	bpl.n	8001704 <I2S_IRQHandler+0xf6>
 80016d6:	6823      	ldr	r3, [r4, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	0692      	lsls	r2, r2, #26
 80016dc:	d512      	bpl.n	8001704 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80016e6:	2200      	movs	r2, #0
 80016e8:	9203      	str	r2, [sp, #12]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80016f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ff84 	bl	800160c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001704:	b004      	add	sp, #16
 8001706:	bd10      	pop	{r4, pc}

08001708 <HAL_I2SEx_TxRxCpltCallback>:
 8001708:	4770      	bx	lr
	...

0800170c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800170c:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800170e:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001710:	498e      	ldr	r1, [pc, #568]	; (800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001712:	6893      	ldr	r3, [r2, #8]
{
 8001714:	b086      	sub	sp, #24
 8001716:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001718:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800171a:	4b8d      	ldr	r3, [pc, #564]	; (8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800171c:	428a      	cmp	r2, r1
 800171e:	bf18      	it	ne
 8001720:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001724:	6899      	ldr	r1, [r3, #8]
 8001726:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001728:	6851      	ldr	r1, [r2, #4]
 800172a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001730:	6841      	ldr	r1, [r0, #4]
 8001732:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8001736:	f040 8093 	bne.w	8001860 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800173a:	9b00      	ldr	r3, [sp, #0]
 800173c:	0799      	lsls	r1, r3, #30
 800173e:	d51a      	bpl.n	8001776 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8001740:	9b02      	ldr	r3, [sp, #8]
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	d517      	bpl.n	8001776 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001746:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001748:	1c99      	adds	r1, r3, #2
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	6241      	str	r1, [r0, #36]	; 0x24
 800174e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001750:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001752:	3b01      	subs	r3, #1
 8001754:	b29b      	uxth	r3, r3
 8001756:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001758:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	b95b      	cbnz	r3, 8001776 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800175e:	6853      	ldr	r3, [r2, #4]
 8001760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001764:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001766:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001768:	b29b      	uxth	r3, r3
 800176a:	b923      	cbnz	r3, 8001776 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800176c:	2301      	movs	r3, #1
 800176e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001772:	f7ff ffc9 	bl	8001708 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001776:	9b01      	ldr	r3, [sp, #4]
 8001778:	07d8      	lsls	r0, r3, #31
 800177a:	d522      	bpl.n	80017c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 800177c:	9b03      	ldr	r3, [sp, #12]
 800177e:	0659      	lsls	r1, r3, #25
 8001780:	d51f      	bpl.n	80017c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001782:	6821      	ldr	r1, [r4, #0]
 8001784:	4a71      	ldr	r2, [pc, #452]	; (800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8001786:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8001788:	4291      	cmp	r1, r2
 800178a:	bf18      	it	ne
 800178c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001790:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001792:	68d9      	ldr	r1, [r3, #12]
 8001794:	1c90      	adds	r0, r2, #2
 8001796:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001798:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 800179a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800179c:	3a01      	subs	r2, #1
 800179e:	b292      	uxth	r2, r2
 80017a0:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80017a2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80017a4:	b292      	uxth	r2, r2
 80017a6:	b962      	cbnz	r2, 80017c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80017b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b92b      	cbnz	r3, 80017c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80017b6:	2301      	movs	r3, #1
 80017b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff ffa3 	bl	8001708 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80017c2:	9b01      	ldr	r3, [sp, #4]
 80017c4:	065a      	lsls	r2, r3, #25
 80017c6:	d522      	bpl.n	800180e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80017c8:	9b03      	ldr	r3, [sp, #12]
 80017ca:	069b      	lsls	r3, r3, #26
 80017cc:	d51f      	bpl.n	800180e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	495e      	ldr	r1, [pc, #376]	; (800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80017d2:	4a5f      	ldr	r2, [pc, #380]	; (8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80017d4:	428b      	cmp	r3, r1
 80017d6:	bf18      	it	ne
 80017d8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80017dc:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017de:	6851      	ldr	r1, [r2, #4]
 80017e0:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80017e4:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017ec:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80017ee:	2200      	movs	r2, #0
 80017f0:	9204      	str	r2, [sp, #16]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	9204      	str	r2, [sp, #16]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	9304      	str	r3, [sp, #16]
 80017fa:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001802:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800180a:	f7ff feff 	bl	800160c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800180e:	9b00      	ldr	r3, [sp, #0]
 8001810:	0718      	lsls	r0, r3, #28
 8001812:	f140 8098 	bpl.w	8001946 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8001816:	9b02      	ldr	r3, [sp, #8]
 8001818:	0699      	lsls	r1, r3, #26
 800181a:	f140 8094 	bpl.w	8001946 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800181e:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001820:	494a      	ldr	r1, [pc, #296]	; (800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001828:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800182a:	4a49      	ldr	r2, [pc, #292]	; (8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800182c:	428b      	cmp	r3, r1
 800182e:	bf18      	it	ne
 8001830:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001834:	6851      	ldr	r1, [r2, #4]
 8001836:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800183a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800183c:	2200      	movs	r2, #0
 800183e:	9205      	str	r2, [sp, #20]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	9305      	str	r3, [sp, #20]
 8001844:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001846:	2301      	movs	r3, #1
 8001848:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800184c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800184e:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001856:	b006      	add	sp, #24
 8001858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 800185c:	f7ff bed6 	b.w	800160c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001860:	9a01      	ldr	r2, [sp, #4]
 8001862:	0792      	lsls	r2, r2, #30
 8001864:	d51a      	bpl.n	800189c <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8001866:	9a03      	ldr	r2, [sp, #12]
 8001868:	0611      	lsls	r1, r2, #24
 800186a:	d517      	bpl.n	800189c <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800186c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800186e:	1c91      	adds	r1, r2, #2
 8001870:	8812      	ldrh	r2, [r2, #0]
 8001872:	6241      	str	r1, [r0, #36]	; 0x24
 8001874:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001876:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001878:	3a01      	subs	r2, #1
 800187a:	b292      	uxth	r2, r2
 800187c:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 800187e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001880:	b292      	uxth	r2, r2
 8001882:	b95a      	cbnz	r2, 800189c <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800188a:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 800188c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800188e:	b29b      	uxth	r3, r3
 8001890:	b923      	cbnz	r3, 800189c <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 8001892:	2301      	movs	r3, #1
 8001894:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001898:	f7ff ff36 	bl	8001708 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800189c:	9b00      	ldr	r3, [sp, #0]
 800189e:	07da      	lsls	r2, r3, #31
 80018a0:	d51c      	bpl.n	80018dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 80018a2:	9b02      	ldr	r3, [sp, #8]
 80018a4:	065b      	lsls	r3, r3, #25
 80018a6:	d519      	bpl.n	80018dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80018a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	1c98      	adds	r0, r3, #2
 80018ae:	68d1      	ldr	r1, [r2, #12]
 80018b0:	62e0      	str	r0, [r4, #44]	; 0x2c
 80018b2:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80018b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80018bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b963      	cbnz	r3, 80018dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018c2:	6853      	ldr	r3, [r2, #4]
 80018c4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80018c8:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80018ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b92b      	cbnz	r3, 80018dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff16 	bl	8001708 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80018dc:	9b00      	ldr	r3, [sp, #0]
 80018de:	0658      	lsls	r0, r3, #25
 80018e0:	d51b      	bpl.n	800191a <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 80018e2:	9b02      	ldr	r3, [sp, #8]
 80018e4:	0699      	lsls	r1, r3, #26
 80018e6:	d518      	bpl.n	800191a <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e8:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018ea:	4918      	ldr	r1, [pc, #96]	; (800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018ec:	6853      	ldr	r3, [r2, #4]
 80018ee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80018f2:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80018f6:	428a      	cmp	r2, r1
 80018f8:	bf18      	it	ne
 80018fa:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 80018fe:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001906:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001908:	2301      	movs	r3, #1
 800190a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800190e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001916:	f7ff fe79 	bl	800160c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800191a:	9b01      	ldr	r3, [sp, #4]
 800191c:	071a      	lsls	r2, r3, #28
 800191e:	d512      	bpl.n	8001946 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8001920:	9b03      	ldr	r3, [sp, #12]
 8001922:	069b      	lsls	r3, r3, #26
 8001924:	d50f      	bpl.n	8001946 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	4908      	ldr	r1, [pc, #32]	; (800194c <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 800192c:	428a      	cmp	r2, r1
 800192e:	bf18      	it	ne
 8001930:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001934:	6859      	ldr	r1, [r3, #4]
 8001936:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 800193a:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800193c:	6853      	ldr	r3, [r2, #4]
 800193e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001942:	6053      	str	r3, [r2, #4]
 8001944:	e77f      	b.n	8001846 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8001946:	b006      	add	sp, #24
 8001948:	bd10      	pop	{r4, pc}
 800194a:	bf00      	nop
 800194c:	40003800 	.word	0x40003800
 8001950:	40003400 	.word	0x40003400

08001954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001958:	4604      	mov	r4, r0
 800195a:	b918      	cbnz	r0, 8001964 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800195c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800195e:	b002      	add	sp, #8
 8001960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001964:	6803      	ldr	r3, [r0, #0]
 8001966:	07dd      	lsls	r5, r3, #31
 8001968:	d410      	bmi.n	800198c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	0798      	lsls	r0, r3, #30
 800196e:	d458      	bmi.n	8001a22 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	071a      	lsls	r2, r3, #28
 8001974:	f100 809a 	bmi.w	8001aac <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	075b      	lsls	r3, r3, #29
 800197c:	f100 80ba 	bmi.w	8001af4 <HAL_RCC_OscConfig+0x1a0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	69a2      	ldr	r2, [r4, #24]
 8001982:	2a00      	cmp	r2, #0
 8001984:	f040 8122 	bne.w	8001bcc <HAL_RCC_OscConfig+0x278>
  return HAL_OK;
 8001988:	2000      	movs	r0, #0
 800198a:	e7e8      	b.n	800195e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198c:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	f002 020c 	and.w	r2, r2, #12
 8001994:	2a04      	cmp	r2, #4
 8001996:	d007      	beq.n	80019a8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	2a08      	cmp	r2, #8
 80019a0:	d10a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0259      	lsls	r1, r3, #9
 80019a6:	d507      	bpl.n	80019b8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	039a      	lsls	r2, r3, #14
 80019ae:	d5dc      	bpl.n	800196a <HAL_RCC_OscConfig+0x16>
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1d9      	bne.n	800196a <HAL_RCC_OscConfig+0x16>
 80019b6:	e7d1      	b.n	800195c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	6863      	ldr	r3, [r4, #4]
 80019ba:	4d81      	ldr	r5, [pc, #516]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d111      	bne.n	80019e6 <HAL_RCC_OscConfig+0x92>
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019ca:	f7fe fdc5 	bl	8000558 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4e7c      	ldr	r6, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80019d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	6833      	ldr	r3, [r6, #0]
 80019d4:	039b      	lsls	r3, r3, #14
 80019d6:	d4c8      	bmi.n	800196a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d8:	f7fe fdbe 	bl	8000558 <HAL_GetTick>
 80019dc:	1b40      	subs	r0, r0, r5
 80019de:	2864      	cmp	r0, #100	; 0x64
 80019e0:	d9f7      	bls.n	80019d2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80019e2:	2003      	movs	r0, #3
 80019e4:	e7bb      	b.n	800195e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ea:	d104      	bne.n	80019f6 <HAL_RCC_OscConfig+0xa2>
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f2:	602b      	str	r3, [r5, #0]
 80019f4:	e7e5      	b.n	80019c2 <HAL_RCC_OscConfig+0x6e>
 80019f6:	682a      	ldr	r2, [r5, #0]
 80019f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019fc:	602a      	str	r2, [r5, #0]
 80019fe:	682a      	ldr	r2, [r5, #0]
 8001a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a04:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1df      	bne.n	80019ca <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001a0a:	f7fe fda5 	bl	8000558 <HAL_GetTick>
 8001a0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	039f      	lsls	r7, r3, #14
 8001a14:	d5a9      	bpl.n	800196a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a16:	f7fe fd9f 	bl	8000558 <HAL_GetTick>
 8001a1a:	1b80      	subs	r0, r0, r6
 8001a1c:	2864      	cmp	r0, #100	; 0x64
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0xbc>
 8001a20:	e7df      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f012 0f0c 	tst.w	r2, #12
 8001a2a:	d007      	beq.n	8001a3c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a32:	2a08      	cmp	r2, #8
 8001a34:	d111      	bne.n	8001a5a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	025e      	lsls	r6, r3, #9
 8001a3a:	d40e      	bmi.n	8001a5a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3c:	4a60      	ldr	r2, [pc, #384]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	079d      	lsls	r5, r3, #30
 8001a42:	d502      	bpl.n	8001a4a <HAL_RCC_OscConfig+0xf6>
 8001a44:	68e3      	ldr	r3, [r4, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d188      	bne.n	800195c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	6813      	ldr	r3, [r2, #0]
 8001a4c:	6921      	ldr	r1, [r4, #16]
 8001a4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a56:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a58:	e78a      	b.n	8001970 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a5a:	68e2      	ldr	r2, [r4, #12]
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	b1b2      	cbz	r2, 8001a8e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a64:	f7fe fd78 	bl	8000558 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4d55      	ldr	r5, [pc, #340]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8001a6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	0798      	lsls	r0, r3, #30
 8001a70:	d507      	bpl.n	8001a82 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	682b      	ldr	r3, [r5, #0]
 8001a74:	6922      	ldr	r2, [r4, #16]
 8001a76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a7e:	602b      	str	r3, [r5, #0]
 8001a80:	e776      	b.n	8001970 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a82:	f7fe fd69 	bl	8000558 <HAL_GetTick>
 8001a86:	1b80      	subs	r0, r0, r6
 8001a88:	2802      	cmp	r0, #2
 8001a8a:	d9ef      	bls.n	8001a6c <HAL_RCC_OscConfig+0x118>
 8001a8c:	e7a9      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a90:	f7fe fd62 	bl	8000558 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a94:	4e4a      	ldr	r6, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 8001a96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a98:	6833      	ldr	r3, [r6, #0]
 8001a9a:	0799      	lsls	r1, r3, #30
 8001a9c:	f57f af68 	bpl.w	8001970 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa0:	f7fe fd5a 	bl	8000558 <HAL_GetTick>
 8001aa4:	1b40      	subs	r0, r0, r5
 8001aa6:	2802      	cmp	r0, #2
 8001aa8:	d9f6      	bls.n	8001a98 <HAL_RCC_OscConfig+0x144>
 8001aaa:	e79a      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aac:	6962      	ldr	r2, [r4, #20]
 8001aae:	4b45      	ldr	r3, [pc, #276]	; (8001bc4 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	b182      	cbz	r2, 8001ad4 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001ab8:	f7fe fd4e 	bl	8000558 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abc:	4e40      	ldr	r6, [pc, #256]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8001abe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001ac2:	079f      	lsls	r7, r3, #30
 8001ac4:	f53f af58 	bmi.w	8001978 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7fe fd46 	bl	8000558 <HAL_GetTick>
 8001acc:	1b40      	subs	r0, r0, r5
 8001ace:	2802      	cmp	r0, #2
 8001ad0:	d9f6      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x16c>
 8001ad2:	e786      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001ad8:	f7fe fd3e 	bl	8000558 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	4e38      	ldr	r6, [pc, #224]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8001ade:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001ae2:	0798      	lsls	r0, r3, #30
 8001ae4:	f57f af48 	bpl.w	8001978 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7fe fd36 	bl	8000558 <HAL_GetTick>
 8001aec:	1b40      	subs	r0, r0, r5
 8001aee:	2802      	cmp	r0, #2
 8001af0:	d9f6      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x18c>
 8001af2:	e776      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af4:	4b32      	ldr	r3, [pc, #200]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001afc:	d128      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	9201      	str	r2, [sp, #4]
 8001b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b12:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4d2c      	ldr	r5, [pc, #176]	; (8001bc8 <HAL_RCC_OscConfig+0x274>)
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	05d9      	lsls	r1, r3, #23
 8001b1a:	d51b      	bpl.n	8001b54 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	68a3      	ldr	r3, [r4, #8]
 8001b1e:	4d28      	ldr	r5, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d127      	bne.n	8001b74 <HAL_RCC_OscConfig+0x220>
 8001b24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b2c:	f7fe fd14 	bl	8000558 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b30:	4e23      	ldr	r6, [pc, #140]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8001b32:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001b3a:	079b      	lsls	r3, r3, #30
 8001b3c:	d539      	bpl.n	8001bb2 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8001b3e:	2f00      	cmp	r7, #0
 8001b40:	f43f af1e 	beq.w	8001980 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4a1e      	ldr	r2, [pc, #120]	; (8001bc0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	e717      	b.n	8001980 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b50:	2700      	movs	r7, #0
 8001b52:	e7df      	b.n	8001b14 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fcfc 	bl	8000558 <HAL_GetTick>
 8001b60:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	682b      	ldr	r3, [r5, #0]
 8001b64:	05da      	lsls	r2, r3, #23
 8001b66:	d4d9      	bmi.n	8001b1c <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b68:	f7fe fcf6 	bl	8000558 <HAL_GetTick>
 8001b6c:	1b80      	subs	r0, r0, r6
 8001b6e:	2802      	cmp	r0, #2
 8001b70:	d9f7      	bls.n	8001b62 <HAL_RCC_OscConfig+0x20e>
 8001b72:	e736      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d104      	bne.n	8001b82 <HAL_RCC_OscConfig+0x22e>
 8001b78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	672b      	str	r3, [r5, #112]	; 0x70
 8001b80:	e7d0      	b.n	8001b24 <HAL_RCC_OscConfig+0x1d0>
 8001b82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b84:	f022 0201 	bic.w	r2, r2, #1
 8001b88:	672a      	str	r2, [r5, #112]	; 0x70
 8001b8a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b8c:	f022 0204 	bic.w	r2, r2, #4
 8001b90:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ca      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8001b96:	f7fe fcdf 	bl	8000558 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b9e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ba2:	0798      	lsls	r0, r3, #30
 8001ba4:	d5cb      	bpl.n	8001b3e <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe fcd7 	bl	8000558 <HAL_GetTick>
 8001baa:	1b80      	subs	r0, r0, r6
 8001bac:	4540      	cmp	r0, r8
 8001bae:	d9f7      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x24c>
 8001bb0:	e717      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7fe fcd1 	bl	8000558 <HAL_GetTick>
 8001bb6:	1b40      	subs	r0, r0, r5
 8001bb8:	4540      	cmp	r0, r8
 8001bba:	d9bd      	bls.n	8001b38 <HAL_RCC_OscConfig+0x1e4>
 8001bbc:	e711      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bcc:	4d22      	ldr	r5, [pc, #136]	; (8001c58 <HAL_RCC_OscConfig+0x304>)
 8001bce:	68ab      	ldr	r3, [r5, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	f43f aec1 	beq.w	800195c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_OscConfig+0x308>)
 8001bdc:	2a02      	cmp	r2, #2
 8001bde:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8001be2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	d12b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8001be6:	f7fe fcb7 	bl	8000558 <HAL_GetTick>
 8001bea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	0199      	lsls	r1, r3, #6
 8001bf0:	d41f      	bmi.n	8001c32 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bfa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c06:	0852      	lsrs	r2, r2, #1
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c0e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4d11      	ldr	r5, [pc, #68]	; (8001c58 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_ENABLE();
 8001c14:	2201      	movs	r2, #1
 8001c16:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c18:	f7fe fc9e 	bl	8000558 <HAL_GetTick>
 8001c1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	019a      	lsls	r2, r3, #6
 8001c22:	f53f aeb1 	bmi.w	8001988 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe fc97 	bl	8000558 <HAL_GetTick>
 8001c2a:	1b00      	subs	r0, r0, r4
 8001c2c:	2802      	cmp	r0, #2
 8001c2e:	d9f6      	bls.n	8001c1e <HAL_RCC_OscConfig+0x2ca>
 8001c30:	e6d7      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c32:	f7fe fc91 	bl	8000558 <HAL_GetTick>
 8001c36:	1b80      	subs	r0, r0, r6
 8001c38:	2802      	cmp	r0, #2
 8001c3a:	d9d7      	bls.n	8001bec <HAL_RCC_OscConfig+0x298>
 8001c3c:	e6d1      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fc8b 	bl	8000558 <HAL_GetTick>
 8001c42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	019b      	lsls	r3, r3, #6
 8001c48:	f57f ae9e 	bpl.w	8001988 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe fc84 	bl	8000558 <HAL_GetTick>
 8001c50:	1b00      	subs	r0, r0, r4
 8001c52:	2802      	cmp	r0, #2
 8001c54:	d9f6      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2f0>
 8001c56:	e6c4      	b.n	80019e2 <HAL_RCC_OscConfig+0x8e>
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	42470000 	.word	0x42470000

08001c60 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c60:	4913      	ldr	r1, [pc, #76]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c62:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c64:	688b      	ldr	r3, [r1, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d01c      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x48>
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c74:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c76:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	bf14      	ite	ne
 8001c7e:	480d      	ldrne	r0, [pc, #52]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c80:	480d      	ldreq	r0, [pc, #52]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c86:	bf18      	it	ne
 8001c88:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	fba1 0100 	umull	r0, r1, r1, r0
 8001c92:	f7fe fa99 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001ca2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ca6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x54>)
 8001caa:	e7fc      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001cae:	e7fa      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	007a1200 	.word	0x007a1200
 8001cb8:	00f42400 	.word	0x00f42400

08001cbc <HAL_RCC_ClockConfig>:
{
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	b910      	cbnz	r0, 8001ccc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cc6:	2001      	movs	r0, #1
}
 8001cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_RCC_ClockConfig+0x120>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f002 020f 	and.w	r2, r2, #15
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d327      	bcc.n	8001d28 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	6821      	ldr	r1, [r4, #0]
 8001cda:	078f      	lsls	r7, r1, #30
 8001cdc:	d42c      	bmi.n	8001d38 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	07c8      	lsls	r0, r1, #31
 8001ce0:	d43f      	bmi.n	8001d62 <HAL_RCC_ClockConfig+0xa6>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_RCC_ClockConfig+0x120>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	f002 020f 	and.w	r2, r2, #15
 8001cea:	42aa      	cmp	r2, r5
 8001cec:	d864      	bhi.n	8001db8 <HAL_RCC_ClockConfig+0xfc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cee:	6822      	ldr	r2, [r4, #0]
 8001cf0:	0751      	lsls	r1, r2, #29
 8001cf2:	d46a      	bmi.n	8001dca <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	0713      	lsls	r3, r2, #28
 8001cf6:	d507      	bpl.n	8001d08 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf8:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_RCC_ClockConfig+0x124>)
 8001cfa:	6921      	ldr	r1, [r4, #16]
 8001cfc:	6893      	ldr	r3, [r2, #8]
 8001cfe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d02:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d06:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d08:	f7ff ffaa 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x124>)
 8001d0e:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <HAL_RCC_ClockConfig+0x128>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	40d8      	lsrs	r0, r3
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <HAL_RCC_ClockConfig+0x12c>)
 8001d1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7fe fbd0 	bl	80004c4 <HAL_InitTick>
  return HAL_OK;
 8001d24:	2000      	movs	r0, #0
 8001d26:	e7cf      	b.n	8001cc8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d28:	b2ca      	uxtb	r2, r1
 8001d2a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	428b      	cmp	r3, r1
 8001d34:	d1c7      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xa>
 8001d36:	e7cf      	b.n	8001cd8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_RCC_ClockConfig+0x124>)
 8001d3a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d3e:	bf1e      	ittt	ne
 8001d40:	689a      	ldrne	r2, [r3, #8]
 8001d42:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d46:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4a:	bf42      	ittt	mi
 8001d4c:	689a      	ldrmi	r2, [r3, #8]
 8001d4e:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d52:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	68a0      	ldr	r0, [r4, #8]
 8001d58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	e7bd      	b.n	8001cde <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	6862      	ldr	r2, [r4, #4]
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCC_ClockConfig+0x124>)
 8001d66:	2a01      	cmp	r2, #1
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	d0a9      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4e1b      	ldr	r6, [pc, #108]	; (8001de0 <HAL_RCC_ClockConfig+0x124>)
 8001d74:	68b3      	ldr	r3, [r6, #8]
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d7e:	f7fe fbeb 	bl	8000558 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d88:	68b3      	ldr	r3, [r6, #8]
 8001d8a:	6862      	ldr	r2, [r4, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d94:	d0a5      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7fe fbdf 	bl	8000558 <HAL_GetTick>
 8001d9a:	1bc0      	subs	r0, r0, r7
 8001d9c:	4540      	cmp	r0, r8
 8001d9e:	d9f3      	bls.n	8001d88 <HAL_RCC_ClockConfig+0xcc>
        return HAL_TIMEOUT;
 8001da0:	2003      	movs	r0, #3
 8001da2:	e791      	b.n	8001cc8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da4:	1e91      	subs	r1, r2, #2
 8001da6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001daa:	d802      	bhi.n	8001db2 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001db0:	e7de      	b.n	8001d70 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db2:	f013 0f02 	tst.w	r3, #2
 8001db6:	e7db      	b.n	8001d70 <HAL_RCC_ClockConfig+0xb4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db8:	b2ea      	uxtb	r2, r5
 8001dba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	42ab      	cmp	r3, r5
 8001dc4:	f47f af7f 	bne.w	8001cc6 <HAL_RCC_ClockConfig+0xa>
 8001dc8:	e791      	b.n	8001cee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dca:	4905      	ldr	r1, [pc, #20]	; (8001de0 <HAL_RCC_ClockConfig+0x124>)
 8001dcc:	68e0      	ldr	r0, [r4, #12]
 8001dce:	688b      	ldr	r3, [r1, #8]
 8001dd0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001dd4:	4303      	orrs	r3, r0
 8001dd6:	608b      	str	r3, [r1, #8]
 8001dd8:	e78c      	b.n	8001cf4 <HAL_RCC_ClockConfig+0x38>
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08002d68 	.word	0x08002d68
 8001de8:	2000000c 	.word	0x2000000c

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	4a03      	ldr	r2, [pc, #12]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dfa:	6810      	ldr	r0, [r2, #0]
}
 8001dfc:	40d8      	lsrs	r0, r3
 8001dfe:	4770      	bx	lr
 8001e00:	40023800 	.word	0x40023800
 8001e04:	08002d78 	.word	0x08002d78
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e0c:	6803      	ldr	r3, [r0, #0]
 8001e0e:	f013 0f05 	tst.w	r3, #5
{
 8001e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e14:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e16:	d105      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	f013 0302 	ands.w	r3, r3, #2
 8001e1e:	d12a      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001e20:	2000      	movs	r0, #0
 8001e22:	e026      	b.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e26:	4e43      	ldr	r6, [pc, #268]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001e28:	2200      	movs	r2, #0
 8001e2a:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fb94 	bl	8000558 <HAL_GetTick>
 8001e30:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e32:	6833      	ldr	r3, [r6, #0]
 8001e34:	011f      	lsls	r7, r3, #4
 8001e36:	d416      	bmi.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001e38:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001e3c:	071b      	lsls	r3, r3, #28
 8001e3e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e42:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e48:	4e3a      	ldr	r6, [pc, #232]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8001e4e:	f7fe fb83 	bl	8000558 <HAL_GetTick>
 8001e52:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e54:	6833      	ldr	r3, [r6, #0]
 8001e56:	0118      	lsls	r0, r3, #4
 8001e58:	d4de      	bmi.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e5a:	f7fe fb7d 	bl	8000558 <HAL_GetTick>
 8001e5e:	1b40      	subs	r0, r0, r5
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d9f7      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001e64:	e004      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e66:	f7fe fb77 	bl	8000558 <HAL_GetTick>
 8001e6a:	1b40      	subs	r0, r0, r5
 8001e6c:	2802      	cmp	r0, #2
 8001e6e:	d9e0      	bls.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001e70:	2003      	movs	r0, #3
}
 8001e72:	b003      	add	sp, #12
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8001e7c:	4d2e      	ldr	r5, [pc, #184]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001e98:	f7fe fb5e 	bl	8000558 <HAL_GetTick>
 8001e9c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	05d9      	lsls	r1, r3, #23
 8001ea2:	d51b      	bpl.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea4:	4d23      	ldr	r5, [pc, #140]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ea6:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eaa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001eae:	d11b      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eb0:	68e3      	ldr	r3, [r4, #12]
 8001eb2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001eb6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001eba:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001ebc:	d134      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001ebe:	6891      	ldr	r1, [r2, #8]
 8001ec0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001ec4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001ec8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001ecc:	4301      	orrs	r1, r0
 8001ece:	6091      	str	r1, [r2, #8]
 8001ed0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eda:	e7a1      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001edc:	f7fe fb3c 	bl	8000558 <HAL_GetTick>
 8001ee0:	1b80      	subs	r0, r0, r6
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d9db      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8001ee6:	e7c3      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d0df      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ef0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efe:	2100      	movs	r1, #0
 8001f00:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8001f04:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f06:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f08:	07da      	lsls	r2, r3, #31
 8001f0a:	d5d1      	bpl.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fb24 	bl	8000558 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f10:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f18:	079b      	lsls	r3, r3, #30
 8001f1a:	d4c9      	bmi.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fb1c 	bl	8000558 <HAL_GetTick>
 8001f20:	1b80      	subs	r0, r0, r6
 8001f22:	42b8      	cmp	r0, r7
 8001f24:	d9f7      	bls.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8001f26:	e7a3      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f28:	6891      	ldr	r1, [r2, #8]
 8001f2a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f2e:	e7ce      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8001f30:	42470000 	.word	0x42470000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000

08001f3c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001f3c:	2801      	cmp	r0, #1
 8001f3e:	d11b      	bne.n	8001f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8001f42:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001f44:	0212      	lsls	r2, r2, #8
 8001f46:	d417      	bmi.n	8001f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	bf14      	ite	ne
 8001f52:	4b0b      	ldrne	r3, [pc, #44]	; (8001f80 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f54:	4b0b      	ldreq	r3, [pc, #44]	; (8001f84 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f5a:	fbb3 f3f2 	udiv	r3, r3, r2
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001f5e:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8001f60:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001f64:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001f68:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001f6c:	4358      	muls	r0, r3
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001f6e:	f3c2 7302 	ubfx	r3, r2, #28, #3
 8001f72:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8001f76:	4770      	bx	lr
 8001f78:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001f7a:	4770      	bx	lr
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	007a1200 	.word	0x007a1200
 8001f84:	00f42400 	.word	0x00f42400

08001f88 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001f98:	bf1e      	ittt	ne
 8001f9a:	681a      	ldrne	r2, [r3, #0]
 8001f9c:	f042 0201 	orrne.w	r2, r2, #1
 8001fa0:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001fa8:	2000      	movs	r0, #0
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001fae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	4290      	cmp	r0, r2
 8001fb2:	d012      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fbe:	4290      	cmp	r0, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc6:	4290      	cmp	r0, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fce:	4290      	cmp	r0, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0x2e>
 8001fd2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001fd6:	4290      	cmp	r0, r2
 8001fd8:	d119      	bne.n	800200e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001fda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe2:	4a23      	ldr	r2, [pc, #140]	; (8002070 <TIM_Base_SetConfig+0xc4>)
 8001fe4:	4290      	cmp	r0, r2
 8001fe6:	d029      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8001fe8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fec:	d026      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8001fee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d022      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8001ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d01e      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8001ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002002:	4290      	cmp	r0, r2
 8002004:	d01a      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8002006:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800200a:	4290      	cmp	r0, r2
 800200c:	d016      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 800200e:	4a19      	ldr	r2, [pc, #100]	; (8002074 <TIM_Base_SetConfig+0xc8>)
 8002010:	4290      	cmp	r0, r2
 8002012:	d013      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8002014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002018:	4290      	cmp	r0, r2
 800201a:	d00f      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 800201c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002020:	4290      	cmp	r0, r2
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8002024:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002028:	4290      	cmp	r0, r2
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 800202c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002030:	4290      	cmp	r0, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x90>
 8002034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002038:	4290      	cmp	r0, r2
 800203a:	d103      	bne.n	8002044 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800203e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002044:	694a      	ldr	r2, [r1, #20]
 8002046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800204a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800204c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800204e:	688b      	ldr	r3, [r1, #8]
 8002050:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002052:	680b      	ldr	r3, [r1, #0]
 8002054:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <TIM_Base_SetConfig+0xc4>)
 8002058:	4298      	cmp	r0, r3
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0xb8>
 800205c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002060:	4298      	cmp	r0, r3
 8002062:	d101      	bne.n	8002068 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002064:	690b      	ldr	r3, [r1, #16]
 8002066:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002068:	2301      	movs	r3, #1
 800206a:	6143      	str	r3, [r0, #20]
}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40010000 	.word	0x40010000
 8002074:	40014000 	.word	0x40014000

08002078 <HAL_TIM_Base_Init>:
{
 8002078:	b510      	push	{r4, lr}
  if (htim == NULL)
 800207a:	4604      	mov	r4, r0
 800207c:	b1a0      	cbz	r0, 80020a8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002082:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002086:	b91b      	cbnz	r3, 8002090 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002088:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800208c:	f000 fcd8 	bl	8002a40 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002092:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002098:	1d21      	adds	r1, r4, #4
 800209a:	f7ff ff87 	bl	8001fac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800209e:	2301      	movs	r3, #1
 80020a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
}
 80020a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
 80020aa:	e7fc      	b.n	80020a6 <HAL_TIM_Base_Init+0x2e>

080020ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020ac:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b0:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80020ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020bc:	6083      	str	r3, [r0, #8]
}
 80020be:	bd10      	pop	{r4, pc}

080020c0 <HAL_TIM_ConfigClockSource>:
{
 80020c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80020c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020c6:	2b01      	cmp	r3, #1
{
 80020c8:	4604      	mov	r4, r0
 80020ca:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80020ce:	d027      	beq.n	8002120 <HAL_TIM_ConfigClockSource+0x60>
 80020d0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80020d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80020d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80020da:	6800      	ldr	r0, [r0, #0]
 80020dc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80020e6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80020e8:	680b      	ldr	r3, [r1, #0]
 80020ea:	2b60      	cmp	r3, #96	; 0x60
 80020ec:	d04b      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xc6>
 80020ee:	d832      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x96>
 80020f0:	2b40      	cmp	r3, #64	; 0x40
 80020f2:	d060      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xf6>
 80020f4:	d816      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x64>
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0x42>
 80020fa:	d809      	bhi.n	8002110 <HAL_TIM_ConfigClockSource+0x50>
 80020fc:	f033 0210 	bics.w	r2, r3, #16
 8002100:	d108      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8002102:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002104:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002108:	4313      	orrs	r3, r2
 800210a:	f043 0307 	orr.w	r3, r3, #7
 800210e:	e038      	b.n	8002182 <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8002110:	2b30      	cmp	r3, #48	; 0x30
 8002112:	d0f6      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8002114:	2301      	movs	r3, #1
 8002116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800211a:	2300      	movs	r3, #0
 800211c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002120:	4618      	mov	r0, r3
}
 8002122:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002124:	2b50      	cmp	r3, #80	; 0x50
 8002126:	d1f5      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002128:	684a      	ldr	r2, [r1, #4]
 800212a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800212c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212e:	6a03      	ldr	r3, [r0, #32]
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002136:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002138:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800213c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002140:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002144:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002146:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002148:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800214a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002150:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002154:	e015      	b.n	8002182 <HAL_TIM_ConfigClockSource+0xc2>
  switch (sClockSourceConfig->ClockSource)
 8002156:	2b70      	cmp	r3, #112	; 0x70
 8002158:	d00b      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0xb2>
 800215a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215e:	d1d9      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8002160:	68cb      	ldr	r3, [r1, #12]
 8002162:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002166:	f7ff ffa1 	bl	80020ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800216a:	6883      	ldr	r3, [r0, #8]
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	e007      	b.n	8002182 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8002172:	68cb      	ldr	r3, [r1, #12]
 8002174:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002178:	f7ff ff98 	bl	80020ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800217c:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800217e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8002182:	6083      	str	r3, [r0, #8]
}
 8002184:	e7c6      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x54>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002186:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002188:	684d      	ldr	r5, [r1, #4]
 800218a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800218c:	f023 0310 	bic.w	r3, r3, #16
 8002190:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002192:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002194:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002196:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800219a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800219e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021a2:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021a6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021a8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021aa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021b0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80021b4:	e7e5      	b.n	8002182 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	684a      	ldr	r2, [r1, #4]
 80021b8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80021ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021bc:	6a03      	ldr	r3, [r0, #32]
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80021d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80021d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80021d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021de:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80021e2:	e7ce      	b.n	8002182 <HAL_TIM_ConfigClockSource+0xc2>

080021e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80021e4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	f04f 0302 	mov.w	r3, #2
 80021f0:	d014      	beq.n	800221c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021f2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80021f8:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021fa:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021fc:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021fe:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002208:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800220a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800220c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800220e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002210:	2301      	movs	r3, #1
 8002212:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002216:	2300      	movs	r3, #0
 8002218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800221c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800221e:	bd30      	pop	{r4, r5, pc}

08002220 <CS43L22_write>:
	// Write 0x00 to register 0x00.
	CS43L22_write( 0x00, 0x00, 2);
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
}

void CS43L22_write(uint8_t reg, uint8_t Cmd, uint8_t len){
 8002220:	b507      	push	{r0, r1, r2, lr}

	uint8_t iData[2]; // Buffer to read, change and write back register values of the DAC
	iData[0] =  reg;
 8002222:	f88d 0004 	strb.w	r0, [sp, #4]
	iData[1] = Cmd;
 8002226:	f88d 1005 	strb.w	r1, [sp, #5]

	CS43L22_EXTERNAL_DAC_I2C_write(iData,len);
 800222a:	a801      	add	r0, sp, #4
 800222c:	4611      	mov	r1, r2
 800222e:	f000 f931 	bl	8002494 <CS43L22_EXTERNAL_DAC_I2C_write>


}
 8002232:	b003      	add	sp, #12
 8002234:	f85d fb04 	ldr.w	pc, [sp], #4

08002238 <CS43L22_init>:
void CS43L22_init(){
 8002238:	b513      	push	{r0, r1, r4, lr}
	CS43L22_EXTERNAL_DAC_enable();
 800223a:	f000 f947 	bl	80024cc <CS43L22_EXTERNAL_DAC_enable>
	CS43L22_write( CS43L22_REG_POWER_CTL1, 0x01, 2);
 800223e:	2202      	movs	r2, #2
 8002240:	4610      	mov	r0, r2
 8002242:	2101      	movs	r1, #1
 8002244:	f7ff ffec 	bl	8002220 <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL2, 0xAF, 2);
 8002248:	2202      	movs	r2, #2
 800224a:	21af      	movs	r1, #175	; 0xaf
 800224c:	2004      	movs	r0, #4
 800224e:	f7ff ffe7 	bl	8002220 <CS43L22_write>
	CS43L22_write( CS43L22_REG_CLOCKING_CTL,(1 << 7), 2); //Tal vez tenga que poner 0x81 para dividir clock
 8002252:	2202      	movs	r2, #2
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	2005      	movs	r0, #5
 8002258:	f7ff ffe2 	bl	8002220 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 800225c:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002260:	2006      	movs	r0, #6
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002262:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002264:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002268:	f7ff ffda 	bl	8002220 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]); // ... and read 1 byte (the register content).
 800226c:	f10d 0005 	add.w	r0, sp, #5
 8002270:	f000 f91e 	bl	80024b0 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8002274:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002278:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800227c:	f001 0120 	and.w	r1, r1, #32
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8002280:	f041 0107 	orr.w	r1, r1, #7
	CS43L22_write(iData[0], iData[1], 2);
 8002284:	2202      	movs	r2, #2
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8002286:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 800228a:	f7ff ffc9 	bl	8002220 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 800228e:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_MISC_CTL ;
 8002292:	200e      	movs	r0, #14
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 8002294:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_MISC_CTL ;
 8002296:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 800229a:	f7ff ffc1 	bl	8002220 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);  // ... and read 1 byte (the register content).
 800229e:	f10d 0005 	add.w	r0, sp, #5
 80022a2:	f000 f905 	bl	80024b0 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80022a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 80022aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80022ae:	f001 0137 	and.w	r1, r1, #55	; 0x37
 80022b2:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	CS43L22_write(iData[0], iData[1], 2);
 80022b6:	2202      	movs	r2, #2
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80022b8:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 80022bc:	f7ff ffb0 	bl	8002220 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PLAYBACK_CTL2, 0x00, 2);
 80022c0:	2202      	movs	r2, #2
 80022c2:	2100      	movs	r1, #0
 80022c4:	200f      	movs	r0, #15
 80022c6:	f7ff ffab 	bl	8002220 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMA_VOL, 0x00, 2);
 80022ca:	2202      	movs	r2, #2
 80022cc:	2100      	movs	r1, #0
 80022ce:	201a      	movs	r0, #26
 80022d0:	f7ff ffa6 	bl	8002220 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMB_VOL, 0x00, 2);
 80022d4:	2202      	movs	r2, #2
 80022d6:	2100      	movs	r1, #0
 80022d8:	201b      	movs	r0, #27
 80022da:	f7ff ffa1 	bl	8002220 <CS43L22_write>
	CS43L22_write( 0x00, 0x99, 2);
 80022de:	2202      	movs	r2, #2
 80022e0:	2199      	movs	r1, #153	; 0x99
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff ff9c 	bl	8002220 <CS43L22_write>
	iData[0] = 0x32;
 80022e8:	2432      	movs	r4, #50	; 0x32
	CS43L22_write( 0x47, 0x80, 2);
 80022ea:	2202      	movs	r2, #2
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	2047      	movs	r0, #71	; 0x47
 80022f0:	f7ff ff96 	bl	8002220 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 80022f4:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 80022f8:	f88d 4004 	strb.w	r4, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 80022fc:	2201      	movs	r2, #1
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ff8e 	bl	8002220 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002304:	f10d 0005 	add.w	r0, sp, #5
 8002308:	f000 f8d2 	bl	80024b0 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] |= 0x80;
 800230c:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002310:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] |= 0x80;
 8002314:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	CS43L22_write(iData[0], iData[1], 2);
 8002318:	2202      	movs	r2, #2
	iData[1] |= 0x80;
 800231a:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 800231e:	f7ff ff7f 	bl	8002220 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 8002322:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002326:	f88d 4004 	strb.w	r4, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 800232a:	2201      	movs	r2, #1
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff ff77 	bl	8002220 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002332:	f10d 0005 	add.w	r0, sp, #5
 8002336:	f000 f8bb 	bl	80024b0 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(0x80);
 800233a:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 800233e:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(0x80);
 8002342:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	CS43L22_write(iData[0], iData[1], 2);
 8002346:	2202      	movs	r2, #2
	iData[1] &= ~(0x80);
 8002348:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 800234c:	f7ff ff68 	bl	8002220 <CS43L22_write>
	CS43L22_write( 0x00, 0x00, 2);
 8002350:	2100      	movs	r1, #0
 8002352:	4608      	mov	r0, r1
 8002354:	2202      	movs	r2, #2
 8002356:	f7ff ff63 	bl	8002220 <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
 800235a:	2202      	movs	r2, #2
 800235c:	219e      	movs	r1, #158	; 0x9e
 800235e:	4610      	mov	r0, r2
 8002360:	f7ff ff5e 	bl	8002220 <CS43L22_write>
}
 8002364:	b002      	add	sp, #8
 8002366:	bd10      	pop	{r4, pc}

08002368 <CS43L22_AudioSend>:

void CS43L22_AudioSend(uint16_t *buffer,uint16_t buffer_size){

	CS43L22_EXTERNAL_DAC_I2S_transmit(buffer,buffer_size);
 8002368:	f000 b88c 	b.w	8002484 <CS43L22_EXTERNAL_DAC_I2S_transmit>

0800236c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236e:	2410      	movs	r4, #16
{
 8002370:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	4622      	mov	r2, r4
 8002374:	2100      	movs	r1, #0
 8002376:	a80e      	add	r0, sp, #56	; 0x38
 8002378:	f000 fca6 	bl	8002cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237c:	2214      	movs	r2, #20
 800237e:	2100      	movs	r1, #0
 8002380:	a807      	add	r0, sp, #28
 8002382:	f000 fca1 	bl	8002cc8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002386:	4622      	mov	r2, r4
 8002388:	2100      	movs	r1, #0
 800238a:	a803      	add	r0, sp, #12
 800238c:	f000 fc9c 	bl	8002cc8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	2400      	movs	r4, #0
 8002392:	4b22      	ldr	r3, [pc, #136]	; (800241c <SystemClock_Config+0xb0>)
 8002394:	9401      	str	r4, [sp, #4]
 8002396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002398:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a8:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <SystemClock_Config+0xb4>)
 80023aa:	9402      	str	r4, [sp, #8]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	9302      	str	r3, [sp, #8]
 80023bc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023be:	2601      	movs	r6, #1
 80023c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023c4:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c6:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023ce:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d0:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023dc:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023de:	2307      	movs	r3, #7
 80023e0:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e2:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e4:	f7ff fab6 	bl	8001954 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ea:	e9cd 3507 	strd	r3, r5, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023ee:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023fa:	a807      	add	r0, sp, #28
 80023fc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fe:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002400:	f7ff fc5c 	bl	8001cbc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002404:	2303      	movs	r3, #3
 8002406:	f44f 7081 	mov.w	r0, #258	; 0x102
 800240a:	e9cd 0304 	strd	r0, r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800240e:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002410:	9603      	str	r6, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002412:	f7ff fcfb 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002416:	b018      	add	sp, #96	; 0x60
 8002418:	bd70      	pop	{r4, r5, r6, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000

08002424 <HAL_I2S_TxCpltCallback>:
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2s);

	//HAL_GPIO_TogglePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin);

	transferComplete = TRUE;
 8002424:	4b01      	ldr	r3, [pc, #4]	; (800242c <HAL_I2S_TxCpltCallback+0x8>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]

}
 800242a:	4770      	bx	lr
 800242c:	2000000a 	.word	0x2000000a

08002430 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)

{
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	adc_done = 1;
 8002430:	4b01      	ldr	r3, [pc, #4]	; (8002438 <HAL_ADC_ConvCpltCallback+0x8>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]

}
 8002436:	4770      	bx	lr
 8002438:	20000080 	.word	0x20000080

0800243c <select_buffer_to_transmit>:

uint16_t* select_buffer_to_transmit(buffer_t bf){

	uint16_t *ptr = NULL;

	if(buffer_to_send == buffer_A){
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <select_buffer_to_transmit+0x14>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b123      	cbz	r3, 800244c <select_buffer_to_transmit+0x10>

		ptr = audioBufferA;

	}else if(buffer_to_send == buffer_B){

		ptr = audioBufferB;
 8002442:	2b01      	cmp	r3, #1
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <select_buffer_to_transmit+0x18>)
 8002446:	bf18      	it	ne
 8002448:	2000      	movne	r0, #0
 800244a:	4770      	bx	lr
		ptr = audioBufferA;
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <select_buffer_to_transmit+0x1c>)

	}

	return ptr;

}
 800244e:	4770      	bx	lr
 8002450:	20000008 	.word	0x20000008
 8002454:	200001ea 	.word	0x200001ea
 8002458:	20000082 	.word	0x20000082

0800245c <audio_buffer_init>:

void audio_buffer_init(){
 800245c:	b508      	push	{r3, lr}

	size_t i;

	for(i = 0;i<AUDIO_BUFFER_SIZE;i++){

		audioBufferA[i] = 0;
 800245e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002462:	2100      	movs	r1, #0
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <audio_buffer_init+0x20>)
 8002466:	f000 fc2f 	bl	8002cc8 <memset>
		audioBufferB[i] = 0;

	}

}
 800246a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		audioBufferB[i] = 0;
 800246e:	4804      	ldr	r0, [pc, #16]	; (8002480 <audio_buffer_init+0x24>)
 8002470:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002474:	2100      	movs	r1, #0
 8002476:	f000 bc27 	b.w	8002cc8 <memset>
 800247a:	bf00      	nop
 800247c:	20000082 	.word	0x20000082
 8002480:	200001ea 	.word	0x200001ea

08002484 <CS43L22_EXTERNAL_DAC_I2S_transmit>:

#endif

}*/

void CS43L22_EXTERNAL_DAC_I2S_transmit(uint16_t *buffer,uint16_t buffer_size){
 8002484:	460a      	mov	r2, r1

	HAL_I2S_Transmit_IT(&hi2s3,buffer,buffer_size);
 8002486:	4601      	mov	r1, r0
 8002488:	4801      	ldr	r0, [pc, #4]	; (8002490 <CS43L22_EXTERNAL_DAC_I2S_transmit+0xc>)
 800248a:	f7ff b883 	b.w	8001594 <HAL_I2S_Transmit_IT>
 800248e:	bf00      	nop
 8002490:	200003fc 	.word	0x200003fc

08002494 <CS43L22_EXTERNAL_DAC_I2C_write>:

}


void CS43L22_EXTERNAL_DAC_I2C_write(uint8_t *iData, uint8_t len)
{ //maneja el periferico i2c para comunicaicon con el dac
 8002494:	b507      	push	{r0, r1, r2, lr}
 8002496:	460b      	mov	r3, r1

	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 8002498:	2164      	movs	r1, #100	; 0x64
{ //maneja el periferico i2c para comunicaicon con el dac
 800249a:	4602      	mov	r2, r0
	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 800249c:	9100      	str	r1, [sp, #0]
 800249e:	4803      	ldr	r0, [pc, #12]	; (80024ac <CS43L22_EXTERNAL_DAC_I2C_write+0x18>)
 80024a0:	2194      	movs	r1, #148	; 0x94
 80024a2:	f7fe fd9b 	bl	8000fdc <HAL_I2C_Master_Transmit>

}
 80024a6:	b003      	add	sp, #12
 80024a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ac:	200003a8 	.word	0x200003a8

080024b0 <CS43L22_EXTERNAL_DAC_I2C_recieve>:

void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 80024b0:	b507      	push	{r0, r1, r2, lr}

	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 80024b2:	2364      	movs	r3, #100	; 0x64
void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 80024b4:	4602      	mov	r2, r0
	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2194      	movs	r1, #148	; 0x94
 80024ba:	2301      	movs	r3, #1
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <CS43L22_EXTERNAL_DAC_I2C_recieve+0x18>)
 80024be:	f7fe fe5f 	bl	8001180 <HAL_I2C_Master_Receive>

}
 80024c2:	b003      	add	sp, #12
 80024c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c8:	200003a8 	.word	0x200003a8

080024cc <CS43L22_EXTERNAL_DAC_enable>:
void CS43L22_EXTERNAL_DAC_enable()
{
	//esta funcion se encarga de poner en alto o bajo el pin de reset del dac
	//recibe un 1 para poner el pin en alto y un 0 para ponerlo en bajo

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <CS43L22_EXTERNAL_DAC_enable+0xc>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	2110      	movs	r1, #16
 80024d2:	f7fe bbdb 	b.w	8000c8c <HAL_GPIO_WritePin>
 80024d6:	bf00      	nop
 80024d8:	40020c00 	.word	0x40020c00

080024dc <update_output>:

}

void update_output(float* numerator, float* denominator, Node* output, Node* input)
{
 80024dc:	b510      	push	{r4, lr}
	output->value = numerator[0]*(input->prev)->value + denominator[0]*(output->prev)->value + denominator[1]*(output->next->value);
 80024de:	6814      	ldr	r4, [r2, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	ed91 7a00 	vldr	s14, [r1]
 80024e6:	edd4 7a01 	vldr	s15, [r4, #4]
 80024ea:	edd0 6a00 	vldr	s13, [r0]
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80024f6:	6893      	ldr	r3, [r2, #8]
 80024f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80024fc:	edd1 6a01 	vldr	s13, [r1, #4]
 8002500:	ed93 7a01 	vldr	s14, [r3, #4]
 8002504:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002508:	edc2 7a01 	vstr	s15, [r2, #4]
	return;
}
 800250c:	bd10      	pop	{r4, pc}
	...

08002510 <load_buffer>:
void load_buffer(uint16_t *buff, float* numerator, float* denominator, Node* output, Node* input){
 8002510:	b510      	push	{r4, lr}
 8002512:	4604      	mov	r4, r0
 8002514:	4608      	mov	r0, r1
 8002516:	4611      	mov	r1, r2
	output = output->next;
 8002518:	689a      	ldr	r2, [r3, #8]
	update_output(numerator, denominator, output, input);
 800251a:	9b02      	ldr	r3, [sp, #8]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f7ff ffdd 	bl	80024dc <update_output>
	int16_t sample1 = (int16_t)(output->value);
 8002522:	edd2 7a01 	vldr	s15, [r2, #4]
	buff[i] = sample;
 8002526:	490e      	ldr	r1, [pc, #56]	; (8002560 <load_buffer+0x50>)
	sample = (uint16_t)sample1;
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <load_buffer+0x54>)
	int16_t sample1 = (int16_t)(output->value);
 800252a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	sample = (uint16_t)sample1;
 800252e:	ee17 3a90 	vmov	r3, s15
 8002532:	b29b      	uxth	r3, r3
 8002534:	8013      	strh	r3, [r2, #0]
	buff[i] = sample;
 8002536:	680a      	ldr	r2, [r1, #0]
 8002538:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	buff[i+1] =  buff[i];
 800253c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
	i = i+2;
 8002540:	3202      	adds	r2, #2
	if( (i >= AUDIO_BUFFER_SIZE)){
 8002542:	2ab3      	cmp	r2, #179	; 0xb3
	buff[i+1] =  buff[i];
 8002544:	8063      	strh	r3, [r4, #2]
	i = i+2;
 8002546:	600a      	str	r2, [r1, #0]
	if( (i >= AUDIO_BUFFER_SIZE)){
 8002548:	d909      	bls.n	800255e <load_buffer+0x4e>
		buffer_to_send = buffer_to_fill;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <load_buffer+0x58>)
		buffer_t aux = buffer_to_send;
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <load_buffer+0x5c>)
		buffer_to_send = buffer_to_fill;
 800254e:	781c      	ldrb	r4, [r3, #0]
		buffer_t aux = buffer_to_send;
 8002550:	7810      	ldrb	r0, [r2, #0]
		buffer_to_send = buffer_to_fill;
 8002552:	7014      	strb	r4, [r2, #0]
		flag = data_ready_to_send;
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <load_buffer+0x60>)
		buffer_to_fill = aux;
 8002556:	7018      	strb	r0, [r3, #0]
		flag = data_ready_to_send;
 8002558:	2300      	movs	r3, #0
 800255a:	7013      	strb	r3, [r2, #0]
		i=0;
 800255c:	600b      	str	r3, [r1, #0]
}
 800255e:	bd10      	pop	{r4, pc}
 8002560:	20000484 	.word	0x20000484
 8002564:	20000488 	.word	0x20000488
 8002568:	2000035c 	.word	0x2000035c
 800256c:	20000008 	.word	0x20000008
 8002570:	20000009 	.word	0x20000009

08002574 <fill_buffers>:
void fill_buffers(float* numerator, float* denominator, Node* output, Node* input){
 8002574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if((buffer_to_fill == buffer_A)){
 8002578:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80025c8 <fill_buffers+0x54>
void fill_buffers(float* numerator, float* denominator, Node* output, Node* input){
 800257c:	461f      	mov	r7, r3
	if((buffer_to_fill == buffer_A)){
 800257e:	f898 3000 	ldrb.w	r3, [r8]
void fill_buffers(float* numerator, float* denominator, Node* output, Node* input){
 8002582:	4604      	mov	r4, r0
 8002584:	460d      	mov	r5, r1
 8002586:	4616      	mov	r6, r2
	if((buffer_to_fill == buffer_A)){
 8002588:	b943      	cbnz	r3, 800259c <fill_buffers+0x28>
		audioToUpdate = audioBufferA;
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <fill_buffers+0x48>)
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <fill_buffers+0x4c>)
 800258e:	6018      	str	r0, [r3, #0]
		load_buffer(audioToUpdate, numerator, denominator, output, input);
 8002590:	4613      	mov	r3, r2
 8002592:	9700      	str	r7, [sp, #0]
 8002594:	460a      	mov	r2, r1
 8002596:	4621      	mov	r1, r4
 8002598:	f7ff ffba 	bl	8002510 <load_buffer>
	if((buffer_to_fill == buffer_B)){
 800259c:	f898 3000 	ldrb.w	r3, [r8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <fill_buffers+0x42>
		audioToUpdate = audioBufferB;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <fill_buffers+0x48>)
 80025a6:	4807      	ldr	r0, [pc, #28]	; (80025c4 <fill_buffers+0x50>)
 80025a8:	6018      	str	r0, [r3, #0]
		load_buffer(audioToUpdate, numerator, denominator, output, input);
 80025aa:	462a      	mov	r2, r5
 80025ac:	9700      	str	r7, [sp, #0]
 80025ae:	4633      	mov	r3, r6
 80025b0:	4621      	mov	r1, r4
 80025b2:	f7ff ffad 	bl	8002510 <load_buffer>
}
 80025b6:	b002      	add	sp, #8
 80025b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025bc:	20000358 	.word	0x20000358
 80025c0:	20000082 	.word	0x20000082
 80025c4:	200001ea 	.word	0x200001ea
 80025c8:	2000035c 	.word	0x2000035c

080025cc <create_circ_buffer>:

Node* create_circ_buffer(int size)
{
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	4606      	mov	r6, r0
	// create head and current node pointers
	Node* head = malloc(sizeof(Node));
 80025d0:	200c      	movs	r0, #12
 80025d2:	f000 fac5 	bl	8002b60 <malloc>

	// set current pointer to head
	current = head;

	//decrement size by 1
	size--;
 80025d6:	3e01      	subs	r6, #1
	Node* head = malloc(sizeof(Node));
 80025d8:	4604      	mov	r4, r0
 80025da:	4605      	mov	r5, r0
	// create the rest of the nodes
	for (int i = 0; i < size; i++)
 80025dc:	2700      	movs	r7, #0
 80025de:	42b7      	cmp	r7, r6
 80025e0:	db03      	blt.n	80025ea <create_circ_buffer+0x1e>
		temp->prev = current;
		// set current node to next node
		current = temp;
	}
	// point head to tail and tail to head
	head->prev = current;
 80025e2:	6025      	str	r5, [r4, #0]
	current->next = head;
	//return the start of the circular buffer
	return head;
}
 80025e4:	4620      	mov	r0, r4
	current->next = head;
 80025e6:	60ac      	str	r4, [r5, #8]
}
 80025e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Node* temp = malloc(sizeof(Node));
 80025ea:	200c      	movs	r0, #12
 80025ec:	f000 fab8 	bl	8002b60 <malloc>
	for (int i = 0; i < size; i++)
 80025f0:	3701      	adds	r7, #1
		current->next = temp;
 80025f2:	60a8      	str	r0, [r5, #8]
		temp->prev = current;
 80025f4:	6005      	str	r5, [r0, #0]
	for (int i = 0; i < size; i++)
 80025f6:	4605      	mov	r5, r0
 80025f8:	e7f1      	b.n	80025de <create_circ_buffer+0x12>
	...

080025fc <main>:
{
 80025fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002600:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002602:	f7fd ff83 	bl	800050c <HAL_Init>
  SystemClock_Config();
 8002606:	f7ff feb1 	bl	800236c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260a:	2214      	movs	r2, #20
 800260c:	2100      	movs	r1, #0
 800260e:	a807      	add	r0, sp, #28
 8002610:	f000 fb5a 	bl	8002cc8 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002614:	2400      	movs	r4, #0
 8002616:	4b83      	ldr	r3, [pc, #524]	; (8002824 <main+0x228>)
 8002618:	9400      	str	r4, [sp, #0]
 800261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 800261c:	4882      	ldr	r0, [pc, #520]	; (8002828 <main+0x22c>)
  hadc1.Instance = ADC1;
 800261e:	4d83      	ldr	r5, [pc, #524]	; (800282c <main+0x230>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 8002620:	f8df a250 	ldr.w	sl, [pc, #592]	; 8002874 <main+0x278>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	9401      	str	r4, [sp, #4]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	f002 0201 	and.w	r2, r2, #1
 8002644:	9201      	str	r2, [sp, #4]
 8002646:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002648:	9402      	str	r4, [sp, #8]
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	f042 0208 	orr.w	r2, r2, #8
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
 8002652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002654:	f002 0208 	and.w	r2, r2, #8
 8002658:	9202      	str	r2, [sp, #8]
 800265a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265c:	9403      	str	r4, [sp, #12]
 800265e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002660:	f042 0204 	orr.w	r2, r2, #4
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
 8002666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002668:	f002 0204 	and.w	r2, r2, #4
 800266c:	9203      	str	r2, [sp, #12]
 800266e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002670:	9404      	str	r4, [sp, #16]
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	f042 0202 	orr.w	r2, r2, #2
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 8002680:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002682:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 8002684:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 8002688:	f7fe fb00 	bl	8000c8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800268c:	4622      	mov	r2, r4
 800268e:	4868      	ldr	r0, [pc, #416]	; (8002830 <main+0x234>)
 8002690:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002694:	f7fe fafa 	bl	8000c8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Button_Pin;
 8002698:	2601      	movs	r6, #1
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800269a:	4863      	ldr	r0, [pc, #396]	; (8002828 <main+0x22c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800269e:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a0:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80026a4:	f7fe fa0c 	bl	8000ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sampling_Check_Pin;
 80026a8:	2304      	movs	r3, #4
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 80026aa:	485f      	ldr	r0, [pc, #380]	; (8002828 <main+0x22c>)
 80026ac:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f7fe fa03 	bl	8000ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80026ba:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026be:	a907      	add	r1, sp, #28
 80026c0:	485b      	ldr	r0, [pc, #364]	; (8002830 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c2:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ca:	f7fe f9f9 	bl	8000ac0 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80026ce:	4859      	ldr	r0, [pc, #356]	; (8002834 <main+0x238>)
  hi2c1.Init.ClockSpeed = 100000;
 80026d0:	4a59      	ldr	r2, [pc, #356]	; (8002838 <main+0x23c>)
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <main+0x240>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026d4:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 80026d6:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026de:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 80026e2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ea:	f7fe fbd7 	bl	8000e9c <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 80026ee:	4854      	ldr	r0, [pc, #336]	; (8002840 <main+0x244>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80026f0:	4954      	ldr	r1, [pc, #336]	; (8002844 <main+0x248>)
 80026f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f6:	e9c0 1300 	strd	r1, r3, [r0]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80026fa:	6103      	str	r3, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80026fc:	f64b 3380 	movw	r3, #48000	; 0xbb80
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002700:	e9c0 3405 	strd	r3, r4, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002704:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002708:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800270c:	f7fe fea2 	bl	8001454 <HAL_I2S_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002710:	2210      	movs	r2, #16
 8002712:	4621      	mov	r1, r4
 8002714:	a807      	add	r0, sp, #28
 8002716:	f000 fad7 	bl	8002cc8 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800271a:	484b      	ldr	r0, [pc, #300]	; (8002848 <main+0x24c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800271c:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800271e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002722:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002726:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800272a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800272e:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002730:	e9c5 370a 	strd	r3, r7, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = DISABLE;
 8002734:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002736:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002738:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800273c:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 800273e:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002740:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002744:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002746:	f7fd ff0d 	bl	8000564 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274a:	a907      	add	r1, sp, #28
 800274c:	4628      	mov	r0, r5
  sConfig.Rank = 1;
 800274e:	e9cd 6607 	strd	r6, r6, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002752:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Instance = TIM2;
 8002754:	4e3d      	ldr	r6, [pc, #244]	; (800284c <main+0x250>)
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 8002756:	4f3e      	ldr	r7, [pc, #248]	; (8002850 <main+0x254>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002758:	f7fe f8ba 	bl	80008d0 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275c:	2210      	movs	r2, #16
 800275e:	4621      	mov	r1, r4
 8002760:	a807      	add	r0, sp, #28
 8002762:	f000 fab1 	bl	8002cc8 <memset>
  htim2.Init.Prescaler = 175;
 8002766:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800276a:	23af      	movs	r3, #175	; 0xaf
 800276c:	e9c6 c300 	strd	ip, r3, [r6]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002770:	4630      	mov	r0, r6
  htim2.Init.Period = 9;
 8002772:	2309      	movs	r3, #9
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002774:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277a:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002780:	f7ff fc7a 	bl	8002078 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002788:	a907      	add	r1, sp, #28
 800278a:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278e:	f7ff fc97 	bl	80020c0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002792:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002794:	2320      	movs	r3, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002796:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002798:	e9cd 3405 	strd	r3, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279c:	f7ff fd22 	bl	80021e4 <HAL_TIMEx_MasterConfigSynchronization>
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <main+0x258>)
 80027a2:	603b      	str	r3, [r7, #0]
	audioToUpdate = audioBufferA;
 80027a4:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <main+0x25c>)
 80027a6:	4a2d      	ldr	r2, [pc, #180]	; (800285c <main+0x260>)
 80027a8:	601a      	str	r2, [r3, #0]
	CS43L22_init();   				//configuro el DAC CS43L22
 80027aa:	f7ff fd45 	bl	8002238 <CS43L22_init>
	audio_buffer_init();         	//inicializo los buffers con ceros
 80027ae:	f7ff fe55 	bl	800245c <audio_buffer_init>
	HAL_TIM_Base_Start(&htim2); 	//activo el timer
 80027b2:	4630      	mov	r0, r6
 80027b4:	f7ff fbe8 	bl	8001f88 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1); 		// y el ADC
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7fd ff79 	bl	80006b0 <HAL_ADC_Start_IT>
	float num[1] = {b1};
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <main+0x264>)
 80027c0:	9305      	str	r3, [sp, #20]
	float denom[2] = {a1, a2};
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <main+0x268>)
 80027c4:	9307      	str	r3, [sp, #28]
	Node* x_buff = create_circ_buffer(3);
 80027c6:	2003      	movs	r0, #3
	float denom[2] = {a1, a2};
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <main+0x26c>)
 80027ca:	9308      	str	r3, [sp, #32]
	Node* x_buff = create_circ_buffer(3);
 80027cc:	f7ff fefe 	bl	80025cc <create_circ_buffer>
 80027d0:	4605      	mov	r5, r0
	Node* y_buff = create_circ_buffer(3);
 80027d2:	2003      	movs	r0, #3
 80027d4:	f7ff fefa 	bl	80025cc <create_circ_buffer>
		if(transferComplete && (flag == data_ready_to_send)){
 80027d8:	4e24      	ldr	r6, [pc, #144]	; (800286c <main+0x270>)
	Node* y_buff = create_circ_buffer(3);
 80027da:	4604      	mov	r4, r0
		if(transferComplete && (flag == data_ready_to_send)){
 80027dc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002878 <main+0x27c>
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 80027e0:	f89a 0000 	ldrb.w	r0, [sl]
 80027e4:	f7ff fe2a 	bl	800243c <select_buffer_to_transmit>
		if(transferComplete && (flag == data_ready_to_send)){
 80027e8:	f898 3000 	ldrb.w	r3, [r8]
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 80027ec:	6038      	str	r0, [r7, #0]
		if(transferComplete && (flag == data_ready_to_send)){
 80027ee:	b15b      	cbz	r3, 8002808 <main+0x20c>
 80027f0:	f896 9000 	ldrb.w	r9, [r6]
 80027f4:	f1b9 0f00 	cmp.w	r9, #0
 80027f8:	d106      	bne.n	8002808 <main+0x20c>
			flag = idle;
 80027fa:	2302      	movs	r3, #2
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 80027fc:	21b4      	movs	r1, #180	; 0xb4
			flag = idle;
 80027fe:	7033      	strb	r3, [r6, #0]
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 8002800:	f7ff fdb2 	bl	8002368 <CS43L22_AudioSend>
			transferComplete = FALSE;
 8002804:	f888 9000 	strb.w	r9, [r8]
		if(adc_done){
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <main+0x274>)
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	2a00      	cmp	r2, #0
 800280e:	d0e7      	beq.n	80027e0 <main+0x1e4>
			adc_done = 0;
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
			fill_buffers(num, denom, y_buff, x_buff);
 8002814:	a907      	add	r1, sp, #28
 8002816:	462b      	mov	r3, r5
 8002818:	4622      	mov	r2, r4
 800281a:	a805      	add	r0, sp, #20
 800281c:	f7ff feaa 	bl	8002574 <fill_buffers>
 8002820:	e7dc      	b.n	80027dc <main+0x1e0>
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000
 800282c:	20000360 	.word	0x20000360
 8002830:	40020c00 	.word	0x40020c00
 8002834:	200003a8 	.word	0x200003a8
 8002838:	40005400 	.word	0x40005400
 800283c:	000186a0 	.word	0x000186a0
 8002840:	200003fc 	.word	0x200003fc
 8002844:	40003c00 	.word	0x40003c00
 8002848:	40012000 	.word	0x40012000
 800284c:	20000444 	.word	0x20000444
 8002850:	20000354 	.word	0x20000354
 8002854:	200001ea 	.word	0x200001ea
 8002858:	20000358 	.word	0x20000358
 800285c:	20000082 	.word	0x20000082
 8002860:	3dce1302 	.word	0x3dce1302
 8002864:	3ffeb363 	.word	0x3ffeb363
 8002868:	bf800000 	.word	0xbf800000
 800286c:	20000009 	.word	0x20000009
 8002870:	20000080 	.word	0x20000080
 8002874:	20000008 	.word	0x20000008
 8002878:	2000000a 	.word	0x2000000a

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_MspInit+0x34>)
 8002880:	2100      	movs	r1, #0
 8002882:	9100      	str	r1, [sp, #0]
 8002884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
 800288c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002892:	9200      	str	r2, [sp, #0]
 8002894:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	9101      	str	r1, [sp, #4]
 8002898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800289a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	b002      	add	sp, #8
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800

080028b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028b4:	b510      	push	{r4, lr}
 80028b6:	4604      	mov	r4, r0
 80028b8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ba:	2214      	movs	r2, #20
 80028bc:	2100      	movs	r1, #0
 80028be:	a803      	add	r0, sp, #12
 80028c0:	f000 fa02 	bl	8002cc8 <memset>
  if(hadc->Instance==ADC1)
 80028c4:	6822      	ldr	r2, [r4, #0]
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <HAL_ADC_MspInit+0x6c>)
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d126      	bne.n	800291a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028cc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80028d0:	2400      	movs	r4, #0
 80028d2:	9401      	str	r4, [sp, #4]
 80028d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = Audio_Input_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 80028d6:	4813      	ldr	r0, [pc, #76]	; (8002924 <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
 80028de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80028e4:	9201      	str	r2, [sp, #4]
 80028e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	9402      	str	r4, [sp, #8]
 80028ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028fa:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 80028fe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002900:	2303      	movs	r3, #3
 8002902:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 8002906:	f7fe f8db 	bl	8000ac0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800290a:	2012      	movs	r0, #18
 800290c:	4622      	mov	r2, r4
 800290e:	4621      	mov	r1, r4
 8002910:	f7fe f882 	bl	8000a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002914:	2012      	movs	r0, #18
 8002916:	f7fe f8b1 	bl	8000a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800291a:	b008      	add	sp, #32
 800291c:	bd10      	pop	{r4, pc}
 800291e:	bf00      	nop
 8002920:	40012000 	.word	0x40012000
 8002924:	40020000 	.word	0x40020000

08002928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002928:	b530      	push	{r4, r5, lr}
 800292a:	4604      	mov	r4, r0
 800292c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	2214      	movs	r2, #20
 8002930:	2100      	movs	r1, #0
 8002932:	a803      	add	r0, sp, #12
 8002934:	f000 f9c8 	bl	8002cc8 <memset>
  if(hi2c->Instance==I2C1)
 8002938:	6822      	ldr	r2, [r4, #0]
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_I2C_MspInit+0x64>)
 800293c:	429a      	cmp	r2, r3
 800293e:	d122      	bne.n	8002986 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4c13      	ldr	r4, [pc, #76]	; (8002990 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	4814      	ldr	r0, [pc, #80]	; (8002994 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	2500      	movs	r5, #0
 8002946:	9501      	str	r5, [sp, #4]
 8002948:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	6323      	str	r3, [r4, #48]	; 0x30
 8002950:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800295e:	2312      	movs	r3, #18
 8002960:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002964:	2301      	movs	r3, #1
 8002966:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800296a:	2304      	movs	r3, #4
 800296c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	f7fe f8a7 	bl	8000ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002972:	9502      	str	r5, [sp, #8]
 8002974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800297a:	6423      	str	r3, [r4, #64]	; 0x40
 800297c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800297e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002986:	b009      	add	sp, #36	; 0x24
 8002988:	bd30      	pop	{r4, r5, pc}
 800298a:	bf00      	nop
 800298c:	40005400 	.word	0x40005400
 8002990:	40023800 	.word	0x40023800
 8002994:	40020400 	.word	0x40020400

08002998 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	2214      	movs	r2, #20
 80029a0:	2100      	movs	r1, #0
 80029a2:	a803      	add	r0, sp, #12
 80029a4:	f000 f990 	bl	8002cc8 <memset>
  if(hi2s->Instance==SPI3)
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_I2S_MspInit+0x9c>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d13f      	bne.n	8002a30 <HAL_I2S_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029b0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80029b4:	2400      	movs	r4, #0
 80029b6:	9400      	str	r4, [sp, #0]
 80029b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029ba:	481f      	ldr	r0, [pc, #124]	; (8002a38 <HAL_I2S_MspInit+0xa0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
 80029c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80029c8:	9200      	str	r2, [sp, #0]
 80029ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029cc:	9401      	str	r4, [sp, #4]
 80029ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d0:	f042 0201 	orr.w	r2, r2, #1
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	f002 0201 	and.w	r2, r2, #1
 80029dc:	9201      	str	r2, [sp, #4]
 80029de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	9402      	str	r4, [sp, #8]
 80029e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e4:	f042 0204 	orr.w	r2, r2, #4
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2702      	movs	r7, #2
 80029f6:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029f8:	2601      	movs	r6, #1
 80029fa:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a02:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002a06:	f7fe f85b 	bl	8000ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a0a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	480b      	ldr	r0, [pc, #44]	; (8002a3c <HAL_I2S_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a10:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a12:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002a18:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f7fe f850 	bl	8000ac0 <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002a20:	2033      	movs	r0, #51	; 0x33
 8002a22:	4622      	mov	r2, r4
 8002a24:	4621      	mov	r1, r4
 8002a26:	f7fd fff7 	bl	8000a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002a2a:	2033      	movs	r0, #51	; 0x33
 8002a2c:	f7fe f826 	bl	8000a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a30:	b009      	add	sp, #36	; 0x24
 8002a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a34:	40003c00 	.word	0x40003c00
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40020800 	.word	0x40020800

08002a40 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002a40:	6803      	ldr	r3, [r0, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002a46:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8002a48:	d10b      	bne.n	8002a62 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_TIM_Base_MspInit+0x28>)
 8002a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a62:	b002      	add	sp, #8
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a6c:	4770      	bx	lr

08002a6e <PendSV_Handler>:
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a70:	f7fd bd66 	b.w	8000540 <HAL_IncTick>

08002a74 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a74:	4801      	ldr	r0, [pc, #4]	; (8002a7c <ADC_IRQHandler+0x8>)
 8002a76:	f7fd be97 	b.w	80007a8 <HAL_ADC_IRQHandler>
 8002a7a:	bf00      	nop
 8002a7c:	20000360 	.word	0x20000360

08002a80 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8002a80:	4801      	ldr	r0, [pc, #4]	; (8002a88 <SPI3_IRQHandler+0x8>)
 8002a82:	f7fe bdc0 	b.w	8001606 <HAL_I2S_IRQHandler>
 8002a86:	bf00      	nop
 8002a88:	200003fc 	.word	0x200003fc

08002a8c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <_sbrk+0x2c>)
 8002a8e:	6811      	ldr	r1, [r2, #0]
{
 8002a90:	b508      	push	{r3, lr}
 8002a92:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002a94:	b909      	cbnz	r1, 8002a9a <_sbrk+0xe>
		heap_end = &end;
 8002a96:	4909      	ldr	r1, [pc, #36]	; (8002abc <_sbrk+0x30>)
 8002a98:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8002a9a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002a9c:	4669      	mov	r1, sp
 8002a9e:	4403      	add	r3, r0
 8002aa0:	428b      	cmp	r3, r1
 8002aa2:	d906      	bls.n	8002ab2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002aa4:	f000 f928 	bl	8002cf8 <__errno>
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002ab0:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002ab2:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002ab4:	e7fc      	b.n	8002ab0 <_sbrk+0x24>
 8002ab6:	bf00      	nop
 8002ab8:	2000048c 	.word	0x2000048c
 8002abc:	200005d8 	.word	0x200005d8

08002ac0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	490f      	ldr	r1, [pc, #60]	; (8002b00 <SystemInit+0x40>)
 8002ac2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <SystemInit+0x44>)
 8002ad0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ad2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002ada:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ae8:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <SystemInit+0x48>)
 8002aea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002af4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002afa:	608b      	str	r3, [r1, #8]
#endif
}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000ed00 	.word	0xe000ed00
 8002b04:	40023800 	.word	0x40023800
 8002b08:	24003010 	.word	0x24003010

08002b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b12:	e003      	b.n	8002b1c <LoopCopyDataInit>

08002b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b1a:	3104      	adds	r1, #4

08002b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b1c:	480b      	ldr	r0, [pc, #44]	; (8002b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b24:	d3f6      	bcc.n	8002b14 <CopyDataInit>
  ldr  r2, =_sbss
 8002b26:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b28:	e002      	b.n	8002b30 <LoopFillZerobss>

08002b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b2c:	f842 3b04 	str.w	r3, [r2], #4

08002b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b34:	d3f9      	bcc.n	8002b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b36:	f7ff ffc3 	bl	8002ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b3a:	f000 f8e3 	bl	8002d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3e:	f7ff fd5d 	bl	80025fc <main>
  bx  lr    
 8002b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b48:	08002d90 	.word	0x08002d90
  ldr  r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b50:	20000060 	.word	0x20000060
  ldr  r2, =_sbss
 8002b54:	20000060 	.word	0x20000060
  ldr  r3, = _ebss
 8002b58:	200005d8 	.word	0x200005d8

08002b5c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b5c:	e7fe      	b.n	8002b5c <BusFault_Handler>
	...

08002b60 <malloc>:
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <malloc+0xc>)
 8002b62:	4601      	mov	r1, r0
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	f000 b823 	b.w	8002bb0 <_malloc_r>
 8002b6a:	bf00      	nop
 8002b6c:	2000005c 	.word	0x2000005c

08002b70 <sbrk_aligned>:
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	4e0e      	ldr	r6, [pc, #56]	; (8002bac <sbrk_aligned+0x3c>)
 8002b74:	460c      	mov	r4, r1
 8002b76:	6831      	ldr	r1, [r6, #0]
 8002b78:	4605      	mov	r5, r0
 8002b7a:	b911      	cbnz	r1, 8002b82 <sbrk_aligned+0x12>
 8002b7c:	f000 f8ac 	bl	8002cd8 <_sbrk_r>
 8002b80:	6030      	str	r0, [r6, #0]
 8002b82:	4621      	mov	r1, r4
 8002b84:	4628      	mov	r0, r5
 8002b86:	f000 f8a7 	bl	8002cd8 <_sbrk_r>
 8002b8a:	1c43      	adds	r3, r0, #1
 8002b8c:	d00a      	beq.n	8002ba4 <sbrk_aligned+0x34>
 8002b8e:	1cc4      	adds	r4, r0, #3
 8002b90:	f024 0403 	bic.w	r4, r4, #3
 8002b94:	42a0      	cmp	r0, r4
 8002b96:	d007      	beq.n	8002ba8 <sbrk_aligned+0x38>
 8002b98:	1a21      	subs	r1, r4, r0
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 f89c 	bl	8002cd8 <_sbrk_r>
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d101      	bne.n	8002ba8 <sbrk_aligned+0x38>
 8002ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba8:	4620      	mov	r0, r4
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	20000494 	.word	0x20000494

08002bb0 <_malloc_r>:
 8002bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb4:	1ccd      	adds	r5, r1, #3
 8002bb6:	f025 0503 	bic.w	r5, r5, #3
 8002bba:	3508      	adds	r5, #8
 8002bbc:	2d0c      	cmp	r5, #12
 8002bbe:	bf38      	it	cc
 8002bc0:	250c      	movcc	r5, #12
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	4607      	mov	r7, r0
 8002bc6:	db01      	blt.n	8002bcc <_malloc_r+0x1c>
 8002bc8:	42a9      	cmp	r1, r5
 8002bca:	d905      	bls.n	8002bd8 <_malloc_r+0x28>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	2600      	movs	r6, #0
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002cac <_malloc_r+0xfc>
 8002bdc:	f000 f868 	bl	8002cb0 <__malloc_lock>
 8002be0:	f8d8 3000 	ldr.w	r3, [r8]
 8002be4:	461c      	mov	r4, r3
 8002be6:	bb5c      	cbnz	r4, 8002c40 <_malloc_r+0x90>
 8002be8:	4629      	mov	r1, r5
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ffc0 	bl	8002b70 <sbrk_aligned>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	d155      	bne.n	8002ca2 <_malloc_r+0xf2>
 8002bf6:	f8d8 4000 	ldr.w	r4, [r8]
 8002bfa:	4626      	mov	r6, r4
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	d145      	bne.n	8002c8c <_malloc_r+0xdc>
 8002c00:	2c00      	cmp	r4, #0
 8002c02:	d048      	beq.n	8002c96 <_malloc_r+0xe6>
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	4631      	mov	r1, r6
 8002c08:	4638      	mov	r0, r7
 8002c0a:	eb04 0903 	add.w	r9, r4, r3
 8002c0e:	f000 f863 	bl	8002cd8 <_sbrk_r>
 8002c12:	4581      	cmp	r9, r0
 8002c14:	d13f      	bne.n	8002c96 <_malloc_r+0xe6>
 8002c16:	6821      	ldr	r1, [r4, #0]
 8002c18:	1a6d      	subs	r5, r5, r1
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4638      	mov	r0, r7
 8002c1e:	f7ff ffa7 	bl	8002b70 <sbrk_aligned>
 8002c22:	3001      	adds	r0, #1
 8002c24:	d037      	beq.n	8002c96 <_malloc_r+0xe6>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	442b      	add	r3, r5
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d038      	beq.n	8002ca6 <_malloc_r+0xf6>
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	42a2      	cmp	r2, r4
 8002c38:	d12b      	bne.n	8002c92 <_malloc_r+0xe2>
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e00f      	b.n	8002c60 <_malloc_r+0xb0>
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	1b52      	subs	r2, r2, r5
 8002c44:	d41f      	bmi.n	8002c86 <_malloc_r+0xd6>
 8002c46:	2a0b      	cmp	r2, #11
 8002c48:	d917      	bls.n	8002c7a <_malloc_r+0xca>
 8002c4a:	1961      	adds	r1, r4, r5
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	6025      	str	r5, [r4, #0]
 8002c50:	bf18      	it	ne
 8002c52:	6059      	strne	r1, [r3, #4]
 8002c54:	6863      	ldr	r3, [r4, #4]
 8002c56:	bf08      	it	eq
 8002c58:	f8c8 1000 	streq.w	r1, [r8]
 8002c5c:	5162      	str	r2, [r4, r5]
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	4638      	mov	r0, r7
 8002c62:	f104 060b 	add.w	r6, r4, #11
 8002c66:	f000 f829 	bl	8002cbc <__malloc_unlock>
 8002c6a:	f026 0607 	bic.w	r6, r6, #7
 8002c6e:	1d23      	adds	r3, r4, #4
 8002c70:	1af2      	subs	r2, r6, r3
 8002c72:	d0ae      	beq.n	8002bd2 <_malloc_r+0x22>
 8002c74:	1b9b      	subs	r3, r3, r6
 8002c76:	50a3      	str	r3, [r4, r2]
 8002c78:	e7ab      	b.n	8002bd2 <_malloc_r+0x22>
 8002c7a:	42a3      	cmp	r3, r4
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	d1dd      	bne.n	8002c3c <_malloc_r+0x8c>
 8002c80:	f8c8 2000 	str.w	r2, [r8]
 8002c84:	e7ec      	b.n	8002c60 <_malloc_r+0xb0>
 8002c86:	4623      	mov	r3, r4
 8002c88:	6864      	ldr	r4, [r4, #4]
 8002c8a:	e7ac      	b.n	8002be6 <_malloc_r+0x36>
 8002c8c:	4634      	mov	r4, r6
 8002c8e:	6876      	ldr	r6, [r6, #4]
 8002c90:	e7b4      	b.n	8002bfc <_malloc_r+0x4c>
 8002c92:	4613      	mov	r3, r2
 8002c94:	e7cc      	b.n	8002c30 <_malloc_r+0x80>
 8002c96:	230c      	movs	r3, #12
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f000 f80e 	bl	8002cbc <__malloc_unlock>
 8002ca0:	e797      	b.n	8002bd2 <_malloc_r+0x22>
 8002ca2:	6025      	str	r5, [r4, #0]
 8002ca4:	e7dc      	b.n	8002c60 <_malloc_r+0xb0>
 8002ca6:	605b      	str	r3, [r3, #4]
 8002ca8:	deff      	udf	#255	; 0xff
 8002caa:	bf00      	nop
 8002cac:	20000490 	.word	0x20000490

08002cb0 <__malloc_lock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	; (8002cb8 <__malloc_lock+0x8>)
 8002cb2:	f000 b84b 	b.w	8002d4c <__retarget_lock_acquire_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	200005d4 	.word	0x200005d4

08002cbc <__malloc_unlock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	; (8002cc4 <__malloc_unlock+0x8>)
 8002cbe:	f000 b846 	b.w	8002d4e <__retarget_lock_release_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	200005d4 	.word	0x200005d4

08002cc8 <memset>:
 8002cc8:	4402      	add	r2, r0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d100      	bne.n	8002cd2 <memset+0xa>
 8002cd0:	4770      	bx	lr
 8002cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd6:	e7f9      	b.n	8002ccc <memset+0x4>

08002cd8 <_sbrk_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4d06      	ldr	r5, [pc, #24]	; (8002cf4 <_sbrk_r+0x1c>)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	f7ff fed2 	bl	8002a8c <_sbrk>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d102      	bne.n	8002cf2 <_sbrk_r+0x1a>
 8002cec:	682b      	ldr	r3, [r5, #0]
 8002cee:	b103      	cbz	r3, 8002cf2 <_sbrk_r+0x1a>
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	bd38      	pop	{r3, r4, r5, pc}
 8002cf4:	200005d0 	.word	0x200005d0

08002cf8 <__errno>:
 8002cf8:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <__errno+0x8>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	2000005c 	.word	0x2000005c

08002d04 <__libc_init_array>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	4d0d      	ldr	r5, [pc, #52]	; (8002d3c <__libc_init_array+0x38>)
 8002d08:	4c0d      	ldr	r4, [pc, #52]	; (8002d40 <__libc_init_array+0x3c>)
 8002d0a:	1b64      	subs	r4, r4, r5
 8002d0c:	10a4      	asrs	r4, r4, #2
 8002d0e:	2600      	movs	r6, #0
 8002d10:	42a6      	cmp	r6, r4
 8002d12:	d109      	bne.n	8002d28 <__libc_init_array+0x24>
 8002d14:	4d0b      	ldr	r5, [pc, #44]	; (8002d44 <__libc_init_array+0x40>)
 8002d16:	4c0c      	ldr	r4, [pc, #48]	; (8002d48 <__libc_init_array+0x44>)
 8002d18:	f000 f81a 	bl	8002d50 <_init>
 8002d1c:	1b64      	subs	r4, r4, r5
 8002d1e:	10a4      	asrs	r4, r4, #2
 8002d20:	2600      	movs	r6, #0
 8002d22:	42a6      	cmp	r6, r4
 8002d24:	d105      	bne.n	8002d32 <__libc_init_array+0x2e>
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2c:	4798      	blx	r3
 8002d2e:	3601      	adds	r6, #1
 8002d30:	e7ee      	b.n	8002d10 <__libc_init_array+0xc>
 8002d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d36:	4798      	blx	r3
 8002d38:	3601      	adds	r6, #1
 8002d3a:	e7f2      	b.n	8002d22 <__libc_init_array+0x1e>
 8002d3c:	08002d88 	.word	0x08002d88
 8002d40:	08002d88 	.word	0x08002d88
 8002d44:	08002d88 	.word	0x08002d88
 8002d48:	08002d8c 	.word	0x08002d8c

08002d4c <__retarget_lock_acquire_recursive>:
 8002d4c:	4770      	bx	lr

08002d4e <__retarget_lock_release_recursive>:
 8002d4e:	4770      	bx	lr

08002d50 <_init>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	bf00      	nop
 8002d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d56:	bc08      	pop	{r3}
 8002d58:	469e      	mov	lr, r3
 8002d5a:	4770      	bx	lr

08002d5c <_fini>:
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5e:	bf00      	nop
 8002d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d62:	bc08      	pop	{r3}
 8002d64:	469e      	mov	lr, r3
 8002d66:	4770      	bx	lr
