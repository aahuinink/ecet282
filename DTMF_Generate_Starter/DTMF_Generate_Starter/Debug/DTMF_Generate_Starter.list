
DTMF_Generate_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000295c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ae4  08002ae4  00012ae4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          0000042c  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000043c  2000043c  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012ff3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000029cd  00000000  00000000  00033033  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009ddd  00000000  00000000  00035a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007155  00000000  00000000  00041390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004d7f  00000000  00000000  000484e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004d264  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000024bc  00000000  00000000  0004d2e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002acc 	.word	0x08002acc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002acc 	.word	0x08002acc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fae6 	bl	8000ac0 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 fa9a 	bl	8000a3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	2000000c 	.word	0x2000000c
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fa6b 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f002 f93c 	bl	80027c4 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000040 	.word	0x20000040
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000040 	.word	0x20000040

08000578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800057a:	4604      	mov	r4, r0
 800057c:	2800      	cmp	r0, #0
 800057e:	f000 809b 	beq.w	80006b8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000582:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000584:	b925      	cbnz	r5, 8000590 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000586:	f002 f939 	bl	80027fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800058a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800058c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000592:	06db      	lsls	r3, r3, #27
 8000594:	f100 808e 	bmi.w	80006b4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800059e:	f023 0302 	bic.w	r3, r3, #2
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005a8:	4b44      	ldr	r3, [pc, #272]	; (80006bc <HAL_ADC_Init+0x144>)
 80005aa:	685a      	ldr	r2, [r3, #4]
 80005ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005b0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	6861      	ldr	r1, [r4, #4]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ba:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005bc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005ce:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005d2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005de:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005ee:	4934      	ldr	r1, [pc, #208]	; (80006c0 <HAL_ADC_Init+0x148>)
 80005f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d052      	beq.n	800069c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005f6:	6899      	ldr	r1, [r3, #8]
 80005f8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80005fc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	430a      	orrs	r2, r1
 8000602:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000604:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000606:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800060c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000612:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000614:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000616:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000618:	f022 0202 	bic.w	r2, r2, #2
 800061c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000624:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000626:	f894 2020 	ldrb.w	r2, [r4, #32]
 800062a:	2a00      	cmp	r2, #0
 800062c:	d03e      	beq.n	80006ac <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800062e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000630:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000636:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000638:	685a      	ldr	r2, [r3, #4]
 800063a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800063e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	3901      	subs	r1, #1
 8000644:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000648:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800064a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800064c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800064e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000656:	3901      	subs	r1, #1
 8000658:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800065e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000660:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000664:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000670:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000672:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000674:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800067a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800067c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800067e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000680:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000684:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000686:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800068a:	f023 0303 	bic.w	r3, r3, #3
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000694:	2300      	movs	r3, #0
 8000696:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800069a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006a4:	689a      	ldr	r2, [r3, #8]
 80006a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006aa:	e7b2      	b.n	8000612 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006b2:	e7c9      	b.n	8000648 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
 80006b6:	e7ed      	b.n	8000694 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006b8:	2001      	movs	r0, #1
}
 80006ba:	bd38      	pop	{r3, r4, r5, pc}
 80006bc:	40012300 	.word	0x40012300
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <HAL_ADC_Start_IT>:
{
 80006c4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006c6:	2300      	movs	r3, #0
 80006c8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d067      	beq.n	80007a2 <HAL_ADC_Start_IT+0xde>
 80006d2:	2301      	movs	r3, #1
 80006d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006d8:	6803      	ldr	r3, [r0, #0]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	07d1      	lsls	r1, r2, #31
 80006de:	d505      	bpl.n	80006ec <HAL_ADC_Start_IT+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	07d2      	lsls	r2, r2, #31
 80006e4:	d414      	bmi.n	8000710 <HAL_ADC_Start_IT+0x4c>
  return HAL_OK;
 80006e6:	2000      	movs	r0, #0
}
 80006e8:	b002      	add	sp, #8
 80006ea:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006ec:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006ee:	492e      	ldr	r1, [pc, #184]	; (80007a8 <HAL_ADC_Start_IT+0xe4>)
    __HAL_ADC_ENABLE(hadc);
 80006f0:	f042 0201 	orr.w	r2, r2, #1
 80006f4:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006f6:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <HAL_ADC_Start_IT+0xe8>)
 80006f8:	6812      	ldr	r2, [r2, #0]
 80006fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80006fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000702:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000704:	9a01      	ldr	r2, [sp, #4]
 8000706:	2a00      	cmp	r2, #0
 8000708:	d0ea      	beq.n	80006e0 <HAL_ADC_Start_IT+0x1c>
      counter--;
 800070a:	9a01      	ldr	r2, [sp, #4]
 800070c:	3a01      	subs	r2, #1
 800070e:	e7f8      	b.n	8000702 <HAL_ADC_Start_IT+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000710:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000716:	f022 0201 	bic.w	r2, r2, #1
 800071a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800071e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000724:	bf41      	itttt	mi
 8000726:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000728:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800072c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000730:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000732:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000738:	bf1c      	itt	ne
 800073a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800073c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000740:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000742:	2200      	movs	r2, #0
 8000744:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000748:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800074c:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000754:	f042 0220 	orr.w	r2, r2, #32
 8000758:	605a      	str	r2, [r3, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <HAL_ADC_Start_IT+0xec>)
 800075c:	6851      	ldr	r1, [r2, #4]
 800075e:	f011 0f1f 	tst.w	r1, #31
 8000762:	4914      	ldr	r1, [pc, #80]	; (80007b4 <HAL_ADC_Start_IT+0xf0>)
 8000764:	d11a      	bne.n	800079c <HAL_ADC_Start_IT+0xd8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000766:	428b      	cmp	r3, r1
 8000768:	d006      	beq.n	8000778 <HAL_ADC_Start_IT+0xb4>
 800076a:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800076e:	428b      	cmp	r3, r1
 8000770:	d10b      	bne.n	800078a <HAL_ADC_Start_IT+0xc6>
 8000772:	6852      	ldr	r2, [r2, #4]
 8000774:	06d2      	lsls	r2, r2, #27
 8000776:	d1b6      	bne.n	80006e6 <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000778:	6898      	ldr	r0, [r3, #8]
 800077a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800077e:	d1b2      	bne.n	80006e6 <HAL_ADC_Start_IT+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	e7ae      	b.n	80006e8 <HAL_ADC_Start_IT+0x24>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800078a:	490b      	ldr	r1, [pc, #44]	; (80007b8 <HAL_ADC_Start_IT+0xf4>)
 800078c:	428b      	cmp	r3, r1
 800078e:	d1aa      	bne.n	80006e6 <HAL_ADC_Start_IT+0x22>
 8000790:	6852      	ldr	r2, [r2, #4]
 8000792:	f002 021f 	and.w	r2, r2, #31
 8000796:	2a0f      	cmp	r2, #15
 8000798:	d9ee      	bls.n	8000778 <HAL_ADC_Start_IT+0xb4>
 800079a:	e7a4      	b.n	80006e6 <HAL_ADC_Start_IT+0x22>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800079c:	428b      	cmp	r3, r1
 800079e:	d1a2      	bne.n	80006e6 <HAL_ADC_Start_IT+0x22>
 80007a0:	e7ea      	b.n	8000778 <HAL_ADC_Start_IT+0xb4>
  __HAL_LOCK(hadc);
 80007a2:	2002      	movs	r0, #2
 80007a4:	e7a0      	b.n	80006e8 <HAL_ADC_Start_IT+0x24>
 80007a6:	bf00      	nop
 80007a8:	000f4240 	.word	0x000f4240
 80007ac:	2000000c 	.word	0x2000000c
 80007b0:	40012300 	.word	0x40012300
 80007b4:	40012000 	.word	0x40012000
 80007b8:	40012200 	.word	0x40012200

080007bc <HAL_ADC_LevelOutOfWindowCallback>:
 80007bc:	4770      	bx	lr

080007be <HAL_ADC_ErrorCallback>:
{
 80007be:	4770      	bx	lr

080007c0 <HAL_ADC_IRQHandler>:
{
 80007c0:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80007c2:	6803      	ldr	r3, [r0, #0]
 80007c4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80007c6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80007c8:	078d      	lsls	r5, r1, #30
{
 80007ca:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80007cc:	d52b      	bpl.n	8000826 <HAL_ADC_IRQHandler+0x66>
 80007ce:	0690      	lsls	r0, r2, #26
 80007d0:	d529      	bpl.n	8000826 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007d4:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80007d6:	bf5e      	ittt	pl
 80007d8:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80007da:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80007de:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007e6:	d117      	bne.n	8000818 <HAL_ADC_IRQHandler+0x58>
 80007e8:	7e22      	ldrb	r2, [r4, #24]
 80007ea:	b9aa      	cbnz	r2, 8000818 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80007ee:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80007f2:	d002      	beq.n	80007fa <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80007f4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80007f6:	0552      	lsls	r2, r2, #21
 80007f8:	d40e      	bmi.n	8000818 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	f022 0220 	bic.w	r2, r2, #32
 8000800:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000802:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000808:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800080a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800080c:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800080e:	bf5e      	ittt	pl
 8000810:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000812:	f043 0301 	orrpl.w	r3, r3, #1
 8000816:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000818:	4620      	mov	r0, r4
 800081a:	f001 fe5f 	bl	80024dc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800081e:	6823      	ldr	r3, [r4, #0]
 8000820:	f06f 0212 	mvn.w	r2, #18
 8000824:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800082a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800082c:	074d      	lsls	r5, r1, #29
 800082e:	d532      	bpl.n	8000896 <HAL_ADC_IRQHandler+0xd6>
 8000830:	0610      	lsls	r0, r2, #24
 8000832:	d530      	bpl.n	8000896 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000834:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000836:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000838:	bf5e      	ittt	pl
 800083a:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800083c:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000840:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000848:	d11e      	bne.n	8000888 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800084a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800084c:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000850:	d002      	beq.n	8000858 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000852:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000854:	0552      	lsls	r2, r2, #21
 8000856:	d417      	bmi.n	8000888 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000858:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800085a:	0555      	lsls	r5, r2, #21
 800085c:	d414      	bmi.n	8000888 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800085e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000860:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000864:	d110      	bne.n	8000888 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000866:	7e22      	ldrb	r2, [r4, #24]
 8000868:	b972      	cbnz	r2, 8000888 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000870:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000878:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800087a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800087c:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800087e:	bf5e      	ittt	pl
 8000880:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000882:	f043 0301 	orrpl.w	r3, r3, #1
 8000886:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000888:	4620      	mov	r0, r4
 800088a:	f000 f8c3 	bl	8000a14 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800088e:	6823      	ldr	r3, [r4, #0]
 8000890:	f06f 020c 	mvn.w	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000896:	6823      	ldr	r3, [r4, #0]
 8000898:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800089a:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800089c:	07c9      	lsls	r1, r1, #31
 800089e:	d50f      	bpl.n	80008c0 <HAL_ADC_IRQHandler+0x100>
 80008a0:	0655      	lsls	r5, r2, #25
 80008a2:	d50d      	bpl.n	80008c0 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	07d8      	lsls	r0, r3, #31
 80008a8:	d50a      	bpl.n	80008c0 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80008aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b0:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80008b2:	4620      	mov	r0, r4
 80008b4:	f7ff ff82 	bl	80007bc <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80008b8:	6823      	ldr	r3, [r4, #0]
 80008ba:	f06f 0201 	mvn.w	r2, #1
 80008be:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80008c4:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80008c6:	0689      	lsls	r1, r1, #26
 80008c8:	d50d      	bpl.n	80008e6 <HAL_ADC_IRQHandler+0x126>
 80008ca:	0152      	lsls	r2, r2, #5
 80008cc:	d50b      	bpl.n	80008e6 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008d0:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008d4:	f042 0202 	orr.w	r2, r2, #2
 80008d8:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80008da:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008dc:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80008de:	f7ff ff6e 	bl	80007be <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	601d      	str	r5, [r3, #0]
 80008e6:	bd38      	pop	{r3, r4, r5, pc}

080008e8 <HAL_ADC_ConfigChannel>:
{
 80008e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80008ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	f000 8083 	beq.w	80009fe <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008f8:	680d      	ldr	r5, [r1, #0]
 80008fa:	6804      	ldr	r4, [r0, #0]
 80008fc:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80008fe:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000900:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000902:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000906:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000908:	d92a      	bls.n	8000960 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800090a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800090e:	68e7      	ldr	r7, [r4, #12]
 8000910:	3b1e      	subs	r3, #30
 8000912:	f04f 0e07 	mov.w	lr, #7
 8000916:	fa0e fe03 	lsl.w	lr, lr, r3
 800091a:	ea27 070e 	bic.w	r7, r7, lr
 800091e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000920:	68e7      	ldr	r7, [r4, #12]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	433b      	orrs	r3, r7
 8000928:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800092a:	684a      	ldr	r2, [r1, #4]
 800092c:	2a06      	cmp	r2, #6
 800092e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000932:	d825      	bhi.n	8000980 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000934:	4413      	add	r3, r2
 8000936:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000938:	1f59      	subs	r1, r3, #5
 800093a:	231f      	movs	r3, #31
 800093c:	408b      	lsls	r3, r1
 800093e:	ea27 0303 	bic.w	r3, r7, r3
 8000942:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000944:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000946:	fa06 f101 	lsl.w	r1, r6, r1
 800094a:	4311      	orrs	r1, r2
 800094c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <HAL_ADC_ConfigChannel+0x11c>)
 8000950:	429c      	cmp	r4, r3
 8000952:	d034      	beq.n	80009be <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000954:	2300      	movs	r3, #0
 8000956:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800095a:	4618      	mov	r0, r3
}
 800095c:	b003      	add	sp, #12
 800095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000960:	6927      	ldr	r7, [r4, #16]
 8000962:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000966:	f04f 0e07 	mov.w	lr, #7
 800096a:	fa0e fe03 	lsl.w	lr, lr, r3
 800096e:	ea27 070e 	bic.w	r7, r7, lr
 8000972:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000974:	6927      	ldr	r7, [r4, #16]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	433b      	orrs	r3, r7
 800097c:	6123      	str	r3, [r4, #16]
 800097e:	e7d4      	b.n	800092a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8000980:	2a0c      	cmp	r2, #12
 8000982:	d80e      	bhi.n	80009a2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000984:	4413      	add	r3, r2
 8000986:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000988:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800098c:	231f      	movs	r3, #31
 800098e:	4093      	lsls	r3, r2
 8000990:	ea21 0303 	bic.w	r3, r1, r3
 8000994:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000996:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000998:	fa06 f202 	lsl.w	r2, r6, r2
 800099c:	431a      	orrs	r2, r3
 800099e:	6322      	str	r2, [r4, #48]	; 0x30
 80009a0:	e7d5      	b.n	800094e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009a2:	4413      	add	r3, r2
 80009a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80009a6:	3b41      	subs	r3, #65	; 0x41
 80009a8:	221f      	movs	r2, #31
 80009aa:	409a      	lsls	r2, r3
 80009ac:	ea21 0202 	bic.w	r2, r1, r2
 80009b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80009b4:	fa06 f103 	lsl.w	r1, r6, r3
 80009b8:	4311      	orrs	r1, r2
 80009ba:	62e1      	str	r1, [r4, #44]	; 0x2c
 80009bc:	e7c7      	b.n	800094e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009be:	2d12      	cmp	r5, #18
 80009c0:	d104      	bne.n	80009cc <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <HAL_ADC_ConfigChannel+0x120>)
 80009c4:	6853      	ldr	r3, [r2, #4]
 80009c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ca:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80009cc:	f1a5 0310 	sub.w	r3, r5, #16
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d8bf      	bhi.n	8000954 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <HAL_ADC_ConfigChannel+0x120>)
 80009d6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009d8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80009da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009de:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80009e0:	d1b8      	bne.n	8000954 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_ADC_ConfigChannel+0x124>)
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_ADC_ConfigChannel+0x128>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80009ec:	230a      	movs	r3, #10
 80009ee:	4353      	muls	r3, r2
        counter--;
 80009f0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0ad      	beq.n	8000954 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80009f8:	9b01      	ldr	r3, [sp, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	e7f8      	b.n	80009f0 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80009fe:	2002      	movs	r0, #2
 8000a00:	e7ac      	b.n	800095c <HAL_ADC_ConfigChannel+0x74>
 8000a02:	bf00      	nop
 8000a04:	40012000 	.word	0x40012000
 8000a08:	40012300 	.word	0x40012300
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	000f4240 	.word	0x000f4240

08000a14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a14:	4770      	bx	lr
	...

08000a18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a1a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a20:	041b      	lsls	r3, r3, #16
 8000a22:	0c1b      	lsrs	r3, r3, #16
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	0200      	lsls	r0, r0, #8
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a32:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a34:	60d3      	str	r3, [r2, #12]
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3e:	b530      	push	{r4, r5, lr}
 8000a40:	68dc      	ldr	r4, [r3, #12]
 8000a42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	bf28      	it	cs
 8000a50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 0501 	mov.w	r5, #1
 8000a58:	fa05 f303 	lsl.w	r3, r5, r3
 8000a5c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a60:	bf8c      	ite	hi
 8000a62:	3c03      	subhi	r4, #3
 8000a64:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a66:	4019      	ands	r1, r3
 8000a68:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6a:	fa05 f404 	lsl.w	r4, r5, r4
 8000a6e:	3c01      	subs	r4, #1
 8000a70:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000a72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	ea42 0201 	orr.w	r2, r2, r1
 8000a78:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	bfad      	iteet	ge
 8000a7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	f000 000f 	andlt.w	r0, r0, #15
 8000a86:	4b06      	ldrlt	r3, [pc, #24]	; (8000aa0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	bfb5      	itete	lt
 8000a8e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a98:	bd30      	pop	{r4, r5, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	e000ed14 	.word	0xe000ed14

08000aa4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	db08      	blt.n	8000aba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa8:	0942      	lsrs	r2, r0, #5
 8000aaa:	2301      	movs	r3, #1
 8000aac:	f000 001f 	and.w	r0, r0, #31
 8000ab0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ab4:	4b01      	ldr	r3, [pc, #4]	; (8000abc <HAL_NVIC_EnableIRQ+0x18>)
 8000ab6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	3801      	subs	r0, #1
 8000ac2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac6:	d20a      	bcs.n	8000ade <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000acc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	21f0      	movs	r1, #240	; 0xf0
 8000ad0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ca4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af8:	4a68      	ldr	r2, [pc, #416]	; (8000c9c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000afa:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000ca8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b00:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b02:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000b08:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b10:	45b6      	cmp	lr, r6
 8000b12:	f040 80ae 	bne.w	8000c72 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b16:	684c      	ldr	r4, [r1, #4]
 8000b18:	f024 0710 	bic.w	r7, r4, #16
 8000b1c:	2f02      	cmp	r7, #2
 8000b1e:	d116      	bne.n	8000b4e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000b20:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b24:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b28:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b2c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b34:	f04f 0c0f 	mov.w	ip, #15
 8000b38:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b3c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b40:	690d      	ldr	r5, [r1, #16]
 8000b42:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b46:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b4a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000b4e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b52:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000b54:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b58:	fa05 f50a 	lsl.w	r5, r5, sl
 8000b5c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b62:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b66:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b6c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b70:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000b72:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b76:	d811      	bhi.n	8000b9c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000b78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7e:	68cf      	ldr	r7, [r1, #12]
 8000b80:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000b84:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000b88:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b8a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b90:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000b94:	409f      	lsls	r7, r3
 8000b96:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b9a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b9c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b9e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba0:	688f      	ldr	r7, [r1, #8]
 8000ba2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ba6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ba8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000baa:	00e5      	lsls	r5, r4, #3
 8000bac:	d561      	bpl.n	8000c72 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	f04f 0b00 	mov.w	fp, #0
 8000bb2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000bb6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bba:	4d39      	ldr	r5, [pc, #228]	; (8000ca0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000bc0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000bc4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000bc8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000bcc:	9703      	str	r7, [sp, #12]
 8000bce:	9f03      	ldr	r7, [sp, #12]
 8000bd0:	f023 0703 	bic.w	r7, r3, #3
 8000bd4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000bd8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bdc:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000be0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000be4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000be8:	f04f 0e0f 	mov.w	lr, #15
 8000bec:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bf2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bf6:	d043      	beq.n	8000c80 <HAL_GPIO_Init+0x194>
 8000bf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000bfc:	42a8      	cmp	r0, r5
 8000bfe:	d041      	beq.n	8000c84 <HAL_GPIO_Init+0x198>
 8000c00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c04:	42a8      	cmp	r0, r5
 8000c06:	d03f      	beq.n	8000c88 <HAL_GPIO_Init+0x19c>
 8000c08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	d03d      	beq.n	8000c8c <HAL_GPIO_Init+0x1a0>
 8000c10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c14:	42a8      	cmp	r0, r5
 8000c16:	d03b      	beq.n	8000c90 <HAL_GPIO_Init+0x1a4>
 8000c18:	4548      	cmp	r0, r9
 8000c1a:	d03b      	beq.n	8000c94 <HAL_GPIO_Init+0x1a8>
 8000c1c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c20:	42a8      	cmp	r0, r5
 8000c22:	d039      	beq.n	8000c98 <HAL_GPIO_Init+0x1ac>
 8000c24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c28:	42a8      	cmp	r0, r5
 8000c2a:	bf14      	ite	ne
 8000c2c:	2508      	movne	r5, #8
 8000c2e:	2507      	moveq	r5, #7
 8000c30:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c34:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c38:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000c3a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000c42:	bf0c      	ite	eq
 8000c44:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c46:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000c48:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000c4a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c50:	bf0c      	ite	eq
 8000c52:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c54:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000c56:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c58:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c5e:	bf0c      	ite	eq
 8000c60:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000c62:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000c64:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000c66:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c68:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	bf54      	ite	pl
 8000c6c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000c6e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000c70:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c72:	3301      	adds	r3, #1
 8000c74:	2b10      	cmp	r3, #16
 8000c76:	f47f af44 	bne.w	8000b02 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c7a:	b005      	add	sp, #20
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c80:	465d      	mov	r5, fp
 8000c82:	e7d5      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c84:	2501      	movs	r5, #1
 8000c86:	e7d3      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c88:	2502      	movs	r5, #2
 8000c8a:	e7d1      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c8c:	2503      	movs	r5, #3
 8000c8e:	e7cf      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c90:	2504      	movs	r5, #4
 8000c92:	e7cd      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c94:	2505      	movs	r5, #5
 8000c96:	e7cb      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c98:	2506      	movs	r5, #6
 8000c9a:	e7c9      	b.n	8000c30 <HAL_GPIO_Init+0x144>
 8000c9c:	40013c00 	.word	0x40013c00
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40021400 	.word	0x40021400

08000cac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cac:	b10a      	cbz	r2, 8000cb2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cae:	6181      	str	r1, [r0, #24]
 8000cb0:	4770      	bx	lr
 8000cb2:	0409      	lsls	r1, r1, #16
 8000cb4:	e7fb      	b.n	8000cae <HAL_GPIO_WritePin+0x2>

08000cb6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000cb6:	6801      	ldr	r1, [r0, #0]
 8000cb8:	694b      	ldr	r3, [r1, #20]
 8000cba:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	d010      	beq.n	8000ce6 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cc4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000cc8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000cca:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000ccc:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000cce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cd2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cd6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4770      	bx	lr
  }
  return HAL_OK;
 8000ce6:	4618      	mov	r0, r3
}
 8000ce8:	4770      	bx	lr

08000cea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000cea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4617      	mov	r7, r2
 8000cf2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000cf4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000cf8:	b28e      	uxth	r6, r1
 8000cfa:	6825      	ldr	r5, [r4, #0]
 8000cfc:	f1b8 0f01 	cmp.w	r8, #1
 8000d00:	bf0c      	ite	eq
 8000d02:	696b      	ldreq	r3, [r5, #20]
 8000d04:	69ab      	ldrne	r3, [r5, #24]
 8000d06:	ea36 0303 	bics.w	r3, r6, r3
 8000d0a:	bf14      	ite	ne
 8000d0c:	2001      	movne	r0, #1
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	b908      	cbnz	r0, 8000d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000d16:	696b      	ldr	r3, [r5, #20]
 8000d18:	055a      	lsls	r2, r3, #21
 8000d1a:	d516      	bpl.n	8000d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d24:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000d28:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d2a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000d30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000d38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d3a:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d3e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000d40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
 8000d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000d4a:	1c7b      	adds	r3, r7, #1
 8000d4c:	d0d5      	beq.n	8000cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d4e:	f7ff fc0d 	bl	800056c <HAL_GetTick>
 8000d52:	eba0 0009 	sub.w	r0, r0, r9
 8000d56:	4287      	cmp	r7, r0
 8000d58:	d301      	bcc.n	8000d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8000d5a:	2f00      	cmp	r7, #0
 8000d5c:	d1cd      	bne.n	8000cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d5e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d60:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000d62:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000d64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000d68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000d6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	e7e4      	b.n	8000d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08000d74 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	4604      	mov	r4, r0
 8000d78:	460d      	mov	r5, r1
 8000d7a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	075b      	lsls	r3, r3, #29
 8000d82:	d501      	bpl.n	8000d88 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000d84:	2000      	movs	r0, #0
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f7ff ff94 	bl	8000cb6 <I2C_IsAcknowledgeFailed>
 8000d8e:	b9a8      	cbnz	r0, 8000dbc <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000d90:	1c6a      	adds	r2, r5, #1
 8000d92:	d0f3      	beq.n	8000d7c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d94:	f7ff fbea 	bl	800056c <HAL_GetTick>
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	4285      	cmp	r5, r0
 8000d9c:	d301      	bcc.n	8000da2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	d1ec      	bne.n	8000d7c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000da2:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000da4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000da6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000da8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000db0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000db2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000db6:	f042 0220 	orr.w	r2, r2, #32
 8000dba:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
}
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}

08000dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	460d      	mov	r5, r1
 8000dc6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000dc8:	6820      	ldr	r0, [r4, #0]
 8000dca:	6943      	ldr	r3, [r0, #20]
 8000dcc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000dd0:	d001      	beq.n	8000dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8000dd2:	2000      	movs	r0, #0
}
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000dd6:	6942      	ldr	r2, [r0, #20]
 8000dd8:	06d2      	lsls	r2, r2, #27
 8000dda:	d50e      	bpl.n	8000dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ddc:	f06f 0210 	mvn.w	r2, #16
 8000de0:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000de2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000de4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000de6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000dea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000dee:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000df0:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000df2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000df6:	2001      	movs	r0, #1
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000dfa:	f7ff fbb7 	bl	800056c <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	42a8      	cmp	r0, r5
 8000e02:	d801      	bhi.n	8000e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	d1df      	bne.n	8000dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e08:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e0a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e0c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	e7e8      	b.n	8000df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000e1e <I2C_WaitOnFlagUntilTimeout>:
{
 8000e1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e22:	9e08      	ldr	r6, [sp, #32]
 8000e24:	4604      	mov	r4, r0
 8000e26:	4690      	mov	r8, r2
 8000e28:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000e2a:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000e2e:	b28d      	uxth	r5, r1
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	f1b9 0f01 	cmp.w	r9, #1
 8000e36:	bf0c      	ite	eq
 8000e38:	695b      	ldreq	r3, [r3, #20]
 8000e3a:	699b      	ldrne	r3, [r3, #24]
 8000e3c:	ea35 0303 	bics.w	r3, r5, r3
 8000e40:	bf0c      	ite	eq
 8000e42:	2301      	moveq	r3, #1
 8000e44:	2300      	movne	r3, #0
 8000e46:	4543      	cmp	r3, r8
 8000e48:	d002      	beq.n	8000e50 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000e4a:	2000      	movs	r0, #0
}
 8000e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e50:	1c7b      	adds	r3, r7, #1
 8000e52:	d0ed      	beq.n	8000e30 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000e54:	f7ff fb8a 	bl	800056c <HAL_GetTick>
 8000e58:	1b80      	subs	r0, r0, r6
 8000e5a:	4287      	cmp	r7, r0
 8000e5c:	d301      	bcc.n	8000e62 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000e5e:	2f00      	cmp	r7, #0
 8000e60:	d1e6      	bne.n	8000e30 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e62:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e64:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000e66:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000e68:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000e6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e70:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000e76:	f042 0220 	orr.w	r2, r2, #32
 8000e7a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000e82 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000e82:	b570      	push	{r4, r5, r6, lr}
 8000e84:	4604      	mov	r4, r0
 8000e86:	460d      	mov	r5, r1
 8000e88:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	061b      	lsls	r3, r3, #24
 8000e90:	d501      	bpl.n	8000e96 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000e92:	2000      	movs	r0, #0
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ff0d 	bl	8000cb6 <I2C_IsAcknowledgeFailed>
 8000e9c:	b9a8      	cbnz	r0, 8000eca <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000e9e:	1c6a      	adds	r2, r5, #1
 8000ea0:	d0f3      	beq.n	8000e8a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ea2:	f7ff fb63 	bl	800056c <HAL_GetTick>
 8000ea6:	1b80      	subs	r0, r0, r6
 8000ea8:	4285      	cmp	r5, r0
 8000eaa:	d301      	bcc.n	8000eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d1ec      	bne.n	8000e8a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000eb0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000eb2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000eb4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000eb6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000eba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ebe:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ec0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ec4:	f042 0220 	orr.w	r2, r2, #32
 8000ec8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000eca:	2001      	movs	r0, #1
}
 8000ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ed0 <HAL_I2C_Init>:
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	b908      	cbnz	r0, 8000eda <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ede:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ee2:	b91b      	cbnz	r3, 8000eec <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000ee4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000ee8:	f001 fcc2 	bl	8002870 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000eec:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eee:	2324      	movs	r3, #36	; 0x24
 8000ef0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000efc:	f000 ff84 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f00:	6865      	ldr	r5, [r4, #4]
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <HAL_I2C_Init+0x138>)
 8000f04:	429d      	cmp	r5, r3
 8000f06:	d84d      	bhi.n	8000fa4 <HAL_I2C_Init+0xd4>
 8000f08:	4b40      	ldr	r3, [pc, #256]	; (800100c <HAL_I2C_Init+0x13c>)
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d9e3      	bls.n	8000ed6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f0e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f10:	493f      	ldr	r1, [pc, #252]	; (8001010 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f12:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f14:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f20:	6a13      	ldr	r3, [r2, #32]
 8000f22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f26:	3101      	adds	r1, #1
 8000f28:	4319      	orrs	r1, r3
 8000f2a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f2c:	69d1      	ldr	r1, [r2, #28]
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_I2C_Init+0x138>)
 8000f30:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000f34:	429d      	cmp	r5, r3
 8000f36:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f3a:	f100 30ff 	add.w	r0, r0, #4294967295
 8000f3e:	d848      	bhi.n	8000fd2 <HAL_I2C_Init+0x102>
 8000f40:	006d      	lsls	r5, r5, #1
 8000f42:	fbb0 f0f5 	udiv	r0, r0, r5
 8000f46:	3001      	adds	r0, #1
 8000f48:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	bf38      	it	cc
 8000f50:	2304      	movcc	r3, #4
 8000f52:	430b      	orrs	r3, r1
 8000f54:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f56:	6811      	ldr	r1, [r2, #0]
 8000f58:	6a20      	ldr	r0, [r4, #32]
 8000f5a:	69e3      	ldr	r3, [r4, #28]
 8000f5c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f60:	4303      	orrs	r3, r0
 8000f62:	430b      	orrs	r3, r1
 8000f64:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f66:	6891      	ldr	r1, [r2, #8]
 8000f68:	68e0      	ldr	r0, [r4, #12]
 8000f6a:	6923      	ldr	r3, [r4, #16]
 8000f6c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000f70:	4303      	orrs	r3, r0
 8000f72:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f7a:	68d1      	ldr	r1, [r2, #12]
 8000f7c:	69a0      	ldr	r0, [r4, #24]
 8000f7e:	6963      	ldr	r3, [r4, #20]
 8000f80:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f84:	4303      	orrs	r3, r0
 8000f86:	430b      	orrs	r3, r1
 8000f88:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f92:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000f94:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f96:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f9e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_I2C_Init+0x144>)
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	d995      	bls.n	8000ed6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000faa:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fac:	4e18      	ldr	r6, [pc, #96]	; (8001010 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fae:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fb0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb8:	4333      	orrs	r3, r6
 8000fba:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fbc:	6a13      	ldr	r3, [r2, #32]
 8000fbe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000fc2:	4371      	muls	r1, r6
 8000fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000fcc:	fbb1 f1f6 	udiv	r1, r1, r6
 8000fd0:	e7a9      	b.n	8000f26 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fd2:	68a3      	ldr	r3, [r4, #8]
 8000fd4:	b953      	cbnz	r3, 8000fec <HAL_I2C_Init+0x11c>
 8000fd6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000fda:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fde:	1c43      	adds	r3, r0, #1
 8000fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe4:	b16b      	cbz	r3, 8001002 <HAL_I2C_Init+0x132>
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fea:	e7b2      	b.n	8000f52 <HAL_I2C_Init+0x82>
 8000fec:	2319      	movs	r3, #25
 8000fee:	436b      	muls	r3, r5
 8000ff0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffa:	b113      	cbz	r3, 8001002 <HAL_I2C_Init+0x132>
 8000ffc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001000:	e7a7      	b.n	8000f52 <HAL_I2C_Init+0x82>
 8001002:	2301      	movs	r3, #1
 8001004:	e7a5      	b.n	8000f52 <HAL_I2C_Init+0x82>
 8001006:	bf00      	nop
 8001008:	000186a0 	.word	0x000186a0
 800100c:	001e847f 	.word	0x001e847f
 8001010:	000f4240 	.word	0x000f4240
 8001014:	003d08ff 	.word	0x003d08ff

08001018 <HAL_I2C_Master_Transmit>:
{
 8001018:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800101c:	4604      	mov	r4, r0
 800101e:	461f      	mov	r7, r3
 8001020:	460d      	mov	r5, r1
 8001022:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff faa2 	bl	800056c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001028:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800102c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800102e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001030:	d004      	beq.n	800103c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001032:	2502      	movs	r5, #2
}
 8001034:	4628      	mov	r0, r5
 8001036:	b004      	add	sp, #16
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800103c:	9000      	str	r0, [sp, #0]
 800103e:	2319      	movs	r3, #25
 8001040:	2201      	movs	r2, #1
 8001042:	4958      	ldr	r1, [pc, #352]	; (80011a4 <HAL_I2C_Master_Transmit+0x18c>)
 8001044:	4620      	mov	r0, r4
 8001046:	f7ff feea 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 800104a:	2800      	cmp	r0, #0
 800104c:	d1f1      	bne.n	8001032 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800104e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001052:	2b01      	cmp	r3, #1
 8001054:	d0ed      	beq.n	8001032 <HAL_I2C_Master_Transmit+0x1a>
 8001056:	2301      	movs	r3, #1
 8001058:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001062:	bf5e      	ittt	pl
 8001064:	681a      	ldrpl	r2, [r3, #0]
 8001066:	f042 0201 	orrpl.w	r2, r2, #1
 800106a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001072:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001074:	2221      	movs	r2, #33	; 0x21
 8001076:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800107a:	2210      	movs	r2, #16
 800107c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001080:	2200      	movs	r2, #0
 8001082:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001084:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001086:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001088:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800108a:	4a47      	ldr	r2, [pc, #284]	; (80011a8 <HAL_I2C_Master_Transmit+0x190>)
 800108c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800108e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001090:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001094:	2a08      	cmp	r2, #8
 8001096:	d004      	beq.n	80010a2 <HAL_I2C_Master_Transmit+0x8a>
 8001098:	2a01      	cmp	r2, #1
 800109a:	d002      	beq.n	80010a2 <HAL_I2C_Master_Transmit+0x8a>
 800109c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80010a0:	d104      	bne.n	80010ac <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e002      	b.n	80010b2 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80010ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010ae:	2a12      	cmp	r2, #18
 80010b0:	d0f7      	beq.n	80010a2 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010b2:	9600      	str	r6, [sp, #0]
 80010b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff feae 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 80010c2:	b108      	cbz	r0, 80010c8 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 80010c4:	2501      	movs	r5, #1
 80010c6:	e7b5      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010c8:	6923      	ldr	r3, [r4, #16]
 80010ca:	6822      	ldr	r2, [r4, #0]
 80010cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010d0:	d113      	bne.n	80010fa <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80010d2:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80010d6:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80010d8:	4633      	mov	r3, r6
 80010da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80010dc:	4933      	ldr	r1, [pc, #204]	; (80011ac <HAL_I2C_Master_Transmit+0x194>)
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff fe03 	bl	8000cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80010e4:	4605      	mov	r5, r0
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d1ec      	bne.n	80010c4 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	9003      	str	r0, [sp, #12]
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	9203      	str	r2, [sp, #12]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80010f8:	e044      	b.n	8001184 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80010fa:	11eb      	asrs	r3, r5, #7
 80010fc:	f003 0306 	and.w	r3, r3, #6
 8001100:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001104:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001106:	492a      	ldr	r1, [pc, #168]	; (80011b0 <HAL_I2C_Master_Transmit+0x198>)
 8001108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800110a:	4633      	mov	r3, r6
 800110c:	4620      	mov	r0, r4
 800110e:	f7ff fdec 	bl	8000cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001112:	2800      	cmp	r0, #0
 8001114:	d1d6      	bne.n	80010c4 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001116:	6823      	ldr	r3, [r4, #0]
 8001118:	b2ed      	uxtb	r5, r5
 800111a:	611d      	str	r5, [r3, #16]
 800111c:	e7dc      	b.n	80010d8 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800111e:	4632      	mov	r2, r6
 8001120:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001122:	4620      	mov	r0, r4
 8001124:	f7ff fead 	bl	8000e82 <I2C_WaitOnTXEFlagUntilTimeout>
 8001128:	b140      	cbz	r0, 800113c <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800112a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800112c:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800112e:	bf01      	itttt	eq
 8001130:	6822      	ldreq	r2, [r4, #0]
 8001132:	6813      	ldreq	r3, [r2, #0]
 8001134:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001138:	6013      	streq	r3, [r2, #0]
 800113a:	e7c3      	b.n	80010c4 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800113c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800113e:	6820      	ldr	r0, [r4, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001146:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001148:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800114a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800114c:	3a01      	subs	r2, #1
 800114e:	b292      	uxth	r2, r2
 8001150:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001152:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001154:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001156:	1e51      	subs	r1, r2, #1
 8001158:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800115a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800115c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800115e:	d50a      	bpl.n	8001176 <HAL_I2C_Master_Transmit+0x15e>
 8001160:	b149      	cbz	r1, 8001176 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001162:	7859      	ldrb	r1, [r3, #1]
 8001164:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001166:	3302      	adds	r3, #2
 8001168:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800116a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800116c:	3b01      	subs	r3, #1
 800116e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001170:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001172:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001174:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001176:	4632      	mov	r2, r6
 8001178:	990a      	ldr	r1, [sp, #40]	; 0x28
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff fdfa 	bl	8000d74 <I2C_WaitOnBTFFlagUntilTimeout>
 8001180:	2800      	cmp	r0, #0
 8001182:	d1d2      	bne.n	800112a <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001184:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1c9      	bne.n	800111e <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800118a:	6821      	ldr	r1, [r4, #0]
 800118c:	680a      	ldr	r2, [r1, #0]
 800118e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001192:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001194:	2220      	movs	r2, #32
 8001196:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800119a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800119e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80011a2:	e747      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1c>
 80011a4:	00100002 	.word	0x00100002
 80011a8:	ffff0000 	.word	0xffff0000
 80011ac:	00010002 	.word	0x00010002
 80011b0:	00010008 	.word	0x00010008

080011b4 <HAL_I2C_Master_Receive>:
{
 80011b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b8:	4604      	mov	r4, r0
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	4698      	mov	r8, r3
 80011be:	460f      	mov	r7, r1
 80011c0:	4691      	mov	r9, r2
 80011c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff f9d2 	bl	800056c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80011cc:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80011ce:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d0:	d004      	beq.n	80011dc <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80011d2:	2702      	movs	r7, #2
}
 80011d4:	4638      	mov	r0, r7
 80011d6:	b009      	add	sp, #36	; 0x24
 80011d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011dc:	9000      	str	r0, [sp, #0]
 80011de:	2319      	movs	r3, #25
 80011e0:	2201      	movs	r2, #1
 80011e2:	49a6      	ldr	r1, [pc, #664]	; (800147c <HAL_I2C_Master_Receive+0x2c8>)
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff fe1a 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d1f1      	bne.n	80011d2 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80011ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d0ed      	beq.n	80011d2 <HAL_I2C_Master_Receive+0x1e>
 80011f6:	2301      	movs	r3, #1
 80011f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001202:	bf5e      	ittt	pl
 8001204:	681a      	ldrpl	r2, [r3, #0]
 8001206:	f042 0201 	orrpl.w	r2, r2, #1
 800120a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001212:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001214:	2222      	movs	r2, #34	; 0x22
 8001216:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800121a:	2210      	movs	r2, #16
 800121c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001220:	2200      	movs	r2, #0
 8001222:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001224:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001228:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800122a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_I2C_Master_Receive+0x2cc>)
 800122e:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001230:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001232:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8001234:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001238:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800123c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800123e:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001240:	d004      	beq.n	800124c <HAL_I2C_Master_Receive+0x98>
 8001242:	2a01      	cmp	r2, #1
 8001244:	d002      	beq.n	800124c <HAL_I2C_Master_Receive+0x98>
 8001246:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800124a:	d104      	bne.n	8001256 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	e002      	b.n	800125c <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001256:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001258:	2a11      	cmp	r2, #17
 800125a:	d0f7      	beq.n	800124c <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800125c:	9500      	str	r5, [sp, #0]
 800125e:	4633      	mov	r3, r6
 8001260:	2200      	movs	r2, #0
 8001262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001266:	4620      	mov	r0, r4
 8001268:	f7ff fdd9 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 800126c:	b108      	cbz	r0, 8001272 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 800126e:	2701      	movs	r7, #1
 8001270:	e7b0      	b.n	80011d4 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001272:	6923      	ldr	r3, [r4, #16]
 8001274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	d140      	bne.n	80012fe <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800127c:	f047 0701 	orr.w	r7, r7, #1
 8001280:	b2ff      	uxtb	r7, r7
 8001282:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001284:	462b      	mov	r3, r5
 8001286:	4632      	mov	r2, r6
 8001288:	497e      	ldr	r1, [pc, #504]	; (8001484 <HAL_I2C_Master_Receive+0x2d0>)
 800128a:	4620      	mov	r0, r4
 800128c:	f7ff fd2d 	bl	8000cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001290:	4607      	mov	r7, r0
 8001292:	2800      	cmp	r0, #0
 8001294:	d1eb      	bne.n	800126e <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001296:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	2a00      	cmp	r2, #0
 800129c:	d063      	beq.n	8001366 <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 800129e:	2a01      	cmp	r2, #1
 80012a0:	d174      	bne.n	800138c <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012aa:	9704      	str	r7, [sp, #16]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	9204      	str	r2, [sp, #16]
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	9204      	str	r2, [sp, #16]
 80012b4:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012bc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012be:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800148c <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 80012c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d058      	beq.n	800137a <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	f200 80ba 	bhi.w	8001442 <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d177      	bne.n	80013c2 <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d2:	462a      	mov	r2, r5
 80012d4:	4631      	mov	r1, r6
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7ff fd72 	bl	8000dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1c6      	bne.n	800126e <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012e0:	6822      	ldr	r2, [r4, #0]
 80012e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012e4:	6912      	ldr	r2, [r2, #16]
 80012e6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80012e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012ea:	3301      	adds	r3, #1
 80012ec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80012ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80012f0:	3b01      	subs	r3, #1
 80012f2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80012f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80012fc:	e7e1      	b.n	80012c2 <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80012fe:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8001302:	f008 0806 	and.w	r8, r8, #6
 8001306:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800130a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800130c:	495e      	ldr	r1, [pc, #376]	; (8001488 <HAL_I2C_Master_Receive+0x2d4>)
 800130e:	462b      	mov	r3, r5
 8001310:	4632      	mov	r2, r6
 8001312:	4620      	mov	r0, r4
 8001314:	f7ff fce9 	bl	8000cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001318:	2800      	cmp	r0, #0
 800131a:	d1a8      	bne.n	800126e <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800131c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800131e:	4959      	ldr	r1, [pc, #356]	; (8001484 <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001320:	b2ff      	uxtb	r7, r7
 8001322:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001324:	4632      	mov	r2, r6
 8001326:	462b      	mov	r3, r5
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff fcde 	bl	8000cea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800132e:	4602      	mov	r2, r0
 8001330:	2800      	cmp	r0, #0
 8001332:	d19c      	bne.n	800126e <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	9007      	str	r0, [sp, #28]
 8001338:	6959      	ldr	r1, [r3, #20]
 800133a:	9107      	str	r1, [sp, #28]
 800133c:	6999      	ldr	r1, [r3, #24]
 800133e:	9107      	str	r1, [sp, #28]
 8001340:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001342:	6819      	ldr	r1, [r3, #0]
 8001344:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001348:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800134a:	4620      	mov	r0, r4
 800134c:	9500      	str	r5, [sp, #0]
 800134e:	4633      	mov	r3, r6
 8001350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001354:	f7ff fd63 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 8001358:	2800      	cmp	r0, #0
 800135a:	d188      	bne.n	800126e <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001362:	6113      	str	r3, [r2, #16]
 8001364:	e78e      	b.n	8001284 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001366:	9703      	str	r7, [sp, #12]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	9203      	str	r2, [sp, #12]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	9203      	str	r2, [sp, #12]
 8001370:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001378:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800137a:	2320      	movs	r3, #32
 800137c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	2300      	movs	r3, #0
 8001382:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001386:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800138a:	e723      	b.n	80011d4 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 800138c:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800138e:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001390:	d10d      	bne.n	80013ae <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001396:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800139e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a0:	9705      	str	r7, [sp, #20]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	9205      	str	r2, [sp, #20]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	9305      	str	r3, [sp, #20]
 80013aa:	9b05      	ldr	r3, [sp, #20]
 80013ac:	e787      	b.n	80012be <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013b2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b4:	9706      	str	r7, [sp, #24]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	9206      	str	r2, [sp, #24]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	9306      	str	r3, [sp, #24]
 80013be:	9b06      	ldr	r3, [sp, #24]
 80013c0:	e77d      	b.n	80012be <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 80013c2:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013c4:	9500      	str	r5, [sp, #0]
 80013c6:	4633      	mov	r3, r6
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4641      	mov	r1, r8
 80013ce:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80013d0:	d11a      	bne.n	8001408 <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013d2:	f7ff fd24 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	f47f af49 	bne.w	800126e <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80013ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013ee:	1c53      	adds	r3, r2, #1
 80013f0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80013f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80013f4:	3b01      	subs	r3, #1
 80013f6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80013f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80013fa:	3b01      	subs	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001400:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	7053      	strb	r3, [r2, #1]
 8001406:	e76f      	b.n	80012e8 <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001408:	f7ff fd09 	bl	8000e1e <I2C_WaitOnFlagUntilTimeout>
 800140c:	4602      	mov	r2, r0
 800140e:	2800      	cmp	r0, #0
 8001410:	f47f af2d 	bne.w	800126e <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800141c:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800141e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001424:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001426:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001428:	3301      	adds	r3, #1
 800142a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800142c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800142e:	3b01      	subs	r3, #1
 8001430:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001432:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001434:	3b01      	subs	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800143a:	4641      	mov	r1, r8
 800143c:	4633      	mov	r3, r6
 800143e:	4620      	mov	r0, r4
 8001440:	e7c7      	b.n	80013d2 <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001442:	462a      	mov	r2, r5
 8001444:	4631      	mov	r1, r6
 8001446:	4620      	mov	r0, r4
 8001448:	f7ff fcba 	bl	8000dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800144c:	2800      	cmp	r0, #0
 800144e:	f47f af0e 	bne.w	800126e <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001456:	6912      	ldr	r2, [r2, #16]
 8001458:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800145a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145c:	1c53      	adds	r3, r2, #1
 800145e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001460:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001462:	3b01      	subs	r3, #1
 8001464:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001466:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001468:	3b01      	subs	r3, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	6959      	ldr	r1, [r3, #20]
 8001472:	0749      	lsls	r1, r1, #29
 8001474:	f57f af25 	bpl.w	80012c2 <HAL_I2C_Master_Receive+0x10e>
 8001478:	e7c3      	b.n	8001402 <HAL_I2C_Master_Receive+0x24e>
 800147a:	bf00      	nop
 800147c:	00100002 	.word	0x00100002
 8001480:	ffff0000 	.word	0xffff0000
 8001484:	00010002 	.word	0x00010002
 8001488:	00010008 	.word	0x00010008
 800148c:	00010004 	.word	0x00010004

08001490 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001492:	4604      	mov	r4, r0
 8001494:	2800      	cmp	r0, #0
 8001496:	d041      	beq.n	800151c <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001498:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800149c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014a0:	b92b      	cbnz	r3, 80014ae <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80014a2:	4b42      	ldr	r3, [pc, #264]	; (80015ac <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 80014a4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80014a8:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80014aa:	f001 fa19 	bl	80028e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80014ae:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80014b0:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80014b2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80014b6:	69d3      	ldr	r3, [r2, #28]
 80014b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80014c2:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80014c4:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80014c6:	428b      	cmp	r3, r1
 80014c8:	d031      	beq.n	800152e <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80014ca:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80014cc:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80014ce:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 80014d0:	bf0c      	ite	eq
 80014d2:	2510      	moveq	r5, #16
 80014d4:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80014d6:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80014d8:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80014da:	bf98      	it	ls
 80014dc:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80014de:	f000 fd3b 	bl	8001f58 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80014e2:	6923      	ldr	r3, [r4, #16]
 80014e4:	6961      	ldr	r1, [r4, #20]
 80014e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ea:	d11b      	bne.n	8001524 <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80014ec:	68e3      	ldr	r3, [r4, #12]
 80014ee:	220a      	movs	r2, #10
 80014f0:	b1b3      	cbz	r3, 8001520 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014f2:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f8:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80014fa:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80014fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001500:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001502:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001506:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800150a:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800150c:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800150e:	1e99      	subs	r1, r3, #2
 8001510:	29fd      	cmp	r1, #253	; 0xfd
 8001512:	d90e      	bls.n	8001532 <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800151c:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 800151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001520:	00eb      	lsls	r3, r5, #3
 8001522:	e7e7      	b.n	80014f4 <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001524:	230a      	movs	r3, #10
 8001526:	fbb0 f0f5 	udiv	r0, r0, r5
 800152a:	4343      	muls	r3, r0
 800152c:	e7e5      	b.n	80014fa <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 800152e:	2200      	movs	r2, #0
 8001530:	e7ed      	b.n	800150e <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001532:	4313      	orrs	r3, r2
 8001534:	6922      	ldr	r2, [r4, #16]
 8001536:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001538:	6866      	ldr	r6, [r4, #4]
 800153a:	68e5      	ldr	r5, [r4, #12]
 800153c:	69a0      	ldr	r0, [r4, #24]
 800153e:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80015bc <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001542:	4313      	orrs	r3, r2
 8001544:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001546:	68a3      	ldr	r3, [r4, #8]
 8001548:	69cf      	ldr	r7, [r1, #28]
 800154a:	ea46 0203 	orr.w	r2, r6, r3
 800154e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001552:	432a      	orrs	r2, r5
 8001554:	4302      	orrs	r2, r0
 8001556:	ea07 070e 	and.w	r7, r7, lr
 800155a:	433a      	orrs	r2, r7
 800155c:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800155e:	6a22      	ldr	r2, [r4, #32]
 8001560:	2a01      	cmp	r2, #1
 8001562:	d11d      	bne.n	80015a0 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <HAL_I2S_Init+0x120>)
 8001566:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001568:	4f12      	ldr	r7, [pc, #72]	; (80015b4 <HAL_I2S_Init+0x124>)
 800156a:	4a13      	ldr	r2, [pc, #76]	; (80015b8 <HAL_I2S_Init+0x128>)
 800156c:	42b9      	cmp	r1, r7
 800156e:	bf18      	it	ne
 8001570:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001574:	432b      	orrs	r3, r5
 8001576:	69d1      	ldr	r1, [r2, #28]
 8001578:	ea01 010e 	and.w	r1, r1, lr
 800157c:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800157e:	2102      	movs	r1, #2
 8001580:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001582:	69d7      	ldr	r7, [r2, #28]
 8001584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001588:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 800158a:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 800158e:	ea43 0307 	orr.w	r3, r3, r7
 8001592:	bf0c      	ite	eq
 8001594:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001598:	2100      	movne	r1, #0
 800159a:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800159c:	430b      	orrs	r3, r1
 800159e:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015a0:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80015a2:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80015a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80015aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ac:	0800163b 	.word	0x0800163b
 80015b0:	08001739 	.word	0x08001739
 80015b4:	40003800 	.word	0x40003800
 80015b8:	40003400 	.word	0x40003400
 80015bc:	fffff040 	.word	0xfffff040

080015c0 <HAL_I2S_Transmit_IT>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_IT(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80015c0:	b510      	push	{r4, lr}
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d033      	beq.n	800162e <HAL_I2S_Transmit_IT+0x6e>
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	d031      	beq.n	800162e <HAL_I2S_Transmit_IT+0x6e>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80015ca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d00a      	beq.n	80015e8 <HAL_I2S_Transmit_IT+0x28>
 80015d2:	2301      	movs	r3, #1
 80015d4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80015d8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015dc:	2b01      	cmp	r3, #1
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_I2S_Transmit_IT+0x2c>
  {
    __HAL_UNLOCK(hi2s);
 80015e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 80015e8:	2002      	movs	r0, #2
    __HAL_I2S_ENABLE(hi2s);
  }

  __HAL_UNLOCK(hi2s);
  return HAL_OK;
}
 80015ea:	bd10      	pop	{r4, pc}
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80015ec:	2403      	movs	r4, #3
 80015ee:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80015f2:	6443      	str	r3, [r0, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015f4:	6803      	ldr	r3, [r0, #0]
  hi2s->pTxBuffPtr = pData;
 80015f6:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015f8:	69d9      	ldr	r1, [r3, #28]
 80015fa:	f001 0107 	and.w	r1, r1, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80015fe:	42a1      	cmp	r1, r4
 8001600:	d001      	beq.n	8001606 <HAL_I2S_Transmit_IT+0x46>
 8001602:	2905      	cmp	r1, #5
 8001604:	d101      	bne.n	800160a <HAL_I2S_Transmit_IT+0x4a>
    hi2s->TxXferSize = (Size << 1U);
 8001606:	0052      	lsls	r2, r2, #1
 8001608:	b292      	uxth	r2, r2
    hi2s->TxXferSize = Size;
 800160a:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800160c:	8542      	strh	r2, [r0, #42]	; 0x2a
  __HAL_I2S_ENABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8001614:	605a      	str	r2, [r3, #4]
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 800161a:	bf5e      	ittt	pl
 800161c:	69da      	ldrpl	r2, [r3, #28]
 800161e:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8001622:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 8001624:	2300      	movs	r3, #0
 8001626:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 800162a:	4618      	mov	r0, r3
 800162c:	bd10      	pop	{r4, pc}
    return  HAL_ERROR;
 800162e:	2001      	movs	r0, #1
 8001630:	bd10      	pop	{r4, pc}

08001632 <HAL_I2S_IRQHandler>:
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001632:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001634:	4718      	bx	r3

08001636 <HAL_I2S_RxCpltCallback>:
 8001636:	4770      	bx	lr

08001638 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001638:	4770      	bx	lr

0800163a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800163a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001642:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001646:	2a04      	cmp	r2, #4
{
 8001648:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800164a:	d136      	bne.n	80016ba <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800164c:	9a01      	ldr	r2, [sp, #4]
 800164e:	07d1      	lsls	r1, r2, #31
 8001650:	d517      	bpl.n	8001682 <I2S_IRQHandler+0x48>
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	0652      	lsls	r2, r2, #25
 8001656:	d514      	bpl.n	8001682 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001658:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800165a:	68d9      	ldr	r1, [r3, #12]
 800165c:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8001660:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001662:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001664:	3a01      	subs	r2, #1
 8001666:	b292      	uxth	r2, r2
 8001668:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800166a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800166c:	b292      	uxth	r2, r2
 800166e:	b942      	cbnz	r2, 8001682 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001676:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001678:	2301      	movs	r3, #1
 800167a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 800167e:	f7ff ffda 	bl	8001636 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001682:	9b01      	ldr	r3, [sp, #4]
 8001684:	0659      	lsls	r1, r3, #25
 8001686:	d518      	bpl.n	80016ba <I2S_IRQHandler+0x80>
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	0692      	lsls	r2, r2, #26
 800168e:	d514      	bpl.n	80016ba <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001696:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001698:	2200      	movs	r2, #0
 800169a:	9202      	str	r2, [sp, #8]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	9202      	str	r2, [sp, #8]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80016ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80016b4:	4620      	mov	r0, r4
 80016b6:	f7ff ffbf 	bl	8001638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80016ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d136      	bne.n	8001730 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	079b      	lsls	r3, r3, #30
 80016c6:	d519      	bpl.n	80016fc <I2S_IRQHandler+0xc2>
 80016c8:	6822      	ldr	r2, [r4, #0]
 80016ca:	6853      	ldr	r3, [r2, #4]
 80016cc:	0618      	lsls	r0, r3, #24
 80016ce:	d515      	bpl.n	80016fc <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80016d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80016d6:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 80016d8:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80016da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29b      	uxth	r3, r3
 80016e0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80016e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b94b      	cbnz	r3, 80016fc <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80016e8:	6853      	ldr	r3, [r2, #4]
 80016ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80016ee:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80016f6:	4620      	mov	r0, r4
 80016f8:	f000 feaa 	bl	8002450 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80016fc:	9b01      	ldr	r3, [sp, #4]
 80016fe:	0719      	lsls	r1, r3, #28
 8001700:	d516      	bpl.n	8001730 <I2S_IRQHandler+0xf6>
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	0692      	lsls	r2, r2, #26
 8001708:	d512      	bpl.n	8001730 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001710:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001712:	2200      	movs	r2, #0
 8001714:	9203      	str	r2, [sp, #12]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800171c:	2301      	movs	r3, #1
 800171e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff ff84 	bl	8001638 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001730:	b004      	add	sp, #16
 8001732:	bd10      	pop	{r4, pc}

08001734 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001734:	4770      	bx	lr
	...

08001738 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001738:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800173a:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800173c:	498b      	ldr	r1, [pc, #556]	; (800196c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800173e:	6893      	ldr	r3, [r2, #8]
{
 8001740:	b086      	sub	sp, #24
 8001742:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001744:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001746:	4b8a      	ldr	r3, [pc, #552]	; (8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001748:	428a      	cmp	r2, r1
 800174a:	bf18      	it	ne
 800174c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001754:	6851      	ldr	r1, [r2, #4]
 8001756:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800175c:	6841      	ldr	r1, [r0, #4]
 800175e:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8001762:	f040 8090 	bne.w	8001886 <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	0799      	lsls	r1, r3, #30
 800176a:	d51a      	bpl.n	80017a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 800176c:	9b02      	ldr	r3, [sp, #8]
 800176e:	061b      	lsls	r3, r3, #24
 8001770:	d517      	bpl.n	80017a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001772:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001774:	1c99      	adds	r1, r3, #2
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	6241      	str	r1, [r0, #36]	; 0x24
 800177a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800177c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800177e:	3b01      	subs	r3, #1
 8001780:	b29b      	uxth	r3, r3
 8001782:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001784:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	b95b      	cbnz	r3, 80017a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800178a:	6853      	ldr	r3, [r2, #4]
 800178c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001790:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001792:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001794:	b29b      	uxth	r3, r3
 8001796:	b923      	cbnz	r3, 80017a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001798:	2301      	movs	r3, #1
 800179a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800179e:	f7ff ffc9 	bl	8001734 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80017a2:	9b01      	ldr	r3, [sp, #4]
 80017a4:	07d8      	lsls	r0, r3, #31
 80017a6:	d522      	bpl.n	80017ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80017a8:	9b03      	ldr	r3, [sp, #12]
 80017aa:	0659      	lsls	r1, r3, #25
 80017ac:	d51f      	bpl.n	80017ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80017ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017b0:	6820      	ldr	r0, [r4, #0]
 80017b2:	496e      	ldr	r1, [pc, #440]	; (800196c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80017b4:	1c93      	adds	r3, r2, #2
 80017b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 80017ba:	4288      	cmp	r0, r1
 80017bc:	bf18      	it	ne
 80017be:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80017c6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80017c8:	3a01      	subs	r2, #1
 80017ca:	b292      	uxth	r2, r2
 80017cc:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80017ce:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80017d0:	b292      	uxth	r2, r2
 80017d2:	b962      	cbnz	r2, 80017ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80017da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80017dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b92b      	cbnz	r3, 80017ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80017e2:	2301      	movs	r3, #1
 80017e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff ffa3 	bl	8001734 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80017ee:	9b01      	ldr	r3, [sp, #4]
 80017f0:	065a      	lsls	r2, r3, #25
 80017f2:	d522      	bpl.n	800183a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	069b      	lsls	r3, r3, #26
 80017f8:	d51f      	bpl.n	800183a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	495b      	ldr	r1, [pc, #364]	; (800196c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 80017fe:	4a5c      	ldr	r2, [pc, #368]	; (8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001800:	428b      	cmp	r3, r1
 8001802:	bf18      	it	ne
 8001804:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001808:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800180a:	6851      	ldr	r1, [r2, #4]
 800180c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001810:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001818:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800181a:	2200      	movs	r2, #0
 800181c:	9204      	str	r2, [sp, #16]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	9204      	str	r2, [sp, #16]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	9304      	str	r3, [sp, #16]
 8001826:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001828:	2301      	movs	r3, #1
 800182a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800182e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001836:	f7ff feff 	bl	8001638 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800183a:	9b00      	ldr	r3, [sp, #0]
 800183c:	0718      	lsls	r0, r3, #28
 800183e:	d520      	bpl.n	8001882 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001840:	9b02      	ldr	r3, [sp, #8]
 8001842:	0699      	lsls	r1, r3, #26
 8001844:	d51d      	bpl.n	8001882 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001846:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001848:	4948      	ldr	r1, [pc, #288]	; (800196c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001850:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001852:	4a47      	ldr	r2, [pc, #284]	; (8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001854:	428b      	cmp	r3, r1
 8001856:	bf18      	it	ne
 8001858:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800185c:	6851      	ldr	r1, [r2, #4]
 800185e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001862:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001864:	2200      	movs	r2, #0
 8001866:	9205      	str	r2, [sp, #20]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	9305      	str	r3, [sp, #20]
 800186c:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 800186e:	2301      	movs	r3, #1
 8001870:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001874:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fedb 	bl	8001638 <HAL_I2S_ErrorCallback>
}
 8001882:	b006      	add	sp, #24
 8001884:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001886:	9a01      	ldr	r2, [sp, #4]
 8001888:	0792      	lsls	r2, r2, #30
 800188a:	d51a      	bpl.n	80018c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 800188c:	9a03      	ldr	r2, [sp, #12]
 800188e:	0611      	lsls	r1, r2, #24
 8001890:	d517      	bpl.n	80018c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001892:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001894:	1c91      	adds	r1, r2, #2
 8001896:	8812      	ldrh	r2, [r2, #0]
 8001898:	6241      	str	r1, [r0, #36]	; 0x24
 800189a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800189c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800189e:	3a01      	subs	r2, #1
 80018a0:	b292      	uxth	r2, r2
 80018a2:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80018a4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80018a6:	b292      	uxth	r2, r2
 80018a8:	b95a      	cbnz	r2, 80018c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018b0:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 80018b2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b923      	cbnz	r3, 80018c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 80018b8:	2301      	movs	r3, #1
 80018ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018be:	f7ff ff39 	bl	8001734 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80018c2:	9b00      	ldr	r3, [sp, #0]
 80018c4:	07da      	lsls	r2, r3, #31
 80018c6:	d51c      	bpl.n	8001902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80018c8:	9b02      	ldr	r3, [sp, #8]
 80018ca:	065b      	lsls	r3, r3, #25
 80018cc:	d519      	bpl.n	8001902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80018ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018d0:	1c9a      	adds	r2, r3, #2
 80018d2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80018d4:	6822      	ldr	r2, [r4, #0]
 80018d6:	68d1      	ldr	r1, [r2, #12]
 80018d8:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80018da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80018dc:	3b01      	subs	r3, #1
 80018de:	b29b      	uxth	r3, r3
 80018e0:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80018e2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b963      	cbnz	r3, 8001902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e8:	6853      	ldr	r3, [r2, #4]
 80018ea:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80018ee:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80018f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	b92b      	cbnz	r3, 8001902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff ff19 	bl	8001734 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001902:	9b00      	ldr	r3, [sp, #0]
 8001904:	0658      	lsls	r0, r3, #25
 8001906:	d51b      	bpl.n	8001940 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001908:	9b02      	ldr	r3, [sp, #8]
 800190a:	0699      	lsls	r1, r3, #26
 800190c:	d518      	bpl.n	8001940 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800190e:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001910:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001912:	6853      	ldr	r3, [r2, #4]
 8001914:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001918:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 800191c:	428a      	cmp	r2, r1
 800191e:	bf18      	it	ne
 8001920:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001924:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800192c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800192e:	2301      	movs	r3, #1
 8001930:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001934:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800193c:	f7ff fe7c 	bl	8001638 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001940:	9b01      	ldr	r3, [sp, #4]
 8001942:	071a      	lsls	r2, r3, #28
 8001944:	d59d      	bpl.n	8001882 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001946:	9b03      	ldr	r3, [sp, #12]
 8001948:	069b      	lsls	r3, r3, #26
 800194a:	d59a      	bpl.n	8001882 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800194c:	6822      	ldr	r2, [r4, #0]
 800194e:	4907      	ldr	r1, [pc, #28]	; (800196c <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001952:	428a      	cmp	r2, r1
 8001954:	bf18      	it	ne
 8001956:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001960:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001962:	6853      	ldr	r3, [r2, #4]
 8001964:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001968:	6053      	str	r3, [r2, #4]
 800196a:	e780      	b.n	800186e <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 800196c:	40003800 	.word	0x40003800
 8001970:	40003400 	.word	0x40003400

08001974 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	4604      	mov	r4, r0
 800197a:	b918      	cbnz	r0, 8001984 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800197c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800197e:	b002      	add	sp, #8
 8001980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001984:	6803      	ldr	r3, [r0, #0]
 8001986:	07dd      	lsls	r5, r3, #31
 8001988:	d410      	bmi.n	80019ac <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	6823      	ldr	r3, [r4, #0]
 800198c:	0798      	lsls	r0, r3, #30
 800198e:	d458      	bmi.n	8001a42 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	071a      	lsls	r2, r3, #28
 8001994:	f100 809a 	bmi.w	8001acc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	075b      	lsls	r3, r3, #29
 800199c:	f100 80b8 	bmi.w	8001b10 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a0:	69a2      	ldr	r2, [r4, #24]
 80019a2:	2a00      	cmp	r2, #0
 80019a4:	f040 8119 	bne.w	8001bda <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80019a8:	2000      	movs	r0, #0
 80019aa:	e7e8      	b.n	800197e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ac:	4ba6      	ldr	r3, [pc, #664]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	f002 020c 	and.w	r2, r2, #12
 80019b4:	2a04      	cmp	r2, #4
 80019b6:	d007      	beq.n	80019c8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	2a08      	cmp	r2, #8
 80019c0:	d10a      	bne.n	80019d8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0259      	lsls	r1, r3, #9
 80019c6:	d507      	bpl.n	80019d8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b9f      	ldr	r3, [pc, #636]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	039a      	lsls	r2, r3, #14
 80019ce:	d5dc      	bpl.n	800198a <HAL_RCC_OscConfig+0x16>
 80019d0:	6863      	ldr	r3, [r4, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1d9      	bne.n	800198a <HAL_RCC_OscConfig+0x16>
 80019d6:	e7d1      	b.n	800197c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	6863      	ldr	r3, [r4, #4]
 80019da:	4d9b      	ldr	r5, [pc, #620]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d111      	bne.n	8001a06 <HAL_RCC_OscConfig+0x92>
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019ea:	f7fe fdbf 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4d96      	ldr	r5, [pc, #600]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80019f0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	039b      	lsls	r3, r3, #14
 80019f6:	d4c8      	bmi.n	800198a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7fe fdb8 	bl	800056c <HAL_GetTick>
 80019fc:	1b80      	subs	r0, r0, r6
 80019fe:	2864      	cmp	r0, #100	; 0x64
 8001a00:	d9f7      	bls.n	80019f2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001a02:	2003      	movs	r0, #3
 8001a04:	e7bb      	b.n	800197e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0a:	d104      	bne.n	8001a16 <HAL_RCC_OscConfig+0xa2>
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a12:	602b      	str	r3, [r5, #0]
 8001a14:	e7e5      	b.n	80019e2 <HAL_RCC_OscConfig+0x6e>
 8001a16:	682a      	ldr	r2, [r5, #0]
 8001a18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a1c:	602a      	str	r2, [r5, #0]
 8001a1e:	682a      	ldr	r2, [r5, #0]
 8001a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a24:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1df      	bne.n	80019ea <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001a2a:	f7fe fd9f 	bl	800056c <HAL_GetTick>
 8001a2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	039f      	lsls	r7, r3, #14
 8001a34:	d5a9      	bpl.n	800198a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a36:	f7fe fd99 	bl	800056c <HAL_GetTick>
 8001a3a:	1b80      	subs	r0, r0, r6
 8001a3c:	2864      	cmp	r0, #100	; 0x64
 8001a3e:	d9f7      	bls.n	8001a30 <HAL_RCC_OscConfig+0xbc>
 8001a40:	e7df      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a42:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	f012 0f0c 	tst.w	r2, #12
 8001a4a:	d007      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a52:	2a08      	cmp	r2, #8
 8001a54:	d111      	bne.n	8001a7a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	025e      	lsls	r6, r3, #9
 8001a5a:	d40e      	bmi.n	8001a7a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	0795      	lsls	r5, r2, #30
 8001a62:	d502      	bpl.n	8001a6a <HAL_RCC_OscConfig+0xf6>
 8001a64:	68e2      	ldr	r2, [r4, #12]
 8001a66:	2a01      	cmp	r2, #1
 8001a68:	d188      	bne.n	800197c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6921      	ldr	r1, [r4, #16]
 8001a6e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a78:	e78a      	b.n	8001990 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a7a:	68e2      	ldr	r2, [r4, #12]
 8001a7c:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <HAL_RCC_OscConfig+0x2d8>)
 8001a7e:	b1b2      	cbz	r2, 8001aae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a84:	f7fe fd72 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4d6f      	ldr	r5, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	0798      	lsls	r0, r3, #30
 8001a90:	d507      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	6922      	ldr	r2, [r4, #16]
 8001a96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a9e:	602b      	str	r3, [r5, #0]
 8001aa0:	e776      	b.n	8001990 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa2:	f7fe fd63 	bl	800056c <HAL_GetTick>
 8001aa6:	1b80      	subs	r0, r0, r6
 8001aa8:	2802      	cmp	r0, #2
 8001aaa:	d9ef      	bls.n	8001a8c <HAL_RCC_OscConfig+0x118>
 8001aac:	e7a9      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001aae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fd5c 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab4:	4d64      	ldr	r5, [pc, #400]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001ab6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	0799      	lsls	r1, r3, #30
 8001abc:	f57f af68 	bpl.w	8001990 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7fe fd54 	bl	800056c <HAL_GetTick>
 8001ac4:	1b80      	subs	r0, r0, r6
 8001ac6:	2802      	cmp	r0, #2
 8001ac8:	d9f6      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x144>
 8001aca:	e79a      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001acc:	6962      	ldr	r2, [r4, #20]
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_RCC_OscConfig+0x2dc>)
 8001ad0:	b17a      	cbz	r2, 8001af2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ad6:	f7fe fd49 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	4d5b      	ldr	r5, [pc, #364]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001adc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ae0:	079f      	lsls	r7, r3, #30
 8001ae2:	f53f af59 	bmi.w	8001998 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7fe fd41 	bl	800056c <HAL_GetTick>
 8001aea:	1b80      	subs	r0, r0, r6
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d9f6      	bls.n	8001ade <HAL_RCC_OscConfig+0x16a>
 8001af0:	e787      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001af2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001af4:	f7fe fd3a 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4d53      	ldr	r5, [pc, #332]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001afa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001afe:	0798      	lsls	r0, r3, #30
 8001b00:	f57f af4a 	bpl.w	8001998 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b04:	f7fe fd32 	bl	800056c <HAL_GetTick>
 8001b08:	1b80      	subs	r0, r0, r6
 8001b0a:	2802      	cmp	r0, #2
 8001b0c:	d9f6      	bls.n	8001afc <HAL_RCC_OscConfig+0x188>
 8001b0e:	e778      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b10:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 8001b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b14:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001b18:	d128      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b2e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4d48      	ldr	r5, [pc, #288]	; (8001c54 <HAL_RCC_OscConfig+0x2e0>)
 8001b32:	682b      	ldr	r3, [r5, #0]
 8001b34:	05d9      	lsls	r1, r3, #23
 8001b36:	d51b      	bpl.n	8001b70 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b38:	68a3      	ldr	r3, [r4, #8]
 8001b3a:	4d43      	ldr	r5, [pc, #268]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d127      	bne.n	8001b90 <HAL_RCC_OscConfig+0x21c>
 8001b40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b48:	f7fe fd10 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4c:	4d3e      	ldr	r5, [pc, #248]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b4e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b56:	079b      	lsls	r3, r3, #30
 8001b58:	d539      	bpl.n	8001bce <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001b5a:	2e00      	cmp	r6, #0
 8001b5c:	f43f af20 	beq.w	80019a0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 8001b62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	e719      	b.n	80019a0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	e7df      	b.n	8001b30 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b70:	682b      	ldr	r3, [r5, #0]
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b78:	f7fe fcf8 	bl	800056c <HAL_GetTick>
 8001b7c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	05da      	lsls	r2, r3, #23
 8001b82:	d4d9      	bmi.n	8001b38 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	f7fe fcf2 	bl	800056c <HAL_GetTick>
 8001b88:	1bc0      	subs	r0, r0, r7
 8001b8a:	2802      	cmp	r0, #2
 8001b8c:	d9f7      	bls.n	8001b7e <HAL_RCC_OscConfig+0x20a>
 8001b8e:	e738      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d104      	bne.n	8001b9e <HAL_RCC_OscConfig+0x22a>
 8001b94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	672b      	str	r3, [r5, #112]	; 0x70
 8001b9c:	e7d0      	b.n	8001b40 <HAL_RCC_OscConfig+0x1cc>
 8001b9e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	672a      	str	r2, [r5, #112]	; 0x70
 8001ba6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001ba8:	f022 0204 	bic.w	r2, r2, #4
 8001bac:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ca      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001bb2:	f7fe fcdb 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bba:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bbe:	0798      	lsls	r0, r3, #30
 8001bc0:	d5cb      	bpl.n	8001b5a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7fe fcd3 	bl	800056c <HAL_GetTick>
 8001bc6:	1bc0      	subs	r0, r0, r7
 8001bc8:	4540      	cmp	r0, r8
 8001bca:	d9f7      	bls.n	8001bbc <HAL_RCC_OscConfig+0x248>
 8001bcc:	e719      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7fe fccd 	bl	800056c <HAL_GetTick>
 8001bd2:	1bc0      	subs	r0, r0, r7
 8001bd4:	4540      	cmp	r0, r8
 8001bd6:	d9bd      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1e0>
 8001bd8:	e713      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bda:	4d1b      	ldr	r5, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
 8001bdc:	68ab      	ldr	r3, [r5, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	f43f aeca 	beq.w	800197c <HAL_RCC_OscConfig+0x8>
 8001be8:	4e1b      	ldr	r6, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x2e4>)
 8001bea:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001bee:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	d134      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fcbb 	bl	800056c <HAL_GetTick>
 8001bf6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	0199      	lsls	r1, r3, #6
 8001bfc:	d41e      	bmi.n	8001c3c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfe:	6a22      	ldr	r2, [r4, #32]
 8001c00:	69e3      	ldr	r3, [r4, #28]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	4c0d      	ldr	r4, [pc, #52]	; (8001c48 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c14:	0852      	lsrs	r2, r2, #1
 8001c16:	3a01      	subs	r2, #1
 8001c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c1c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c1e:	2301      	movs	r3, #1
 8001c20:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001c22:	f7fe fca3 	bl	800056c <HAL_GetTick>
 8001c26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	019a      	lsls	r2, r3, #6
 8001c2c:	f53f aebc 	bmi.w	80019a8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7fe fc9c 	bl	800056c <HAL_GetTick>
 8001c34:	1b40      	subs	r0, r0, r5
 8001c36:	2802      	cmp	r0, #2
 8001c38:	d9f6      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2b4>
 8001c3a:	e6e2      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7fe fc96 	bl	800056c <HAL_GetTick>
 8001c40:	1bc0      	subs	r0, r0, r7
 8001c42:	2802      	cmp	r0, #2
 8001c44:	d9d8      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x284>
 8001c46:	e6dc      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
 8001c54:	40007000 	.word	0x40007000
 8001c58:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001c5c:	f7fe fc86 	bl	800056c <HAL_GetTick>
 8001c60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	682b      	ldr	r3, [r5, #0]
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	f57f ae9f 	bpl.w	80019a8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe fc7f 	bl	800056c <HAL_GetTick>
 8001c6e:	1b00      	subs	r0, r0, r4
 8001c70:	2802      	cmp	r0, #2
 8001c72:	d9f6      	bls.n	8001c62 <HAL_RCC_OscConfig+0x2ee>
 8001c74:	e6c5      	b.n	8001a02 <HAL_RCC_OscConfig+0x8e>
 8001c76:	bf00      	nop

08001c78 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c7a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c7c:	688b      	ldr	r3, [r1, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x16>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d003      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c8a:	4810      	ldr	r0, [pc, #64]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c8c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c8e:	4810      	ldr	r0, [pc, #64]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c90:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c92:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c94:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9c:	bf14      	ite	ne
 8001c9e:	480c      	ldrne	r0, [pc, #48]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca0:	480a      	ldreq	r0, [pc, #40]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ca6:	bf18      	it	ne
 8001ca8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001caa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cae:	fba1 0100 	umull	r0, r1, r1, r0
 8001cb2:	f7fe fa89 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001cc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc6:	bd08      	pop	{r3, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200

08001cd4 <HAL_RCC_ClockConfig>:
{
 8001cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cda:	4604      	mov	r4, r0
 8001cdc:	b910      	cbnz	r0, 8001ce4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cde:	2001      	movs	r0, #1
 8001ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCC_ClockConfig+0x124>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f002 020f 	and.w	r2, r2, #15
 8001cec:	428a      	cmp	r2, r1
 8001cee:	d328      	bcc.n	8001d42 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	6821      	ldr	r1, [r4, #0]
 8001cf2:	078f      	lsls	r7, r1, #30
 8001cf4:	d42d      	bmi.n	8001d52 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf6:	07c8      	lsls	r0, r1, #31
 8001cf8:	d440      	bmi.n	8001d7c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_ClockConfig+0x124>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f002 020f 	and.w	r2, r2, #15
 8001d02:	4295      	cmp	r5, r2
 8001d04:	d366      	bcc.n	8001dd4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	6822      	ldr	r2, [r4, #0]
 8001d08:	0751      	lsls	r1, r2, #29
 8001d0a:	d46c      	bmi.n	8001de6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	0713      	lsls	r3, r2, #28
 8001d0e:	d507      	bpl.n	8001d20 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d10:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_RCC_ClockConfig+0x128>)
 8001d12:	6921      	ldr	r1, [r4, #16]
 8001d14:	6893      	ldr	r3, [r2, #8]
 8001d16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d20:	f7ff ffaa 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001d24:	4b35      	ldr	r3, [pc, #212]	; (8001dfc <HAL_RCC_ClockConfig+0x128>)
 8001d26:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <HAL_RCC_ClockConfig+0x12c>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	40d8      	lsrs	r0, r3
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_ClockConfig+0x130>)
 8001d34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7fe fbce 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	4299      	cmp	r1, r3
 8001d4e:	d1c6      	bne.n	8001cde <HAL_RCC_ClockConfig+0xa>
 8001d50:	e7ce      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1c>
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d58:	bf1e      	ittt	ne
 8001d5a:	689a      	ldrne	r2, [r3, #8]
 8001d5c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d60:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d64:	bf42      	ittt	mi
 8001d66:	689a      	ldrmi	r2, [r3, #8]
 8001d68:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d6c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	68a0      	ldr	r0, [r4, #8]
 8001d72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d76:	4302      	orrs	r2, r0
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	e7bc      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7c:	6862      	ldr	r2, [r4, #4]
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_ClockConfig+0x128>)
 8001d80:	2a01      	cmp	r2, #1
 8001d82:	d11d      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	d0a8      	beq.n	8001cde <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8c:	4e1b      	ldr	r6, [pc, #108]	; (8001dfc <HAL_RCC_ClockConfig+0x128>)
 8001d8e:	68b3      	ldr	r3, [r6, #8]
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d98:	f7fe fbe8 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001da0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	68b3      	ldr	r3, [r6, #8]
 8001da4:	6862      	ldr	r2, [r4, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001dae:	d0a4      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe fbdc 	bl	800056c <HAL_GetTick>
 8001db4:	1bc0      	subs	r0, r0, r7
 8001db6:	4540      	cmp	r0, r8
 8001db8:	d9f3      	bls.n	8001da2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001dba:	2003      	movs	r0, #3
}
 8001dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc0:	1e91      	subs	r1, r2, #2
 8001dc2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc6:	d802      	bhi.n	8001dce <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dcc:	e7dd      	b.n	8001d8a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	f013 0f02 	tst.w	r3, #2
 8001dd2:	e7da      	b.n	8001d8a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd4:	b2ea      	uxtb	r2, r5
 8001dd6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	429d      	cmp	r5, r3
 8001de0:	f47f af7d 	bne.w	8001cde <HAL_RCC_ClockConfig+0xa>
 8001de4:	e78f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de6:	4905      	ldr	r1, [pc, #20]	; (8001dfc <HAL_RCC_ClockConfig+0x128>)
 8001de8:	68e0      	ldr	r0, [r4, #12]
 8001dea:	688b      	ldr	r3, [r1, #8]
 8001dec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001df0:	4303      	orrs	r3, r0
 8001df2:	608b      	str	r3, [r1, #8]
 8001df4:	e78a      	b.n	8001d0c <HAL_RCC_ClockConfig+0x38>
 8001df6:	bf00      	nop
 8001df8:	40023c00 	.word	0x40023c00
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	08002ae4 	.word	0x08002ae4
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001e16:	6810      	ldr	r0, [r2, #0]
}
 8001e18:	40d8      	lsrs	r0, r3
 8001e1a:	4770      	bx	lr
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	08002af4 	.word	0x08002af4
 8001e24:	2000000c 	.word	0x2000000c

08001e28 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e28:	6803      	ldr	r3, [r0, #0]
 8001e2a:	f013 0f05 	tst.w	r3, #5
{
 8001e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e30:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e32:	d105      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e34:	6828      	ldr	r0, [r5, #0]
 8001e36:	f010 0002 	ands.w	r0, r0, #2
 8001e3a:	d128      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8001e3c:	b003      	add	sp, #12
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001e40:	4c41      	ldr	r4, [pc, #260]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e42:	4e42      	ldr	r6, [pc, #264]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001e48:	f7fe fb90 	bl	800056c <HAL_GetTick>
 8001e4c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e4e:	6833      	ldr	r3, [r6, #0]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	d415      	bmi.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001e54:	68ab      	ldr	r3, [r5, #8]
 8001e56:	686a      	ldr	r2, [r5, #4]
 8001e58:	071b      	lsls	r3, r3, #28
 8001e5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e5e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001e62:	2301      	movs	r3, #1
 8001e64:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001e66:	f7fe fb81 	bl	800056c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6a:	4c38      	ldr	r4, [pc, #224]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8001e6c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	0118      	lsls	r0, r3, #4
 8001e72:	d4df      	bmi.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e74:	f7fe fb7a 	bl	800056c <HAL_GetTick>
 8001e78:	1b80      	subs	r0, r0, r6
 8001e7a:	2802      	cmp	r0, #2
 8001e7c:	d9f7      	bls.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x46>
 8001e7e:	e004      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e80:	f7fe fb74 	bl	800056c <HAL_GetTick>
 8001e84:	1bc0      	subs	r0, r0, r7
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d9e1      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	e7d6      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001e94:	4c2e      	ldr	r4, [pc, #184]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eae:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fb5c 	bl	800056c <HAL_GetTick>
 8001eb4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	05d9      	lsls	r1, r3, #23
 8001eba:	d51b      	bpl.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ebc:	4c23      	ldr	r4, [pc, #140]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ebe:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ec0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ec4:	d11c      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ec6:	68eb      	ldr	r3, [r5, #12]
 8001ec8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ecc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001ed2:	d134      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001ed4:	6891      	ldr	r1, [r2, #8]
 8001ed6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001eda:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001ede:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001ee2:	4301      	orrs	r1, r0
 8001ee4:	6091      	str	r1, [r2, #8]
 8001ee6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e7a3      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe fb3a 	bl	800056c <HAL_GetTick>
 8001ef8:	1b80      	subs	r0, r0, r6
 8001efa:	2802      	cmp	r0, #2
 8001efc:	d9db      	bls.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8001efe:	e7c4      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f00:	68ea      	ldr	r2, [r5, #12]
 8001f02:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d0dd      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f0c:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f16:	2100      	movs	r1, #0
 8001f18:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001f1a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001f1e:	07da      	lsls	r2, r3, #31
 8001f20:	d5d1      	bpl.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8001f22:	f7fe fb23 	bl	800056c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001f2e:	079b      	lsls	r3, r3, #30
 8001f30:	d4c9      	bmi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7fe fb1b 	bl	800056c <HAL_GetTick>
 8001f36:	1b80      	subs	r0, r0, r6
 8001f38:	42b8      	cmp	r0, r7
 8001f3a:	d9f7      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001f3c:	e7a5      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3e:	6891      	ldr	r1, [r2, #8]
 8001f40:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f44:	e7ce      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8001f46:	bf00      	nop
 8001f48:	42470068 	.word	0x42470068
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000
 8001f54:	42470e40 	.word	0x42470e40

08001f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8001f58:	2801      	cmp	r0, #1
 8001f5a:	d120      	bne.n	8001f9e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8001f60:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8001f64:	d004      	beq.n	8001f70 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8001f66:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8001f6a:	bf18      	it	ne
 8001f6c:	2000      	movne	r0, #0
 8001f6e:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f70:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f74:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f76:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001f78:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f7c:	bf4c      	ite	mi
 8001f7e:	4b0b      	ldrmi	r3, [pc, #44]	; (8001fac <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f80:	4b0b      	ldrpl	r3, [pc, #44]	; (8001fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f82:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f86:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001f8a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001f8e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8001f92:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001f94:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001f98:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001f9c:	4770      	bx	lr
  uint32_t frequency = 0U;
 8001f9e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00bb8000 	.word	0x00bb8000
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	00f42400 	.word	0x00f42400

08001fb4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fba:	6803      	ldr	r3, [r0, #0]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc2:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001fc4:	bf1e      	ittt	ne
 8001fc6:	681a      	ldrne	r2, [r3, #0]
 8001fc8:	f042 0201 	orrne.w	r2, r2, #1
 8001fcc:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	4770      	bx	lr

08001fd8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	4a30      	ldr	r2, [pc, #192]	; (800209c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001fda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	4290      	cmp	r0, r2
 8001fde:	d012      	beq.n	8002006 <TIM_Base_SetConfig+0x2e>
 8001fe0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0x2e>
 8001fe6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0x2e>
 8001fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0x2e>
 8001ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0x2e>
 8001ffe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002002:	4290      	cmp	r0, r2
 8002004:	d119      	bne.n	800203a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002006:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800200c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200e:	4a23      	ldr	r2, [pc, #140]	; (800209c <TIM_Base_SetConfig+0xc4>)
 8002010:	4290      	cmp	r0, r2
 8002012:	d029      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002018:	d026      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 800201a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800201e:	4290      	cmp	r0, r2
 8002020:	d022      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002026:	4290      	cmp	r0, r2
 8002028:	d01e      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 800202a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800202e:	4290      	cmp	r0, r2
 8002030:	d01a      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002032:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002036:	4290      	cmp	r0, r2
 8002038:	d016      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 800203a:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <TIM_Base_SetConfig+0xc8>)
 800203c:	4290      	cmp	r0, r2
 800203e:	d013      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002044:	4290      	cmp	r0, r2
 8002046:	d00f      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002048:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800204c:	4290      	cmp	r0, r2
 800204e:	d00b      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002050:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002054:	4290      	cmp	r0, r2
 8002056:	d007      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002058:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800205c:	4290      	cmp	r0, r2
 800205e:	d003      	beq.n	8002068 <TIM_Base_SetConfig+0x90>
 8002060:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002064:	4290      	cmp	r0, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002068:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800206a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	694a      	ldr	r2, [r1, #20]
 8002072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002076:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002078:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800207a:	688b      	ldr	r3, [r1, #8]
 800207c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207e:	680b      	ldr	r3, [r1, #0]
 8002080:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <TIM_Base_SetConfig+0xc4>)
 8002084:	4298      	cmp	r0, r3
 8002086:	d003      	beq.n	8002090 <TIM_Base_SetConfig+0xb8>
 8002088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208c:	4298      	cmp	r0, r3
 800208e:	d101      	bne.n	8002094 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002090:	690b      	ldr	r3, [r1, #16]
 8002092:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002094:	2301      	movs	r3, #1
 8002096:	6143      	str	r3, [r0, #20]
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40014000 	.word	0x40014000

080020a4 <HAL_TIM_Base_Init>:
{
 80020a4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020a6:	4604      	mov	r4, r0
 80020a8:	b1a0      	cbz	r0, 80020d4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020b2:	b91b      	cbnz	r3, 80020bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020b8:	f000 fc66 	bl	8002988 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	2302      	movs	r3, #2
 80020be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	1d21      	adds	r1, r4, #4
 80020c6:	f7ff ff87 	bl	8001fd8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020d0:	2000      	movs	r0, #0
 80020d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020d4:	2001      	movs	r0, #1
}
 80020d6:	bd10      	pop	{r4, pc}

080020d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020d8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020da:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020dc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020de:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020e6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020e8:	6083      	str	r3, [r0, #8]
 80020ea:	bd10      	pop	{r4, pc}

080020ec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020f0:	2b01      	cmp	r3, #1
{
 80020f2:	b570      	push	{r4, r5, r6, lr}
 80020f4:	4604      	mov	r4, r0
 80020f6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80020fa:	d019      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002100:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002102:	2301      	movs	r3, #1
 8002104:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002108:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800210e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002112:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002114:	680b      	ldr	r3, [r1, #0]
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d065      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0xfa>
 800211a:	d815      	bhi.n	8002148 <HAL_TIM_ConfigClockSource+0x5c>
 800211c:	2b10      	cmp	r3, #16
 800211e:	d00c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x4e>
 8002120:	d807      	bhi.n	8002132 <HAL_TIM_ConfigClockSource+0x46>
 8002122:	b153      	cbz	r3, 800213a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002124:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002126:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002128:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800212c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002130:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002132:	2b20      	cmp	r3, #32
 8002134:	d001      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x4e>
 8002136:	2b30      	cmp	r3, #48	; 0x30
 8002138:	d1f4      	bne.n	8002124 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800213a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800213c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002140:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002144:	4313      	orrs	r3, r2
 8002146:	e01a      	b.n	800217e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002148:	2b60      	cmp	r3, #96	; 0x60
 800214a:	d034      	beq.n	80021b6 <HAL_TIM_ConfigClockSource+0xca>
 800214c:	d819      	bhi.n	8002182 <HAL_TIM_ConfigClockSource+0x96>
 800214e:	2b50      	cmp	r3, #80	; 0x50
 8002150:	d1e8      	bne.n	8002124 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002152:	684a      	ldr	r2, [r1, #4]
 8002154:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002156:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002158:	6a05      	ldr	r5, [r0, #32]
 800215a:	f025 0501 	bic.w	r5, r5, #1
 800215e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002160:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002162:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800216a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800216e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002170:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002172:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002174:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800217a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800217e:	6083      	str	r3, [r0, #8]
 8002180:	e7d0      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002182:	2b70      	cmp	r3, #112	; 0x70
 8002184:	d00c      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0xb4>
 8002186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218a:	d1cb      	bne.n	8002124 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800218c:	68cb      	ldr	r3, [r1, #12]
 800218e:	684a      	ldr	r2, [r1, #4]
 8002190:	6889      	ldr	r1, [r1, #8]
 8002192:	f7ff ffa1 	bl	80020d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	6893      	ldr	r3, [r2, #8]
 800219a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219e:	e008      	b.n	80021b2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80021a0:	68cb      	ldr	r3, [r1, #12]
 80021a2:	684a      	ldr	r2, [r1, #4]
 80021a4:	6889      	ldr	r1, [r1, #8]
 80021a6:	f7ff ff97 	bl	80020d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021aa:	6822      	ldr	r2, [r4, #0]
 80021ac:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b2:	6093      	str	r3, [r2, #8]
      break;
 80021b4:	e7b6      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021b6:	684d      	ldr	r5, [r1, #4]
 80021b8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021ba:	6a01      	ldr	r1, [r0, #32]
 80021bc:	f021 0110 	bic.w	r1, r1, #16
 80021c0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80021c4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021c6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021d2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021d6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021d8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021da:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021e0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80021e4:	e7cb      	b.n	800217e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e6:	684a      	ldr	r2, [r1, #4]
 80021e8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021ea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ec:	6a05      	ldr	r5, [r0, #32]
 80021ee:	f025 0501 	bic.w	r5, r5, #1
 80021f2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021f4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021f6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021fe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002202:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002204:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002206:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002208:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800220e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002212:	e7b4      	b.n	800217e <HAL_TIM_ConfigClockSource+0x92>

08002214 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002214:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
{
 800221a:	b530      	push	{r4, r5, lr}
 800221c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002220:	d014      	beq.n	800224c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002222:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002228:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800222a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800222c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800222e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002230:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002238:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800223a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800223c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800223e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002240:	2301      	movs	r3, #1
 8002242:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002246:	2300      	movs	r3, #0
 8002248:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800224c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800224e:	bd30      	pop	{r4, r5, pc}

08002250 <CS43L22_write>:
	// Write 0x00 to register 0x00.
	CS43L22_write( 0x00, 0x00, 2);
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
}

void CS43L22_write(uint8_t reg, uint8_t Cmd, uint8_t len){
 8002250:	b507      	push	{r0, r1, r2, lr}

	uint8_t iData[2]; // Buffer to read, change and write back register values of the DAC
	iData[0] =  reg;
 8002252:	f88d 0004 	strb.w	r0, [sp, #4]
	iData[1] = Cmd;
 8002256:	f88d 1005 	strb.w	r1, [sp, #5]

	CS43L22_EXTERNAL_DAC_I2C_write(iData,len);
 800225a:	a801      	add	r0, sp, #4
 800225c:	4611      	mov	r1, r2
 800225e:	f000 fa8d 	bl	800277c <CS43L22_EXTERNAL_DAC_I2C_write>


}
 8002262:	b003      	add	sp, #12
 8002264:	f85d fb04 	ldr.w	pc, [sp], #4

08002268 <CS43L22_init>:
void CS43L22_init(){
 8002268:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CS43L22_EXTERNAL_DAC_enable();
 800226a:	f000 faa3 	bl	80027b4 <CS43L22_EXTERNAL_DAC_enable>
	CS43L22_write( CS43L22_REG_POWER_CTL1, 0x01, 2);
 800226e:	2202      	movs	r2, #2
 8002270:	4610      	mov	r0, r2
 8002272:	2101      	movs	r1, #1
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002274:	ac02      	add	r4, sp, #8
	CS43L22_write( CS43L22_REG_POWER_CTL1, 0x01, 2);
 8002276:	f7ff ffeb 	bl	8002250 <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL2, 0xAF, 2);
 800227a:	2202      	movs	r2, #2
 800227c:	21af      	movs	r1, #175	; 0xaf
 800227e:	2004      	movs	r0, #4
 8002280:	f7ff ffe6 	bl	8002250 <CS43L22_write>
	CS43L22_write( CS43L22_REG_CLOCKING_CTL,(1 << 7), 2); //Tal vez tenga que poner 0x81 para dividir clock
 8002284:	2202      	movs	r2, #2
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	2005      	movs	r0, #5
 800228a:	f7ff ffe1 	bl	8002250 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 800228e:	f814 1d03 	ldrb.w	r1, [r4, #-3]!
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002292:	2006      	movs	r0, #6
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 8002294:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_INTERFACE_CTL1;
 8002296:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);// Transmit register address to the device ...
 800229a:	f7ff ffd9 	bl	8002250 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]); // ... and read 1 byte (the register content).
 800229e:	4620      	mov	r0, r4
 80022a0:	f000 fa7a 	bl	8002798 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80022a4:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 80022a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80022ac:	f001 0120 	and.w	r1, r1, #32
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80022b0:	f041 0107 	orr.w	r1, r1, #7
	CS43L22_write(iData[0], iData[1], 2);
 80022b4:	2202      	movs	r2, #2
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80022b6:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 80022ba:	f7ff ffc9 	bl	8002250 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 80022be:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = CS43L22_REG_MISC_CTL ;
 80022c2:	200e      	movs	r0, #14
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 80022c4:	2201      	movs	r2, #1
	iData[0] = CS43L22_REG_MISC_CTL ;
 80022c6:	f88d 0004 	strb.w	r0, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1); // Transmit register address to the device ...
 80022ca:	f7ff ffc1 	bl	8002250 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);  // ... and read 1 byte (the register content).
 80022ce:	4620      	mov	r0, r4
 80022d0:	f000 fa62 	bl	8002798 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80022d4:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 80022d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80022dc:	f001 0137 	and.w	r1, r1, #55	; 0x37
 80022e0:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	CS43L22_write(iData[0], iData[1], 2);
 80022e4:	2202      	movs	r2, #2
	iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80022e6:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 80022ea:	f7ff ffb1 	bl	8002250 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PLAYBACK_CTL2, 0x00, 2);
 80022ee:	2202      	movs	r2, #2
 80022f0:	2100      	movs	r1, #0
 80022f2:	200f      	movs	r0, #15
 80022f4:	f7ff ffac 	bl	8002250 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMA_VOL, 0x00, 2);
 80022f8:	2202      	movs	r2, #2
 80022fa:	2100      	movs	r1, #0
 80022fc:	201a      	movs	r0, #26
 80022fe:	f7ff ffa7 	bl	8002250 <CS43L22_write>
	CS43L22_write( CS43L22_REG_PCMB_VOL, 0x00, 2);
 8002302:	2202      	movs	r2, #2
 8002304:	2100      	movs	r1, #0
 8002306:	201b      	movs	r0, #27
 8002308:	f7ff ffa2 	bl	8002250 <CS43L22_write>
	CS43L22_write( 0x00, 0x99, 2);
 800230c:	2202      	movs	r2, #2
 800230e:	2199      	movs	r1, #153	; 0x99
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ff9d 	bl	8002250 <CS43L22_write>
	iData[0] = 0x32;
 8002316:	2532      	movs	r5, #50	; 0x32
	CS43L22_write( 0x47, 0x80, 2);
 8002318:	2202      	movs	r2, #2
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	2047      	movs	r0, #71	; 0x47
 800231e:	f7ff ff97 	bl	8002250 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 8002322:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002326:	f88d 5004 	strb.w	r5, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 800232a:	2201      	movs	r2, #1
 800232c:	4628      	mov	r0, r5
 800232e:	f7ff ff8f 	bl	8002250 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 8002332:	4620      	mov	r0, r4
 8002334:	f000 fa30 	bl	8002798 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] |= 0x80;
 8002338:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 800233c:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] |= 0x80;
 8002340:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	CS43L22_write(iData[0], iData[1], 2);
 8002344:	2202      	movs	r2, #2
	iData[1] |= 0x80;
 8002346:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 800234a:	f7ff ff81 	bl	8002250 <CS43L22_write>
	CS43L22_write(iData[0], iData[1], 1);
 800234e:	f89d 1005 	ldrb.w	r1, [sp, #5]
	iData[0] = 0x32;
 8002352:	f88d 5004 	strb.w	r5, [sp, #4]
	CS43L22_write(iData[0], iData[1], 1);
 8002356:	2201      	movs	r2, #1
 8002358:	4628      	mov	r0, r5
 800235a:	f7ff ff79 	bl	8002250 <CS43L22_write>
	CS43L22_EXTERNAL_DAC_I2C_recieve(&iData[1]);
 800235e:	4620      	mov	r0, r4
 8002360:	f000 fa1a 	bl	8002798 <CS43L22_EXTERNAL_DAC_I2C_recieve>
	iData[1] &= ~(0x80);
 8002364:	f89d 1005 	ldrb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002368:	f89d 0004 	ldrb.w	r0, [sp, #4]
	iData[1] &= ~(0x80);
 800236c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	CS43L22_write(iData[0], iData[1], 2);
 8002370:	2202      	movs	r2, #2
	iData[1] &= ~(0x80);
 8002372:	f88d 1005 	strb.w	r1, [sp, #5]
	CS43L22_write(iData[0], iData[1], 2);
 8002376:	f7ff ff6b 	bl	8002250 <CS43L22_write>
	CS43L22_write( 0x00, 0x00, 2);
 800237a:	2100      	movs	r1, #0
 800237c:	4608      	mov	r0, r1
 800237e:	2202      	movs	r2, #2
 8002380:	f7ff ff66 	bl	8002250 <CS43L22_write>
	CS43L22_write( CS43L22_REG_POWER_CTL1 , 0x9E, 2);
 8002384:	2202      	movs	r2, #2
 8002386:	219e      	movs	r1, #158	; 0x9e
 8002388:	4610      	mov	r0, r2
 800238a:	f7ff ff61 	bl	8002250 <CS43L22_write>
}
 800238e:	b003      	add	sp, #12
 8002390:	bd30      	pop	{r4, r5, pc}

08002392 <CS43L22_AudioSend>:

void CS43L22_AudioSend(uint16_t *buffer,uint16_t buffer_size){

	CS43L22_EXTERNAL_DAC_I2S_transmit(buffer,buffer_size);
 8002392:	f000 b9eb 	b.w	800276c <CS43L22_EXTERNAL_DAC_I2S_transmit>
	...

08002398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002398:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239a:	2230      	movs	r2, #48	; 0x30
{
 800239c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800239e:	eb0d 0002 	add.w	r0, sp, r2
 80023a2:	2100      	movs	r1, #0
 80023a4:	f000 fb8a 	bl	8002abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a8:	2214      	movs	r2, #20
 80023aa:	2100      	movs	r1, #0
 80023ac:	a807      	add	r0, sp, #28
 80023ae:	f000 fb85 	bl	8002abc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b2:	2100      	movs	r1, #0
 80023b4:	2210      	movs	r2, #16
 80023b6:	a803      	add	r0, sp, #12
 80023b8:	f000 fb80 	bl	8002abc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	2400      	movs	r4, #0
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <SystemClock_Config+0xb0>)
 80023c0:	9401      	str	r4, [sp, #4]
 80023c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <SystemClock_Config+0xb4>)
 80023d6:	9402      	str	r4, [sp, #8]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023f4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023f6:	2308      	movs	r3, #8
 80023f8:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023fe:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002400:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002402:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002404:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002406:	2307      	movs	r3, #7
 8002408:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800240a:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240e:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002410:	f7ff fab0 	bl	8001974 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002414:	230f      	movs	r3, #15
 8002416:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002418:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800241c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800241e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002424:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002426:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002428:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800242c:	f7ff fc52 	bl	8001cd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
 8002430:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002434:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002436:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8002438:	2303      	movs	r3, #3
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800243a:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 800243c:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f7ff fcf3 	bl	8001e28 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002442:	b018      	add	sp, #96	; 0x60
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000

08002450 <HAL_I2S_TxCpltCallback>:
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hi2s);

	//HAL_GPIO_TogglePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin);

	transferComplete = TRUE;
 8002450:	4b01      	ldr	r3, [pc, #4]	; (8002458 <HAL_I2S_TxCpltCallback+0x8>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	4770      	bx	lr
 8002458:	2000000a 	.word	0x2000000a

0800245c <load_buffer>:
#ifdef DSP

	// your code goes here

#endif
	buff[i] = sample;
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <load_buffer+0x34>)
 800245e:	490d      	ldr	r1, [pc, #52]	; (8002494 <load_buffer+0x38>)
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	8809      	ldrh	r1, [r1, #0]
void load_buffer(uint16_t *buff){
 8002464:	b510      	push	{r4, lr}
	buff[i] = sample;
 8002466:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]

	buff[i+1] =  buff[i];
 800246a:	eb00 0043 	add.w	r0, r0, r3, lsl #1

	i = i+2;
 800246e:	3302      	adds	r3, #2

	if( (i >= AUDIO_BUFFER_SIZE)){
 8002470:	2bb3      	cmp	r3, #179	; 0xb3
	buff[i+1] =  buff[i];
 8002472:	8041      	strh	r1, [r0, #2]
	i = i+2;
 8002474:	6013      	str	r3, [r2, #0]
	if( (i >= AUDIO_BUFFER_SIZE)){
 8002476:	d909      	bls.n	800248c <load_buffer+0x30>

		buffer_t aux = buffer_to_send;
		buffer_to_send = buffer_to_fill;
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <load_buffer+0x3c>)
		buffer_t aux = buffer_to_send;
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <load_buffer+0x40>)
		buffer_to_send = buffer_to_fill;
 800247c:	781c      	ldrb	r4, [r3, #0]
		buffer_t aux = buffer_to_send;
 800247e:	7808      	ldrb	r0, [r1, #0]
		buffer_to_send = buffer_to_fill;
 8002480:	700c      	strb	r4, [r1, #0]
		buffer_to_fill = aux;

		flag = data_ready_to_send;
 8002482:	4907      	ldr	r1, [pc, #28]	; (80024a0 <load_buffer+0x44>)
		buffer_to_fill = aux;
 8002484:	7018      	strb	r0, [r3, #0]
		flag = data_ready_to_send;
 8002486:	2300      	movs	r3, #0
 8002488:	700b      	strb	r3, [r1, #0]
		i=0;
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	bd10      	pop	{r4, pc}
 800248e:	bf00      	nop
 8002490:	2000003c 	.word	0x2000003c
 8002494:	200003f0 	.word	0x200003f0
 8002498:	20000038 	.word	0x20000038
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000009 	.word	0x20000009

080024a4 <fill_buffers>:
	}


}

void fill_buffers(){
 80024a4:	b510      	push	{r4, lr}

	if((buffer_to_fill == buffer_A)){
 80024a6:	4c09      	ldr	r4, [pc, #36]	; (80024cc <fill_buffers+0x28>)
 80024a8:	7822      	ldrb	r2, [r4, #0]
 80024aa:	b922      	cbnz	r2, 80024b6 <fill_buffers+0x12>

		audioToUpdate = audioBufferA;
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <fill_buffers+0x2c>)
 80024ae:	4809      	ldr	r0, [pc, #36]	; (80024d4 <fill_buffers+0x30>)
 80024b0:	6018      	str	r0, [r3, #0]
		load_buffer(audioToUpdate);
 80024b2:	f7ff ffd3 	bl	800245c <load_buffer>

	}
	if((buffer_to_fill == buffer_B)){
 80024b6:	7823      	ldrb	r3, [r4, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <fill_buffers+0x26>

		audioToUpdate = audioBufferB;
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <fill_buffers+0x2c>)
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <fill_buffers+0x34>)
 80024c0:	6018      	str	r0, [r3, #0]
		load_buffer(audioToUpdate);
	}

}
 80024c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		load_buffer(audioToUpdate);
 80024c6:	f7ff bfc9 	b.w	800245c <load_buffer>
 80024ca:	bd10      	pop	{r4, pc}
 80024cc:	20000038 	.word	0x20000038
 80024d0:	20000034 	.word	0x20000034
 80024d4:	20000098 	.word	0x20000098
 80024d8:	20000248 	.word	0x20000248

080024dc <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)

{
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hadc);
	adc_done = 1;
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <HAL_ADC_ConvCpltCallback+0x8>)
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	4770      	bx	lr
 80024e4:	2000002c 	.word	0x2000002c

080024e8 <select_buffer_to_transmit>:

uint16_t* select_buffer_to_transmit(buffer_t bf){

	uint16_t *ptr = NULL;

	if(buffer_to_send == buffer_A){
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <select_buffer_to_transmit+0x14>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b123      	cbz	r3, 80024f8 <select_buffer_to_transmit+0x10>

		ptr = audioBufferA;

	}else if(buffer_to_send == buffer_B){
 80024ee:	2b01      	cmp	r3, #1

		ptr = audioBufferB;
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <select_buffer_to_transmit+0x18>)
 80024f2:	bf18      	it	ne
 80024f4:	2000      	movne	r0, #0
 80024f6:	4770      	bx	lr
		ptr = audioBufferA;
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <select_buffer_to_transmit+0x1c>)

	}

	return ptr;

}
 80024fa:	4770      	bx	lr
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000248 	.word	0x20000248
 8002504:	20000098 	.word	0x20000098

08002508 <audio_buffer_init>:

void audio_buffer_init(){

	size_t i;

	for(i = 0;i<AUDIO_BUFFER_SIZE;i++){
 8002508:	2300      	movs	r3, #0

		audioBufferA[i] = 0;
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <audio_buffer_init+0x18>)
		audioBufferB[i] = 0;
 800250c:	4905      	ldr	r1, [pc, #20]	; (8002524 <audio_buffer_init+0x1c>)
		audioBufferA[i] = 0;
 800250e:	461a      	mov	r2, r3
 8002510:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		audioBufferB[i] = 0;
 8002514:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(i = 0;i<AUDIO_BUFFER_SIZE;i++){
 8002518:	3301      	adds	r3, #1
 800251a:	2bb4      	cmp	r3, #180	; 0xb4
 800251c:	d1f8      	bne.n	8002510 <audio_buffer_init+0x8>

	}

}
 800251e:	4770      	bx	lr
 8002520:	20000098 	.word	0x20000098
 8002524:	20000248 	.word	0x20000248

08002528 <main>:
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800252c:	f7fd fff8 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8002530:	f7ff ff32 	bl	8002398 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	2214      	movs	r2, #20
 8002536:	2100      	movs	r1, #0
 8002538:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800253a:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f000 fabe 	bl	8002abc <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002540:	4b77      	ldr	r3, [pc, #476]	; (8002720 <main+0x1f8>)
 8002542:	9400      	str	r4, [sp, #0]
 8002544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 8002546:	4877      	ldr	r0, [pc, #476]	; (8002724 <main+0x1fc>)
  hadc1.Instance = ADC1;
 8002548:	4d77      	ldr	r5, [pc, #476]	; (8002728 <main+0x200>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 800254a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8002768 <main+0x240>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800254e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002556:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800255a:	9200      	str	r2, [sp, #0]
 800255c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	9401      	str	r4, [sp, #4]
 8002560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
 8002568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256a:	f002 0201 	and.w	r2, r2, #1
 800256e:	9201      	str	r2, [sp, #4]
 8002570:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	9402      	str	r4, [sp, #8]
 8002574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002576:	f042 0208 	orr.w	r2, r2, #8
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
 800257c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257e:	f002 0208 	and.w	r2, r2, #8
 8002582:	9202      	str	r2, [sp, #8]
 8002584:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002586:	9403      	str	r4, [sp, #12]
 8002588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258a:	f042 0204 	orr.w	r2, r2, #4
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
 8002590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002592:	f002 0204 	and.w	r2, r2, #4
 8002596:	9203      	str	r2, [sp, #12]
 8002598:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	9404      	str	r4, [sp, #16]
 800259c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259e:	f042 0202 	orr.w	r2, r2, #2
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 80025aa:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ac:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 80025ae:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(Sampling_Check_GPIO_Port, Sampling_Check_Pin, GPIO_PIN_RESET);
 80025b2:	f7fe fb7b 	bl	8000cac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80025b6:	4622      	mov	r2, r4
 80025b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80025bc:	485b      	ldr	r0, [pc, #364]	; (800272c <main+0x204>)
 80025be:	f7fe fb75 	bl	8000cac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Button_Pin;
 80025c2:	2601      	movs	r6, #1
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80025c4:	a907      	add	r1, sp, #28
 80025c6:	4857      	ldr	r0, [pc, #348]	; (8002724 <main+0x1fc>)
  GPIO_InitStruct.Pin = Button_Pin;
 80025c8:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ca:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f7fe fa8d 	bl	8000aec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sampling_Check_Pin;
 80025d2:	2304      	movs	r3, #4
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 80025d4:	a907      	add	r1, sp, #28
 80025d6:	4853      	ldr	r0, [pc, #332]	; (8002724 <main+0x1fc>)
  GPIO_InitStruct.Pin = Sampling_Check_Pin;
 80025d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(Sampling_Check_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f7fe fa84 	bl	8000aec <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80025e6:	f24f 0310 	movw	r3, #61456	; 0xf010
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025ea:	4850      	ldr	r0, [pc, #320]	; (800272c <main+0x204>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80025ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ee:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f4:	f7fe fa7a 	bl	8000aec <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80025f8:	484d      	ldr	r0, [pc, #308]	; (8002730 <main+0x208>)
  hi2c1.Init.ClockSpeed = 100000;
 80025fa:	4a4e      	ldr	r2, [pc, #312]	; (8002734 <main+0x20c>)
 80025fc:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <main+0x210>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025fe:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002600:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8002608:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800260a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800260c:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800260e:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002610:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002612:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002614:	f7fe fc5c 	bl	8000ed0 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8002618:	4848      	ldr	r0, [pc, #288]	; (800273c <main+0x214>)
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <main+0x218>)
 800261c:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800261e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002622:	6043      	str	r3, [r0, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002624:	6103      	str	r3, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8002626:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800262a:	6143      	str	r3, [r0, #20]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800262c:	6084      	str	r4, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800262e:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002630:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002632:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002634:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002636:	f7fe ff2b 	bl	8001490 <HAL_I2S_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800263a:	2210      	movs	r2, #16
 800263c:	4621      	mov	r1, r4
 800263e:	a807      	add	r0, sp, #28
 8002640:	f000 fa3c 	bl	8002abc <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002644:	483f      	ldr	r0, [pc, #252]	; (8002744 <main+0x21c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002646:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264c:	e885 0009 	stmia.w	r5, {r0, r3}
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002654:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002656:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002658:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800265c:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = DISABLE;
 800265e:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002660:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002662:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002666:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002668:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800266a:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800266e:	616e      	str	r6, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002670:	f7fd ff82 	bl	8000578 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002674:	a907      	add	r1, sp, #28
 8002676:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8002678:	9607      	str	r6, [sp, #28]
  sConfig.Rank = 1;
 800267a:	9608      	str	r6, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800267c:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Instance = TIM2;
 800267e:	4e32      	ldr	r6, [pc, #200]	; (8002748 <main+0x220>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002680:	f7fe f932 	bl	80008e8 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002684:	2210      	movs	r2, #16
 8002686:	4621      	mov	r1, r4
 8002688:	a807      	add	r0, sp, #28
 800268a:	f000 fa17 	bl	8002abc <memset>
  htim2.Init.Prescaler = 175;
 800268e:	27af      	movs	r7, #175	; 0xaf
 8002690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002694:	e886 0088 	stmia.w	r6, {r3, r7}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002698:	4630      	mov	r0, r6
  htim2.Init.Period = 9;
 800269a:	2309      	movs	r3, #9
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269c:	60b4      	str	r4, [r6, #8]
  htim2.Init.Period = 9;
 800269e:	60f3      	str	r3, [r6, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026a0:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a2:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	9405      	str	r4, [sp, #20]
 80026a6:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026a8:	f7ff fcfc 	bl	80020a4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b0:	a907      	add	r1, sp, #28
 80026b2:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026b4:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026b6:	f7ff fd19 	bl	80020ec <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ba:	a905      	add	r1, sp, #20
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026bc:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026be:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c0:	4630      	mov	r0, r6
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 80026c2:	4c22      	ldr	r4, [pc, #136]	; (800274c <main+0x224>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026c4:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c6:	f7ff fda5 	bl	8002214 <HAL_TIMEx_MasterConfigSynchronization>
	audioToSend = audioBufferB;     //asigno punteros a c/u de los buffers
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <main+0x228>)
 80026cc:	6023      	str	r3, [r4, #0]
	audioToUpdate = audioBufferA;
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <main+0x22c>)
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <main+0x230>)
 80026d2:	601a      	str	r2, [r3, #0]
	CS43L22_init();   				//configuro el DAC CS43L22
 80026d4:	f7ff fdc8 	bl	8002268 <CS43L22_init>
	audio_buffer_init();         	//inicializo los buffers con ceros
 80026d8:	f7ff ff16 	bl	8002508 <audio_buffer_init>
	HAL_TIM_Base_Start(&htim2); 	//activo el timer
 80026dc:	4630      	mov	r0, r6
 80026de:	f7ff fc69 	bl	8001fb4 <HAL_TIM_Base_Start>
	HAL_ADC_Start_IT(&hadc1); 		// y el ADC
 80026e2:	4628      	mov	r0, r5
 80026e4:	f7fd ffee 	bl	80006c4 <HAL_ADC_Start_IT>
		if(transferComplete && (flag == data_ready_to_send)){
 80026e8:	4f1c      	ldr	r7, [pc, #112]	; (800275c <main+0x234>)
 80026ea:	4626      	mov	r6, r4
 80026ec:	4c1c      	ldr	r4, [pc, #112]	; (8002760 <main+0x238>)
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 80026ee:	f898 0000 	ldrb.w	r0, [r8]
 80026f2:	f7ff fef9 	bl	80024e8 <select_buffer_to_transmit>
		if(transferComplete && (flag == data_ready_to_send)){
 80026f6:	7823      	ldrb	r3, [r4, #0]
	  audioToSend = select_buffer_to_transmit(buffer_to_send); //me devuelve el puntero al buffer listo para enviar
 80026f8:	6030      	str	r0, [r6, #0]
		if(transferComplete && (flag == data_ready_to_send)){
 80026fa:	b13b      	cbz	r3, 800270c <main+0x1e4>
 80026fc:	783d      	ldrb	r5, [r7, #0]
 80026fe:	b92d      	cbnz	r5, 800270c <main+0x1e4>
			flag = idle;
 8002700:	2302      	movs	r3, #2
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 8002702:	21b4      	movs	r1, #180	; 0xb4
			flag = idle;
 8002704:	703b      	strb	r3, [r7, #0]
			CS43L22_AudioSend(audioToSend,AUDIO_BUFFER_SIZE); //Envio el buffer por I2S al codec
 8002706:	f7ff fe44 	bl	8002392 <CS43L22_AudioSend>
			transferComplete = FALSE;
 800270a:	7025      	strb	r5, [r4, #0]
		if(adc_done){
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <main+0x23c>)
 800270e:	781a      	ldrb	r2, [r3, #0]
 8002710:	2a00      	cmp	r2, #0
 8002712:	d0ec      	beq.n	80026ee <main+0x1c6>
			adc_done = 0;
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
			fill_buffers();
 8002718:	f7ff fec4 	bl	80024a4 <fill_buffers>
 800271c:	e7e6      	b.n	80026ec <main+0x1c4>
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40020000 	.word	0x40020000
 8002728:	20000200 	.word	0x20000200
 800272c:	40020c00 	.word	0x40020c00
 8002730:	20000044 	.word	0x20000044
 8002734:	40005400 	.word	0x40005400
 8002738:	000186a0 	.word	0x000186a0
 800273c:	200003f4 	.word	0x200003f4
 8002740:	40003c00 	.word	0x40003c00
 8002744:	40012000 	.word	0x40012000
 8002748:	200003b0 	.word	0x200003b0
 800274c:	20000030 	.word	0x20000030
 8002750:	20000248 	.word	0x20000248
 8002754:	20000034 	.word	0x20000034
 8002758:	20000098 	.word	0x20000098
 800275c:	20000009 	.word	0x20000009
 8002760:	2000000a 	.word	0x2000000a
 8002764:	2000002c 	.word	0x2000002c
 8002768:	20000008 	.word	0x20000008

0800276c <CS43L22_EXTERNAL_DAC_I2S_transmit>:

}*/

void CS43L22_EXTERNAL_DAC_I2S_transmit(uint16_t *buffer,uint16_t buffer_size){

	HAL_I2S_Transmit_IT(&hi2s3,buffer,buffer_size);
 800276c:	460a      	mov	r2, r1
 800276e:	4601      	mov	r1, r0
 8002770:	4801      	ldr	r0, [pc, #4]	; (8002778 <CS43L22_EXTERNAL_DAC_I2S_transmit+0xc>)
 8002772:	f7fe bf25 	b.w	80015c0 <HAL_I2S_Transmit_IT>
 8002776:	bf00      	nop
 8002778:	200003f4 	.word	0x200003f4

0800277c <CS43L22_EXTERNAL_DAC_I2C_write>:

}


void CS43L22_EXTERNAL_DAC_I2C_write(uint8_t *iData, uint8_t len)
{ //maneja el periferico i2c para comunicaicon con el dac
 800277c:	b507      	push	{r0, r1, r2, lr}

	HAL_I2C_Master_Transmit(&hi2c1, CS43L22_ADDRESS, iData, len, 100);
 800277e:	2364      	movs	r3, #100	; 0x64
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4803      	ldr	r0, [pc, #12]	; (8002794 <CS43L22_EXTERNAL_DAC_I2C_write+0x18>)
 8002788:	2194      	movs	r1, #148	; 0x94
 800278a:	f7fe fc45 	bl	8001018 <HAL_I2C_Master_Transmit>

}
 800278e:	b003      	add	sp, #12
 8002790:	f85d fb04 	ldr.w	pc, [sp], #4
 8002794:	20000044 	.word	0x20000044

08002798 <CS43L22_EXTERNAL_DAC_I2C_recieve>:

void CS43L22_EXTERNAL_DAC_I2C_recieve(uint8_t *iData){
 8002798:	b507      	push	{r0, r1, r2, lr}

	HAL_I2C_Master_Receive(&hi2c1, CS43L22_ADDRESS, iData, 1, 100);
 800279a:	2364      	movs	r3, #100	; 0x64
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	4602      	mov	r2, r0
 80027a0:	2301      	movs	r3, #1
 80027a2:	2194      	movs	r1, #148	; 0x94
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <CS43L22_EXTERNAL_DAC_I2C_recieve+0x18>)
 80027a6:	f7fe fd05 	bl	80011b4 <HAL_I2C_Master_Receive>

}
 80027aa:	b003      	add	sp, #12
 80027ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80027b0:	20000044 	.word	0x20000044

080027b4 <CS43L22_EXTERNAL_DAC_enable>:
void CS43L22_EXTERNAL_DAC_enable()
{
	//esta funcion se encarga de poner en alto o bajo el pin de reset del dac
	//recibe un 1 para poner el pin en alto y un 0 para ponerlo en bajo

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80027b4:	2201      	movs	r2, #1
 80027b6:	2110      	movs	r1, #16
 80027b8:	4801      	ldr	r0, [pc, #4]	; (80027c0 <CS43L22_EXTERNAL_DAC_enable+0xc>)
 80027ba:	f7fe ba77 	b.w	8000cac <HAL_GPIO_WritePin>
 80027be:	bf00      	nop
 80027c0:	40020c00 	.word	0x40020c00

080027c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_MspInit+0x34>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	9100      	str	r1, [sp, #0]
 80027cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
 80027d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80027da:	9200      	str	r2, [sp, #0]
 80027dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	9101      	str	r1, [sp, #4]
 80027e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f2:	b002      	add	sp, #8
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027fc:	b510      	push	{r4, lr}
 80027fe:	4604      	mov	r4, r0
 8002800:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002802:	2214      	movs	r2, #20
 8002804:	2100      	movs	r1, #0
 8002806:	a803      	add	r0, sp, #12
 8002808:	f000 f958 	bl	8002abc <memset>
  if(hadc->Instance==ADC1)
 800280c:	6822      	ldr	r2, [r4, #0]
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_ADC_MspInit+0x6c>)
 8002810:	429a      	cmp	r2, r3
 8002812:	d126      	bne.n	8002862 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002814:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002818:	2400      	movs	r4, #0
 800281a:	9401      	str	r4, [sp, #4]
 800281c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = Audio_Input_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 800281e:	4813      	ldr	r0, [pc, #76]	; (800286c <HAL_ADC_MspInit+0x70>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
 8002826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002828:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800282c:	9201      	str	r2, [sp, #4]
 800282e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002830:	9402      	str	r4, [sp, #8]
 8002832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Audio_Input_Pin;
 8002844:	2302      	movs	r3, #2
 8002846:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 8002848:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800284a:	2303      	movs	r3, #3
 800284c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(Audio_Input_GPIO_Port, &GPIO_InitStruct);
 800284e:	f7fe f94d 	bl	8000aec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002852:	2012      	movs	r0, #18
 8002854:	4622      	mov	r2, r4
 8002856:	4621      	mov	r1, r4
 8002858:	f7fe f8f0 	bl	8000a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800285c:	2012      	movs	r0, #18
 800285e:	f7fe f921 	bl	8000aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002862:	b008      	add	sp, #32
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	40012000 	.word	0x40012000
 800286c:	40020000 	.word	0x40020000

08002870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002870:	b530      	push	{r4, r5, lr}
 8002872:	4604      	mov	r4, r0
 8002874:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002876:	2214      	movs	r2, #20
 8002878:	2100      	movs	r1, #0
 800287a:	a803      	add	r0, sp, #12
 800287c:	f000 f91e 	bl	8002abc <memset>
  if(hi2c->Instance==I2C1)
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_I2C_MspInit+0x64>)
 8002884:	429a      	cmp	r2, r3
 8002886:	d122      	bne.n	80028ce <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002888:	4c13      	ldr	r4, [pc, #76]	; (80028d8 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	4814      	ldr	r0, [pc, #80]	; (80028dc <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288c:	2500      	movs	r5, #0
 800288e:	9501      	str	r5, [sp, #4]
 8002890:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	6323      	str	r3, [r4, #48]	; 0x30
 8002898:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80028a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80028a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a8:	2312      	movs	r3, #18
 80028aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028b2:	2304      	movs	r3, #4
 80028b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	f7fe f919 	bl	8000aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ba:	9502      	str	r5, [sp, #8]
 80028bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028c2:	6423      	str	r3, [r4, #64]	; 0x40
 80028c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ce:	b009      	add	sp, #36	; 0x24
 80028d0:	bd30      	pop	{r4, r5, pc}
 80028d2:	bf00      	nop
 80028d4:	40005400 	.word	0x40005400
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020400 	.word	0x40020400

080028e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	4604      	mov	r4, r0
 80028e4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e6:	2214      	movs	r2, #20
 80028e8:	2100      	movs	r1, #0
 80028ea:	a803      	add	r0, sp, #12
 80028ec:	f000 f8e6 	bl	8002abc <memset>
  if(hi2s->Instance==SPI3)
 80028f0:	6822      	ldr	r2, [r4, #0]
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_I2S_MspInit+0x9c>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d13f      	bne.n	8002978 <HAL_I2S_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028f8:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80028fc:	2400      	movs	r4, #0
 80028fe:	9400      	str	r4, [sp, #0]
 8002900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002902:	481f      	ldr	r0, [pc, #124]	; (8002980 <HAL_I2S_MspInit+0xa0>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
 800290a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002910:	9200      	str	r2, [sp, #0]
 8002912:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	9401      	str	r4, [sp, #4]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002920:	f002 0201 	and.w	r2, r2, #1
 8002924:	9201      	str	r2, [sp, #4]
 8002926:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	9402      	str	r4, [sp, #8]
 800292a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292c:	f042 0204 	orr.w	r2, r2, #4
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800293e:	2310      	movs	r3, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002940:	2601      	movs	r6, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002942:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002944:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002946:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800294a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800294c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800294e:	f7fe f8cd 	bl	8000aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002952:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002956:	a903      	add	r1, sp, #12
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <HAL_I2S_MspInit+0xa4>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800295a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002960:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002962:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002964:	f7fe f8c2 	bl	8000aec <HAL_GPIO_Init>

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002968:	2033      	movs	r0, #51	; 0x33
 800296a:	4622      	mov	r2, r4
 800296c:	4621      	mov	r1, r4
 800296e:	f7fe f865 	bl	8000a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002972:	2033      	movs	r0, #51	; 0x33
 8002974:	f7fe f896 	bl	8000aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002978:	b009      	add	sp, #36	; 0x24
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297c:	40003c00 	.word	0x40003c00
 8002980:	40020000 	.word	0x40020000
 8002984:	40020800 	.word	0x40020800

08002988 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002988:	6803      	ldr	r3, [r0, #0]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800298e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8002990:	d10b      	bne.n	80029aa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_TIM_Base_MspInit+0x28>)
 8002998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029aa:	b002      	add	sp, #8
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <SVC_Handler>:
 80029b4:	4770      	bx	lr

080029b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b6:	4770      	bx	lr

080029b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b8:	f7fd bdcc 	b.w	8000554 <HAL_IncTick>

080029bc <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029bc:	4801      	ldr	r0, [pc, #4]	; (80029c4 <ADC_IRQHandler+0x8>)
 80029be:	f7fd beff 	b.w	80007c0 <HAL_ADC_IRQHandler>
 80029c2:	bf00      	nop
 80029c4:	20000200 	.word	0x20000200

080029c8 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 80029c8:	4801      	ldr	r0, [pc, #4]	; (80029d0 <SPI3_IRQHandler+0x8>)
 80029ca:	f7fe be32 	b.w	8001632 <HAL_I2S_IRQHandler>
 80029ce:	bf00      	nop
 80029d0:	200003f4 	.word	0x200003f4

080029d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	490f      	ldr	r1, [pc, #60]	; (8002a14 <SystemInit+0x40>)
 80029d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <SystemInit+0x44>)
 80029e4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029e6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80029ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <SystemInit+0x48>)
 80029fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a06:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a08:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a0e:	608b      	str	r3, [r1, #8]
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	24003010 	.word	0x24003010

08002a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a26:	e003      	b.n	8002a30 <LoopCopyDataInit>

08002a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a2e:	3104      	adds	r1, #4

08002a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a30:	480b      	ldr	r0, [pc, #44]	; (8002a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a38:	d3f6      	bcc.n	8002a28 <CopyDataInit>
  ldr  r2, =_sbss
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a3c:	e002      	b.n	8002a44 <LoopFillZerobss>

08002a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a40:	f842 3b04 	str.w	r3, [r2], #4

08002a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a48:	d3f9      	bcc.n	8002a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a4a:	f7ff ffc3 	bl	80029d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4e:	f000 f811 	bl	8002a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a52:	f7ff fd69 	bl	8002528 <main>
  bx  lr    
 8002a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a5c:	08002b0c 	.word	0x08002b0c
  ldr  r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a64:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002a68:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002a6c:	2000043c 	.word	0x2000043c

08002a70 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a70:	e7fe      	b.n	8002a70 <BusFault_Handler>
	...

08002a74 <__libc_init_array>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	4e0d      	ldr	r6, [pc, #52]	; (8002aac <__libc_init_array+0x38>)
 8002a78:	4c0d      	ldr	r4, [pc, #52]	; (8002ab0 <__libc_init_array+0x3c>)
 8002a7a:	1ba4      	subs	r4, r4, r6
 8002a7c:	10a4      	asrs	r4, r4, #2
 8002a7e:	2500      	movs	r5, #0
 8002a80:	42a5      	cmp	r5, r4
 8002a82:	d109      	bne.n	8002a98 <__libc_init_array+0x24>
 8002a84:	4e0b      	ldr	r6, [pc, #44]	; (8002ab4 <__libc_init_array+0x40>)
 8002a86:	4c0c      	ldr	r4, [pc, #48]	; (8002ab8 <__libc_init_array+0x44>)
 8002a88:	f000 f820 	bl	8002acc <_init>
 8002a8c:	1ba4      	subs	r4, r4, r6
 8002a8e:	10a4      	asrs	r4, r4, #2
 8002a90:	2500      	movs	r5, #0
 8002a92:	42a5      	cmp	r5, r4
 8002a94:	d105      	bne.n	8002aa2 <__libc_init_array+0x2e>
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a9c:	4798      	blx	r3
 8002a9e:	3501      	adds	r5, #1
 8002aa0:	e7ee      	b.n	8002a80 <__libc_init_array+0xc>
 8002aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aa6:	4798      	blx	r3
 8002aa8:	3501      	adds	r5, #1
 8002aaa:	e7f2      	b.n	8002a92 <__libc_init_array+0x1e>
 8002aac:	08002b04 	.word	0x08002b04
 8002ab0:	08002b04 	.word	0x08002b04
 8002ab4:	08002b04 	.word	0x08002b04
 8002ab8:	08002b08 	.word	0x08002b08

08002abc <memset>:
 8002abc:	4402      	add	r2, r0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <memset+0xa>
 8002ac4:	4770      	bx	lr
 8002ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aca:	e7f9      	b.n	8002ac0 <memset+0x4>

08002acc <_init>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr

08002ad8 <_fini>:
 8002ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ada:	bf00      	nop
 8002adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ade:	bc08      	pop	{r3}
 8002ae0:	469e      	mov	lr, r3
 8002ae2:	4770      	bx	lr
